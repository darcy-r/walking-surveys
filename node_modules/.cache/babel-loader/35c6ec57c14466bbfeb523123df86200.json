{"ast":null,"code":"import { keys } from './util';\n/**\n * Data type based on level of measurement\n */\n\nexport const Type = {\n  quantitative: 'quantitative',\n  ordinal: 'ordinal',\n  temporal: 'temporal',\n  nominal: 'nominal',\n  geojson: 'geojson'\n};\nexport function isType(t) {\n  return t in Type;\n}\nexport function isContinuous(type) {\n  return type === 'quantitative' || type === 'temporal';\n}\nexport function isDiscrete(type) {\n  return type === 'ordinal' || type === 'nominal';\n}\nexport const QUANTITATIVE = Type.quantitative;\nexport const ORDINAL = Type.ordinal;\nexport const TEMPORAL = Type.temporal;\nexport const NOMINAL = Type.nominal;\nexport const GEOJSON = Type.geojson;\nexport const TYPES = keys(Type);\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\n\nexport function getFullName(type) {\n  if (type) {\n    type = type.toLowerCase();\n\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n\n      case GEOJSON:\n        return 'geojson';\n    }\n  } // If we get invalid input, return undefined type.\n\n\n  return undefined;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAR,QAAmB,QAAnB;AAEA;;;;AAGA,OAAO,MAAMC,IAAI,GAAG;EAClBC,YAAY,EAAE,cADI;EAElBC,OAAO,EAAE,SAFS;EAGlBC,QAAQ,EAAE,UAHQ;EAIlBC,OAAO,EAAE,SAJS;EAKlBC,OAAO,EAAE;AALS,CAAb;AAUP,OAAM,SAAUC,MAAV,CAAiBC,CAAjB,EAAuB;EAC3B,OAAOA,CAAC,IAAIP,IAAZ;AACD;AAED,OAAM,SAAUQ,YAAV,CAAuBC,IAAvB,EAAiC;EACrC,OAAOA,IAAI,KAAK,cAAT,IAA2BA,IAAI,KAAK,UAA3C;AACD;AACD,OAAM,SAAUC,UAAV,CAAqBD,IAArB,EAA+B;EACnC,OAAOA,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,SAAtC;AACD;AAED,OAAO,MAAME,YAAY,GAAGX,IAAI,CAACC,YAA1B;AACP,OAAO,MAAMW,OAAO,GAAGZ,IAAI,CAACE,OAArB;AACP,OAAO,MAAMW,QAAQ,GAAGb,IAAI,CAACG,QAAtB;AACP,OAAO,MAAMW,OAAO,GAAGd,IAAI,CAACI,OAArB;AAEP,OAAO,MAAMW,OAAO,GAAGf,IAAI,CAACK,OAArB;AAIP,OAAO,MAAMW,KAAK,GAAGjB,IAAI,CAACC,IAAD,CAAlB;AAEP;;;;;;AAKA,OAAM,SAAUiB,WAAV,CAAsBR,IAAtB,EAAyC;EAC7C,IAAIA,IAAJ,EAAU;IACRA,IAAI,GAAGA,IAAI,CAACS,WAAL,EAAP;;IACA,QAAQT,IAAR;MACE,KAAK,GAAL;MACA,KAAKE,YAAL;QACE,OAAO,cAAP;;MACF,KAAK,GAAL;MACA,KAAKE,QAAL;QACE,OAAO,UAAP;;MACF,KAAK,GAAL;MACA,KAAKD,OAAL;QACE,OAAO,SAAP;;MACF,KAAK,GAAL;MACA,KAAKE,OAAL;QACE,OAAO,SAAP;;MACF,KAAKC,OAAL;QACE,OAAO,SAAP;IAdJ;EAgBD,CAnB4C,CAoB7C;;;EACA,OAAOI,SAAP;AACD","names":["keys","Type","quantitative","ordinal","temporal","nominal","geojson","isType","t","isContinuous","type","isDiscrete","QUANTITATIVE","ORDINAL","TEMPORAL","NOMINAL","GEOJSON","TYPES","getFullName","toLowerCase","undefined"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/type.ts"],"sourcesContent":["import {keys} from './util';\n\n/**\n * Data type based on level of measurement\n */\nexport const Type = {\n  quantitative: 'quantitative',\n  ordinal: 'ordinal',\n  temporal: 'temporal',\n  nominal: 'nominal',\n  geojson: 'geojson'\n} as const;\n\nexport type Type = keyof typeof Type;\n\nexport function isType(t: any): t is Type {\n  return t in Type;\n}\n\nexport function isContinuous(type: Type): type is 'quantitative' | 'temporal' {\n  return type === 'quantitative' || type === 'temporal';\n}\nexport function isDiscrete(type: Type): type is 'ordinal' | 'nominal' {\n  return type === 'ordinal' || type === 'nominal';\n}\n\nexport const QUANTITATIVE = Type.quantitative;\nexport const ORDINAL = Type.ordinal;\nexport const TEMPORAL = Type.temporal;\nexport const NOMINAL = Type.nominal;\n\nexport const GEOJSON = Type.geojson;\n\nexport type StandardType = 'quantitative' | 'ordinal' | 'temporal' | 'nominal';\n\nexport const TYPES = keys(Type);\n\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type: Type | string): Type | undefined {\n  if (type) {\n    type = type.toLowerCase();\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n      case GEOJSON:\n        return 'geojson';\n    }\n  }\n  // If we get invalid input, return undefined type.\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}