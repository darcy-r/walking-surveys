{"ast":null,"code":"import { getSecondaryRangeChannel } from '../../channel';\nimport { getFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n  var _a;\n\n  const {\n    encoding,\n    config\n  } = model;\n  const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  const axis = model.axis(channel) || {};\n  const {\n    format,\n    formatType\n  } = axis;\n\n  if (isCustomFormatType(formatType)) {\n    return Object.assign({\n      text: formatCustomType({\n        fieldOrDatumDef,\n        field: 'datum.value',\n        format,\n        formatType,\n        config\n      })\n    }, specifiedLabelsSpec);\n  }\n\n  return specifiedLabelsSpec;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,wBAAR,QAA6D,eAA7D;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;AACA,SAAQC,gBAAR,EAA0BC,kBAA1B,QAAmD,WAAnD;AAGA,OAAM,SAAUC,MAAV,CAAiBC,KAAjB,EAAmCC,OAAnC,EAAkEC,mBAAlE,EAA0F;;;EAC9F,MAAM;IAACC,QAAD;IAAWC;EAAX,IAAqBJ,KAA3B;EAEA,MAAMK,eAAe,GACnB,wBAAkB,CAASF,QAAQ,CAACF,OAAD,CAAjB,CAAlB,MAA6C,IAA7C,IAA6CK,aAA7C,GAA6CA,EAA7C,GAAiDV,kBAAkB,CAACO,QAAQ,CAACR,wBAAwB,CAACM,OAAD,CAAzB,CAAT,CADrE;EAEA,MAAMM,IAAI,GAAGP,KAAK,CAACO,IAAN,CAAWN,OAAX,KAAuB,EAApC;EACA,MAAM;IAACO,MAAD;IAASC;EAAT,IAAuBF,IAA7B;;EAEA,IAAIT,kBAAkB,CAACW,UAAD,CAAtB,EAAoC;IAClC;MACEC,IAAI,EAAEb,gBAAgB,CAAC;QACrBQ,eADqB;QAErBM,KAAK,EAAE,aAFc;QAGrBH,MAHqB;QAIrBC,UAJqB;QAKrBL;MALqB,CAAD;IADxB,GAQKF,mBARL;EAUD;;EAED,OAAOA,mBAAP;AACD","names":["getSecondaryRangeChannel","getFieldOrDatumDef","formatCustomType","isCustomFormatType","labels","model","channel","specifiedLabelsSpec","encoding","config","fieldOrDatumDef","_a","axis","format","formatType","text","field"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/axis/encode.ts"],"sourcesContent":["import {getSecondaryRangeChannel, PositionScaleChannel} from '../../channel';\nimport {getFieldOrDatumDef} from '../../channeldef';\nimport {formatCustomType, isCustomFormatType} from '../format';\nimport {UnitModel} from '../unit';\n\nexport function labels(model: UnitModel, channel: PositionScaleChannel, specifiedLabelsSpec: any) {\n  const {encoding, config} = model;\n\n  const fieldOrDatumDef =\n    getFieldOrDatumDef<string>(encoding[channel]) ?? getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  const axis = model.axis(channel) || {};\n  const {format, formatType} = axis;\n\n  if (isCustomFormatType(formatType)) {\n    return {\n      text: formatCustomType({\n        fieldOrDatumDef,\n        field: 'datum.value',\n        format,\n        formatType,\n        config\n      }),\n      ...specifiedLabelsSpec\n    };\n  }\n\n  return specifiedLabelsSpec;\n}\n"]},"metadata":{},"sourceType":"module"}