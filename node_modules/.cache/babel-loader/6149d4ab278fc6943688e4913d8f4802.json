{"ast":null,"code":"import { parseSelector } from 'vega-event-selector';\nimport { isString } from 'vega-util';\nimport { TUPLE } from '.';\nimport { varName } from '../../util';\nimport inputBindings from './inputs';\nimport toggle, { TOGGLE } from './toggle';\nconst clear = {\n  defined: selCmpt => {\n    return selCmpt.clear !== undefined && selCmpt.clear !== false;\n  },\n  parse: (model, selCmpt) => {\n    if (selCmpt.clear) {\n      selCmpt.clear = isString(selCmpt.clear) ? parseSelector(selCmpt.clear, 'view') : selCmpt.clear;\n    }\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    if (inputBindings.defined(selCmpt)) {\n      for (const proj of selCmpt.project.items) {\n        const idx = signals.findIndex(n => n.name === varName(`${selCmpt.name}_${proj.field}`));\n\n        if (idx !== -1) {\n          signals[idx].on.push({\n            events: selCmpt.clear,\n            update: 'null'\n          });\n        }\n      }\n    }\n\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    function addClear(idx, update) {\n      if (idx !== -1 && signals[idx].on) {\n        signals[idx].on.push({\n          events: selCmpt.clear,\n          update\n        });\n      }\n    } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\n\n\n    if (selCmpt.type === 'interval') {\n      for (const proj of selCmpt.project.items) {\n        const vIdx = signals.findIndex(n => n.name === proj.signals.visual);\n        addClear(vIdx, '[0, 0]');\n\n        if (vIdx === -1) {\n          const dIdx = signals.findIndex(n => n.name === proj.signals.data);\n          addClear(dIdx, 'null');\n        }\n      }\n    } else {\n      let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);\n      addClear(tIdx, 'null');\n\n      if (toggle.defined(selCmpt)) {\n        tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);\n        addClear(tIdx, 'false');\n      }\n    }\n\n    return signals;\n  }\n};\nexport default clear;","map":{"version":3,"mappings":"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","names":["parseSelector","isString","TUPLE","varName","inputBindings","toggle","TOGGLE","clear","defined","selCmpt","undefined","parse","model","topLevelSignals","signals","proj","project","items","idx","findIndex","n","name","field","on","push","events","update","addClear","type","vIdx","visual","dIdx","data","tIdx"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/selection/clear.ts"],"sourcesContent":["import {Update} from 'vega';\nimport {parseSelector} from 'vega-event-selector';\nimport {isString} from 'vega-util';\nimport {TUPLE} from '.';\nimport {varName} from '../../util';\nimport inputBindings from './inputs';\nimport toggle, {TOGGLE} from './toggle';\nimport {SelectionCompiler} from '.';\n\nconst clear: SelectionCompiler = {\n  defined: selCmpt => {\n    return selCmpt.clear !== undefined && selCmpt.clear !== false;\n  },\n\n  parse: (model, selCmpt) => {\n    if (selCmpt.clear) {\n      selCmpt.clear = isString(selCmpt.clear) ? parseSelector(selCmpt.clear, 'view') : selCmpt.clear;\n    }\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    if (inputBindings.defined(selCmpt)) {\n      for (const proj of selCmpt.project.items) {\n        const idx = signals.findIndex(n => n.name === varName(`${selCmpt.name}_${proj.field}`));\n        if (idx !== -1) {\n          signals[idx].on.push({events: selCmpt.clear, update: 'null'});\n        }\n      }\n    }\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    function addClear(idx: number, update: Update) {\n      if (idx !== -1 && signals[idx].on) {\n        signals[idx].on.push({events: selCmpt.clear, update});\n      }\n    }\n\n    // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\n    if (selCmpt.type === 'interval') {\n      for (const proj of selCmpt.project.items) {\n        const vIdx = signals.findIndex(n => n.name === proj.signals.visual);\n        addClear(vIdx, '[0, 0]');\n\n        if (vIdx === -1) {\n          const dIdx = signals.findIndex(n => n.name === proj.signals.data);\n          addClear(dIdx, 'null');\n        }\n      }\n    } else {\n      let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);\n      addClear(tIdx, 'null');\n\n      if (toggle.defined(selCmpt)) {\n        tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);\n        addClear(tIdx, 'false');\n      }\n    }\n\n    return signals;\n  }\n};\n\nexport default clear;\n"]},"metadata":{},"sourceType":"module"}