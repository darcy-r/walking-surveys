{"ast":null,"code":"import * as encode from './encode';\nexport const rule = {\n  vgMark: 'rule',\n  encodeEntry: model => {\n    const {\n      markDef\n    } = model;\n    const orient = markDef.orient;\n\n    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n      // Show nothing if we have none of x, y, lat, and long.\n      return {};\n    }\n\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      orient: 'ignore',\n      size: 'ignore',\n      theta: 'ignore'\n    })), encode.pointOrRangePosition('x', model, {\n      defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',\n      defaultPos2: 'zeroOrMin',\n      range: orient !== 'vertical' // include x2 for horizontal or line segment rule\n\n    })), encode.pointOrRangePosition('y', model, {\n      defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',\n      defaultPos2: 'zeroOrMin',\n      range: orient !== 'horizontal' // include y2 for vertical or line segment rule\n\n    })), encode.nonPosition('size', model, {\n      vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\n\n    }));\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,KAAKA,MAAZ,MAAwB,UAAxB;AAEA,OAAO,MAAMC,IAAI,GAAiB;EAChCC,MAAM,EAAE,MADwB;EAEhCC,WAAW,EAAGC,KAAD,IAAqB;IAChC,MAAM;MAACC;IAAD,IAAYD,KAAlB;IACA,MAAME,MAAM,GAAGD,OAAO,CAACC,MAAvB;;IAEA,IAAI,CAACF,KAAK,CAACG,QAAN,CAAeC,CAAhB,IAAqB,CAACJ,KAAK,CAACG,QAAN,CAAeE,CAArC,IAA0C,CAACL,KAAK,CAACG,QAAN,CAAeG,QAA1D,IAAsE,CAACN,KAAK,CAACG,QAAN,CAAeI,SAA1F,EAAqG;MACnG;MACA,OAAO,EAAP;IACD;;IAED,mEACKX,MAAM,CAACY,eAAP,CAAuBR,KAAvB,EAA8B;MAC/BS,KAAK,EAAE,QADwB;MAE/BC,QAAQ,EAAE,QAFqB;MAG/BC,KAAK,EAAE,SAHwB;MAI/BT,MAAM,EAAE,QAJuB;MAK/BU,IAAI,EAAE,QALyB;MAM/BC,KAAK,EAAE;IANwB,CAA9B,CADL,GASKjB,MAAM,CAACkB,oBAAP,CAA4B,GAA5B,EAAiCd,KAAjC,EAAwC;MACzCe,UAAU,EAAEb,MAAM,KAAK,YAAX,GAA0B,WAA1B,GAAwC,KADX;MAEzCc,WAAW,EAAE,WAF4B;MAGzCC,KAAK,EAAEf,MAAM,KAAK,UAHuB,CAGZ;;IAHY,CAAxC,CATL,GAcKN,MAAM,CAACkB,oBAAP,CAA4B,GAA5B,EAAiCd,KAAjC,EAAwC;MACzCe,UAAU,EAAEb,MAAM,KAAK,UAAX,GAAwB,WAAxB,GAAsC,KADT;MAEzCc,WAAW,EAAE,WAF4B;MAGzCC,KAAK,EAAEf,MAAM,KAAK,YAHuB,CAGV;;IAHU,CAAxC,CAdL,GAmBKN,MAAM,CAACsB,WAAP,CAAmB,MAAnB,EAA2BlB,KAA3B,EAAkC;MACnCmB,SAAS,EAAE,aADwB,CACV;;IADU,CAAlC,CAnBL;EAuBD;AAlC+B,CAA3B","names":["encode","rule","vgMark","encodeEntry","model","markDef","orient","encoding","x","y","latitude","longitude","baseEncodeEntry","align","baseline","color","size","theta","pointOrRangePosition","defaultPos","defaultPos2","range","nonPosition","vgChannel"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/rule.ts"],"sourcesContent":["import {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const rule: MarkCompiler = {\n  vgMark: 'rule',\n  encodeEntry: (model: UnitModel) => {\n    const {markDef} = model;\n    const orient = markDef.orient;\n\n    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n      // Show nothing if we have none of x, y, lat, and long.\n      return {};\n    }\n\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        orient: 'ignore',\n        size: 'ignore',\n        theta: 'ignore'\n      }),\n      ...encode.pointOrRangePosition('x', model, {\n        defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',\n        defaultPos2: 'zeroOrMin',\n        range: orient !== 'vertical' // include x2 for horizontal or line segment rule\n      }),\n      ...encode.pointOrRangePosition('y', model, {\n        defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',\n        defaultPos2: 'zeroOrMin',\n        range: orient !== 'horizontal' // include y2 for vertical or line segment rule\n      }),\n      ...encode.nonPosition('size', model, {\n        vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\n      })\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}