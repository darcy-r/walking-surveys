{"ast":null,"code":"import { getMarkPropOrConfig } from '../common';\nimport * as encode from './encode';\nexport const text = {\n  vgMark: 'text',\n  encodeEntry: model => {\n    const {\n      config,\n      encoding\n    } = model;\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'include',\n      baseline: 'include',\n      color: 'include',\n      size: 'ignore',\n      orient: 'ignore',\n      theta: 'include'\n    })), encode.pointPosition('x', model, {\n      defaultPos: 'mid'\n    })), encode.pointPosition('y', model, {\n      defaultPos: 'mid'\n    })), encode.text(model)), encode.nonPosition('size', model, {\n      vgChannel: 'fontSize' // VL's text size is fontSize\n\n    })), encode.nonPosition('angle', model)), encode.valueIfDefined('align', align(model.markDef, encoding, config))), encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config))), encode.pointPosition('radius', model, {\n      defaultPos: null\n    })), encode.pointPosition('theta', model, {\n      defaultPos: null\n    }));\n  }\n};\n\nfunction align(markDef, encoding, config) {\n  const a = getMarkPropOrConfig('align', markDef, config);\n\n  if (a === undefined) {\n    return 'center';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}\n\nfunction baseline(markDef, encoding, config) {\n  const b = getMarkPropOrConfig('baseline', markDef, config);\n\n  if (b === undefined) {\n    return 'middle';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}","map":{"version":3,"mappings":"AAIA,SAAQA,mBAAR,QAAkC,WAAlC;AAGA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AAEA,OAAO,MAAMC,IAAI,GAAiB;EAChCC,MAAM,EAAE,MADwB;EAGhCC,WAAW,EAAGC,KAAD,IAAqB;IAChC,MAAM;MAACC,MAAD;MAASC;IAAT,IAAqBF,KAA3B;IAEA,uJACKJ,MAAM,CAACO,eAAP,CAAuBH,KAAvB,EAA8B;MAC/BI,KAAK,EAAE,SADwB;MAE/BC,QAAQ,EAAE,SAFqB;MAG/BC,KAAK,EAAE,SAHwB;MAI/BC,IAAI,EAAE,QAJyB;MAK/BC,MAAM,EAAE,QALuB;MAM/BC,KAAK,EAAE;IANwB,CAA9B,CADL,GASKb,MAAM,CAACc,aAAP,CAAqB,GAArB,EAA0BV,KAA1B,EAAiC;MAACW,UAAU,EAAE;IAAb,CAAjC,CATL,GAUKf,MAAM,CAACc,aAAP,CAAqB,GAArB,EAA0BV,KAA1B,EAAiC;MAACW,UAAU,EAAE;IAAb,CAAjC,CAVL,GAWKf,MAAM,CAACC,IAAP,CAAYG,KAAZ,CAXL,GAYKJ,MAAM,CAACgB,WAAP,CAAmB,MAAnB,EAA2BZ,KAA3B,EAAkC;MACnCa,SAAS,EAAE,UADwB,CACb;;IADa,CAAlC,CAZL,GAeKjB,MAAM,CAACgB,WAAP,CAAmB,OAAnB,EAA4BZ,KAA5B,CAfL,GAgBKJ,MAAM,CAACkB,cAAP,CAAsB,OAAtB,EAA+BV,KAAK,CAACJ,KAAK,CAACe,OAAP,EAAgBb,QAAhB,EAA0BD,MAA1B,CAApC,CAhBL,GAiBKL,MAAM,CAACkB,cAAP,CAAsB,UAAtB,EAAkCT,QAAQ,CAACL,KAAK,CAACe,OAAP,EAAgBb,QAAhB,EAA0BD,MAA1B,CAA1C,CAjBL,GAkBKL,MAAM,CAACc,aAAP,CAAqB,QAArB,EAA+BV,KAA/B,EAAsC;MAACW,UAAU,EAAE;IAAb,CAAtC,CAlBL,GAmBKf,MAAM,CAACc,aAAP,CAAqB,OAArB,EAA8BV,KAA9B,EAAqC;MAACW,UAAU,EAAE;IAAb,CAArC,CAnBL;EAqBD;AA3B+B,CAA3B;;AA8BP,SAASP,KAAT,CAAeW,OAAf,EAAiCb,QAAjC,EAA6DD,MAA7D,EAAsF;EACpF,MAAMe,CAAC,GAAGrB,mBAAmB,CAAC,OAAD,EAAUoB,OAAV,EAAmBd,MAAnB,CAA7B;;EACA,IAAIe,CAAC,KAAKC,SAAV,EAAqB;IACnB,OAAO,QAAP;EACD,CAJmF,CAKpF;;;EACA,OAAOA,SAAP;AACD;;AAED,SAASZ,QAAT,CAAkBU,OAAlB,EAAoCb,QAApC,EAAgED,MAAhE,EAAyF;EACvF,MAAMiB,CAAC,GAAGvB,mBAAmB,CAAC,UAAD,EAAaoB,OAAb,EAAsBd,MAAtB,CAA7B;;EACA,IAAIiB,CAAC,KAAKD,SAAV,EAAqB;IACnB,OAAO,QAAP;EACD,CAJsF,CAKvF;;;EACA,OAAOA,SAAP;AACD","names":["getMarkPropOrConfig","encode","text","vgMark","encodeEntry","model","config","encoding","baseEncodeEntry","align","baseline","color","size","orient","theta","pointPosition","defaultPos","nonPosition","vgChannel","valueIfDefined","markDef","a","undefined","b"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/text.ts"],"sourcesContent":["import {SignalRef} from 'vega';\nimport {Config} from '../../config';\nimport {Encoding} from '../../encoding';\nimport {MarkDef} from '../../mark';\nimport {getMarkPropOrConfig} from '../common';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const text: MarkCompiler = {\n  vgMark: 'text',\n\n  encodeEntry: (model: UnitModel) => {\n    const {config, encoding} = model;\n\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'include',\n        baseline: 'include',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore',\n        theta: 'include'\n      }),\n      ...encode.pointPosition('x', model, {defaultPos: 'mid'}),\n      ...encode.pointPosition('y', model, {defaultPos: 'mid'}),\n      ...encode.text(model),\n      ...encode.nonPosition('size', model, {\n        vgChannel: 'fontSize' // VL's text size is fontSize\n      }),\n      ...encode.nonPosition('angle', model),\n      ...encode.valueIfDefined('align', align(model.markDef, encoding, config)),\n      ...encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config)),\n      ...encode.pointPosition('radius', model, {defaultPos: null}),\n      ...encode.pointPosition('theta', model, {defaultPos: null})\n    };\n  }\n};\n\nfunction align(markDef: MarkDef, encoding: Encoding<string>, config: Config<SignalRef>) {\n  const a = getMarkPropOrConfig('align', markDef, config);\n  if (a === undefined) {\n    return 'center';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n\nfunction baseline(markDef: MarkDef, encoding: Encoding<string>, config: Config<SignalRef>) {\n  const b = getMarkPropOrConfig('baseline', markDef, config);\n  if (b === undefined) {\n    return 'middle';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}