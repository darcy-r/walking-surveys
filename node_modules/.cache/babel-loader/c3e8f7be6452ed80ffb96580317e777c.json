{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\n/** Time Unit that only corresponds to only one part of Date objects. */\n\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n  yeardayofyear: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n  weekday: 1,\n  weeksdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n  utcyeardayofyear: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n  utcweekday: 1,\n  utcweeksdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n  return t.startsWith('utc');\n}\nexport function getLocalTimeUnit(t) {\n  return t.substr(3);\n} // In order of increasing specificity\n\nexport const VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\n\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n\n  if (index < 0) {\n    return false;\n  } // exclude milliseconds\n\n\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  } // exclude dayofyear\n\n\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\n\nexport function fieldExpr(fullTimeUnit, field) {\n  let {\n    end\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    end: false\n  };\n  const fieldRef = accessPathWithDatum(field);\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  let lastTimeUnit;\n  const dateExpr = {};\n\n  for (const part of TIMEUNIT_PARTS) {\n    if (containsTimeUnit(fullTimeUnit, part)) {\n      dateExpr[part] = func(part);\n      lastTimeUnit = part;\n    }\n  }\n\n  if (end) {\n    dateExpr[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\n\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const expr = timeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n\n  const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n  return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  let params;\n\n  if (isString(timeUnit)) {\n    params = {\n      unit: timeUnit\n    };\n  } else if (isObject(timeUnit)) {\n    params = Object.assign(Object.assign({}, timeUnit), timeUnit.unit ? {\n      unit: timeUnit.unit\n    } : {});\n  }\n\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnit(params.unit);\n  }\n\n  return params;\n}\nexport function timeUnitToString(tu) {\n  const _a = normalizeTimeUnit(tu),\n        {\n    utc\n  } = _a,\n        rest = __rest(_a, [\"utc\"]);\n\n  if (rest.unit) {\n    return (utc ? 'utc' : '') + keys(rest).map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`)).join('');\n  } else {\n    // when maxbins is specified instead of units\n    return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(p => varName(`_${p}_${rest[p]}`)).join('');\n  }\n}","map":{"version":3,"mappings":"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","names":["isObject","isString","dateTimeExprToExpr","accessPathWithDatum","keys","stringify","varName","LOCAL_SINGLE_TIMEUNIT_INDEX","year","quarter","month","week","day","dayofyear","date","hours","minutes","seconds","milliseconds","TIMEUNIT_PARTS","isLocalSingleTimeUnit","timeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcweek","utcday","utcdayofyear","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","LOCAL_MULTI_TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","yearweek","yearweekday","yearweekdayhours","yearweekdayhoursminutes","yearweekdayhoursminutesseconds","yeardayofyear","quartermonth","monthdate","monthdatehours","monthdatehoursminutes","monthdatehoursminutesseconds","weekday","weeksdayhours","weekdayhoursminutes","weekdayhoursminutesseconds","dayhours","dayhoursminutes","dayhoursminutesseconds","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcyearweek","utcyearweekday","utcyearweekdayhours","utcyearweekdayhoursminutes","utcyearweekdayhoursminutesseconds","utcyeardayofyear","utcquartermonth","utcmonthdate","utcmonthdatehours","utcmonthdatehoursminutes","utcmonthdatehoursminutesseconds","utcweekday","utcweeksdayhours","utcweekdayhoursminutes","utcweekdayhoursminutesseconds","utcdayhours","utcdayhoursminutes","utcdayhoursminutesseconds","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","isUTCTimeUnit","t","startsWith","getLocalTimeUnit","substr","VEGALITE_TIMEFORMAT","getTimeUnitParts","filter","part","containsTimeUnit","fullTimeUnit","index","indexOf","charAt","length","fieldExpr","field","end","fieldRef","utc","func","lastTimeUnit","dateExpr","timeUnitSpecifierExpression","undefined","timeUnitParts","formatExpression","isUTCScale","expr","normalizeTimeUnit","params","unit","timeUnitToString","tu","_a","rest","map","p","join"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/timeunit.ts"],"sourcesContent":["import {isObject, isString} from 'vega-util';\nimport {DateTimeExpr, dateTimeExprToExpr} from './datetime';\nimport {accessPathWithDatum, keys, stringify, varName} from './util';\n\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n} as const;\n\nexport type LocalSingleTimeUnit = keyof typeof LOCAL_SINGLE_TIMEUNIT_INDEX;\n\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\n\nexport function isLocalSingleTimeUnit(timeUnit: string): timeUnit is LocalSingleTimeUnit {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\n\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n} as const;\n\nexport type UtcSingleTimeUnit = keyof typeof UTC_SINGLE_TIMEUNIT_INDEX;\n\nexport type SingleTimeUnit = LocalSingleTimeUnit | UtcSingleTimeUnit;\n\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n\n  yeardayofyear: 1,\n\n  quartermonth: 1,\n\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n\n  weekday: 1,\n  weeksdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n\n  minutesseconds: 1,\n\n  secondsmilliseconds: 1\n} as const;\n\nexport type LocalMultiTimeUnit = keyof typeof LOCAL_MULTI_TIMEUNIT_INDEX;\n\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n\n  utcyeardayofyear: 1,\n\n  utcquartermonth: 1,\n\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n\n  utcweekday: 1,\n  utcweeksdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n\n  utcminutesseconds: 1,\n\n  utcsecondsmilliseconds: 1\n} as const;\n\nexport type UtcMultiTimeUnit = keyof typeof UTC_MULTI_TIMEUNIT_INDEX;\n\nexport type MultiTimeUnit = LocalMultiTimeUnit | UtcMultiTimeUnit;\n\nexport type LocalTimeUnit = LocalSingleTimeUnit | LocalMultiTimeUnit;\nexport type UtcTimeUnit = UtcSingleTimeUnit | UtcMultiTimeUnit;\n\nexport function isUTCTimeUnit(t: string): t is UtcTimeUnit {\n  return t.startsWith('utc');\n}\n\nexport function getLocalTimeUnit(t: UtcTimeUnit): LocalTimeUnit {\n  return t.substr(3) as LocalTimeUnit;\n}\n\nexport type TimeUnit = SingleTimeUnit | MultiTimeUnit;\n\nexport type TimeUnitFormat =\n  | 'year'\n  | 'year-month'\n  | 'year-month-date'\n  | 'quarter'\n  | 'month'\n  | 'date'\n  | 'week'\n  | 'day'\n  | 'hours'\n  | 'hours-minutes'\n  | 'minutes'\n  | 'seconds'\n  | 'milliseconds';\n\nexport interface TimeUnitParams {\n  /**\n   * Defines how date-time values should be binned.\n   */\n  unit?: TimeUnit;\n\n  /**\n   * If no `unit` is specified, maxbins is used to infer time units.\n   */\n  maxbins?: number;\n\n  /**\n   * The number of steps between bins, in terms of the least\n   * significant unit provided.\n   */\n  step?: number;\n\n  /**\n   * True to use UTC timezone. Equivalent to using a `utc` prefixed `TimeUnit`.\n   */\n  utc?: boolean;\n}\n\n// matches vega time unit format specifier\nexport type TimeFormatConfig = Partial<Record<TimeUnitFormat, string>>;\n\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT: TimeFormatConfig = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\n\nexport function getTimeUnitParts(timeUnit: TimeUnit): LocalSingleTimeUnit[] {\n  return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\n\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit: TimeUnit, timeUnit: TimeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n\n  if (index < 0) {\n    return false;\n  }\n\n  // exclude milliseconds\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  }\n\n  // exclude dayofyear\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit: TimeUnit, field: string, {end}: {end: boolean} = {end: false}): string {\n  const fieldRef = accessPathWithDatum(field);\n\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit: TimeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  let lastTimeUnit: TimeUnit;\n\n  const dateExpr: DateTimeExpr = {};\n\n  for (const part of TIMEUNIT_PARTS) {\n    if (containsTimeUnit(fullTimeUnit, part)) {\n      dateExpr[part] = func(part);\n      lastTimeUnit = part;\n    }\n  }\n\n  if (end) {\n    dateExpr[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExprToExpr(dateExpr);\n}\n\nexport function timeUnitSpecifierExpression(timeUnit: TimeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit: TimeUnit, field: string, isUTCScale: boolean): string {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const expr = timeUnitSpecifierExpression(timeUnit);\n\n  // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n  const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n\n  return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\n\nexport function normalizeTimeUnit(timeUnit: TimeUnit | TimeUnitParams): TimeUnitParams {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  let params: TimeUnitParams;\n  if (isString(timeUnit)) {\n    params = {\n      unit: timeUnit\n    };\n  } else if (isObject(timeUnit)) {\n    params = {\n      ...timeUnit,\n      ...(timeUnit.unit ? {unit: timeUnit.unit} : {})\n    };\n  }\n\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnit(params.unit);\n  }\n\n  return params;\n}\n\nexport function timeUnitToString(tu: TimeUnit | TimeUnitParams) {\n  const {utc, ...rest} = normalizeTimeUnit(tu);\n\n  if (rest.unit) {\n    return (\n      (utc ? 'utc' : '') +\n      keys(rest)\n        .map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`))\n        .join('')\n    );\n  } else {\n    // when maxbins is specified instead of units\n    return (\n      (utc ? 'utc' : '') +\n      'timeunit' +\n      keys(rest)\n        .map(p => varName(`_${p}_${rest[p]}`))\n        .join('')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}