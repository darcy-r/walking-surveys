{"ast":null,"code":"import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nimport { Model } from './model';\nexport class ConcatModel extends Model {\n  constructor(spec, parent, parentGivenName, config) {\n    var _a, _b, _c, _d;\n\n    super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\n\n    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.children = this.getChildren(spec).map((child, i) => {\n      return buildModel(child, this, this.getName(`concat_${i}`), undefined, config);\n    });\n  }\n\n  parseData() {\n    this.component.data = parseData(this);\n\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n\n  parseSelections() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n\n    for (const child of this.children) {\n      child.parseSelections();\n\n      for (const key of keys(child.component.selection)) {\n        this.component.selection[key] = child.component.selection[key];\n      }\n    }\n  }\n\n  parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  parseAxesAndHeaders() {\n    for (const child of this.children) {\n      child.parseAxesAndHeaders();\n    } // TODO(#2415): support shared axes\n\n  }\n\n  getChildren(spec) {\n    if (isVConcatSpec(spec)) {\n      return spec.vconcat;\n    } else if (isHConcatSpec(spec)) {\n      return spec.hconcat;\n    }\n\n    return spec.concat;\n  }\n\n  parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  parseAxisGroup() {\n    return null;\n  }\n\n  assembleSelectionTopLevelSignals(signals) {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  assembleSignals() {\n    this.children.forEach(child => child.assembleSignals());\n    return [];\n  }\n\n  assembleLayoutSignals() {\n    const layoutSignals = assembleLayoutSignals(this);\n\n    for (const child of this.children) {\n      layoutSignals.push(...child.assembleLayoutSignals());\n    }\n\n    return layoutSignals;\n  }\n\n  assembleSelectionData(data) {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  assembleMarks() {\n    // only children have marks\n    return this.children.map(child => {\n      const title = child.assembleTitle();\n      const style = child.assembleGroupStyle();\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        type: 'group',\n        name: child.getName('group')\n      }, title ? {\n        title\n      } : {}), style ? {\n        style\n      } : {}), encodeEntry ? {\n        encode: {\n          update: encodeEntry\n        }\n      } : {}), child.assembleGroup());\n    });\n  }\n\n  assembleGroupStyle() {\n    return undefined;\n  }\n\n  assembleDefaultLayout() {\n    const columns = this.layout.columns;\n    return Object.assign(Object.assign({}, columns != null ? {\n      columns\n    } : {}), {\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["log","isHConcatSpec","isVConcatSpec","keys","buildModel","parseData","assembleLayoutSignals","parseConcatLayoutSize","Model","ConcatModel","constructor","spec","parent","parentGivenName","config","resolve","_a","axis","_b","x","_c","_d","y","warn","message","CONCAT_CANNOT_SHARE_AXIS","children","getChildren","map","child","i","getName","undefined","component","data","parseSelections","selection","key","parseMarkGroup","parseAxesAndHeaders","vconcat","hconcat","concat","parseLayoutSize","parseAxisGroup","assembleSelectionTopLevelSignals","signals","reduce","sg","assembleSignals","forEach","layoutSignals","push","assembleSelectionData","db","assembleMarks","title","assembleTitle","style","assembleGroupStyle","encodeEntry","assembleGroupEncodeEntry","type","name","encode","update","assembleGroup","assembleDefaultLayout","columns","layout","bounds","align"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/concat.ts"],"sourcesContent":["import {NewSignal, SignalRef} from 'vega';\nimport {Config} from '../config';\nimport * as log from '../log';\nimport {isHConcatSpec, isVConcatSpec, NormalizedConcatSpec, NormalizedSpec} from '../spec';\nimport {keys} from '../util';\nimport {VgData, VgLayout} from '../vega.schema';\nimport {buildModel} from './buildmodel';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {parseConcatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\n\nexport class ConcatModel extends Model {\n  public readonly children: Model[];\n\n  constructor(spec: NormalizedConcatSpec, parent: Model, parentGivenName: string, config: Config<SignalRef>) {\n    super(spec, 'concat', parent, parentGivenName, config, spec.resolve);\n\n    if (spec.resolve?.axis?.x === 'shared' || spec.resolve?.axis?.y === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.children = this.getChildren(spec).map((child, i) => {\n      return buildModel(child, this, this.getName(`concat_${i}`), undefined, config);\n    });\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n\n  public parseSelections() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelections();\n      for (const key of keys(child.component.selection)) {\n        this.component.selection[key] = child.component.selection[key];\n      }\n    }\n  }\n\n  public parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  public parseAxesAndHeaders() {\n    for (const child of this.children) {\n      child.parseAxesAndHeaders();\n    }\n\n    // TODO(#2415): support shared axes\n  }\n\n  private getChildren(spec: NormalizedConcatSpec): NormalizedSpec[] {\n    if (isVConcatSpec(spec)) {\n      return spec.vconcat;\n    } else if (isHConcatSpec(spec)) {\n      return spec.hconcat;\n    }\n    return spec.concat;\n  }\n\n  public parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  public parseAxisGroup(): void {\n    return null;\n  }\n\n  public assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[] {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  public assembleSignals(): NewSignal[] {\n    this.children.forEach(child => child.assembleSignals());\n    return [];\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    const layoutSignals = assembleLayoutSignals(this);\n\n    for (const child of this.children) {\n      layoutSignals.push(...child.assembleLayoutSignals());\n    }\n\n    return layoutSignals;\n  }\n\n  public assembleSelectionData(data: readonly VgData[]): readonly VgData[] {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  public assembleMarks(): any[] {\n    // only children have marks\n    return this.children.map(child => {\n      const title = child.assembleTitle();\n      const style = child.assembleGroupStyle();\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\n\n      return {\n        type: 'group',\n        name: child.getName('group'),\n        ...(title ? {title} : {}),\n        ...(style ? {style} : {}),\n        ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n        ...child.assembleGroup()\n      };\n    });\n  }\n\n  public assembleGroupStyle(): string | string[] {\n    return undefined;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    const columns = this.layout.columns;\n    return {\n      ...(columns != null ? {columns} : {}),\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}