{"ast":null,"code":"import { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\n\nfunction cloneSubtree(facet) {\n  function clone(node) {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\n        copy.addDimensions(facet.fields);\n      }\n\n      for (const n of node.children.flatMap(clone)) {\n        n.parent = copy;\n      }\n\n      return [copy];\n    }\n\n    return node.children.flatMap(clone);\n  }\n\n  return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\n\n\nexport function moveFacetDown(node) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      const child = node.children[0];\n\n      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n      const facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node\n\n      const cloner = cloneSubtree(node);\n      const copy = node.children.map(cloner).flat();\n\n      for (const c of copy) {\n        c.parent = facetMain;\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["DataSourceType","AggregateNode","OutputNode","FacetNode","JoinAggregateTransformNode","FACET_SCALE_PREFIX","StackNode","WindowTransformNode","cloneSubtree","facet","clone","node","copy","newName","getSource","setSource","model","component","data","outputNodes","addDimensions","fields","n","children","flatMap","parent","moveFacetDown","numChildren","child","swapWithParent","facetMain","main","moveMainDownToFacet","cloner","map","flat","c","type","Main"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/subtree.ts"],"sourcesContent":["import {DataSourceType} from '../../data';\nimport {AggregateNode} from './aggregate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {JoinAggregateTransformNode} from './joinaggregate';\nimport {FACET_SCALE_PREFIX} from './optimize';\nimport {StackNode} from './stack';\nimport {WindowTransformNode} from './window';\n\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet: FacetNode) {\n  function clone(node: DataFlowNode): DataFlowNode[] {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (\n        copy instanceof AggregateNode ||\n        copy instanceof StackNode ||\n        copy instanceof WindowTransformNode ||\n        copy instanceof JoinAggregateTransformNode\n      ) {\n        copy.addDimensions(facet.fields);\n      }\n      for (const n of node.children.flatMap(clone)) {\n        n.parent = copy;\n      }\n\n      return [copy];\n    }\n\n    return node.children.flatMap(clone);\n  }\n  return clone;\n}\n\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node: DataFlowNode) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      const child = node.children[0];\n\n      if (\n        child instanceof AggregateNode ||\n        child instanceof StackNode ||\n        child instanceof WindowTransformNode ||\n        child instanceof JoinAggregateTransformNode\n      ) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n\n      const facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain);\n\n      // replicate the subtree and place it before the facet's main node\n      const cloner = cloneSubtree(node);\n      const copy: DataFlowNode[] = node.children.map(cloner).flat();\n      for (const c of copy) {\n        c.parent = facetMain;\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node: DataFlowNode) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}