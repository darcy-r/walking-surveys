{"ast":null,"code":"import { isAggregateOp } from '../../aggregate';\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\n\nexport class WindowTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    var _a, _b;\n\n    const out = new Set();\n    ((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).forEach(out.add, out);\n    ((_b = this.transform.sort) !== null && _b !== void 0 ? _b : []).forEach(m => out.add(m.field));\n    this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  getDefaultName(windowFieldDef) {\n    var _a;\n\n    return (_a = windowFieldDef.as) !== null && _a !== void 0 ? _a : vgField(windowFieldDef);\n  }\n\n  hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    var _a;\n\n    const fields = [];\n    const ops = [];\n    const as = [];\n    const params = [];\n\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return Object.assign({\n        type: 'joinaggregate',\n        as,\n        ops: ops,\n        fields\n      }, groupby !== undefined ? {\n        groupby\n      } : {});\n    }\n\n    const sortFields = [];\n    const sortOrder = [];\n\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push((_a = sortField.order) !== null && _a !== void 0 ? _a : 'ascending');\n      }\n    }\n\n    const sort = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort\n    }, ignorePeers !== undefined ? {\n      ignorePeers\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {}), frame !== undefined ? {\n      frame\n    } : {});\n  }\n\n}","map":{"version":3,"mappings":"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","names":["isAggregateOp","vgField","duplicate","hash","unique","DataFlowNode","WindowTransformNode","constructor","parent","transform","clone","addDimensions","fields","groupby","concat","d","dependentFields","out","Set","_a","forEach","add","sort","_b","m","field","window","map","w","filter","f","undefined","producedFields","getDefaultName","windowFieldDef","as","assemble","ops","params","push","op","param","frame","every","o","Object","type","sortFields","sortOrder","sortField","order","ignorePeers"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/window.ts"],"sourcesContent":["import {AggregateOp, WindowTransform as VgWindowTransform} from 'vega';\nimport {isAggregateOp} from '../../aggregate';\nimport {vgField} from '../../channeldef';\nimport {SortOrder} from '../../sort';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgComparator, VgJoinAggregateTransform} from '../../vega.schema';\nimport {unique} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: WindowTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    (this.transform.groupby ?? []).forEach(out.add, out);\n    (this.transform.sort ?? []).forEach(m => out.add(m.field));\n\n    this.transform.window\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(out.add, out);\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as ?? vgField(windowFieldDef);\n  }\n\n  public hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgWindowTransform | VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as: string[] = [];\n    const params = [];\n\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return {\n        type: 'joinaggregate',\n        as,\n        ops: ops as AggregateOp[],\n        fields,\n        ...(groupby !== undefined ? {groupby} : {})\n      } as VgJoinAggregateTransform;\n    }\n\n    const sortFields: string[] = [];\n    const sortOrder: SortOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order ?? 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    return {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort,\n      ...(ignorePeers !== undefined ? {ignorePeers} : {}),\n      ...(groupby !== undefined ? {groupby} : {}),\n      ...(frame !== undefined ? {frame} : {})\n    } as VgWindowTransform;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}