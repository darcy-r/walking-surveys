{"ast":null,"code":"import { isObject } from 'vega';\nimport { parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport * as log from '../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../selection';\nimport { duplicate, vals, varName } from '../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n  defined: selCmpt => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n\n    return spec && projLen;\n  },\n  parse: (model, selCmpt, selDef) => {\n    var _a; // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n\n\n    const selDef_ = duplicate(selDef);\n    selDef_.select = isString(selDef_.select) ? {\n      type: selDef_.select,\n      toggle: selCmpt.toggle\n    } : Object.assign(Object.assign({}, selDef_.select), {\n      toggle: selCmpt.toggle\n    });\n    disableDirectManipulation(selCmpt, selDef_);\n\n    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n\n      for (const evt of selCmpt.events) {\n        evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);\n\n        if (!evt.filter.includes(legendFilter)) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {\n      legend: {\n        merge: stream\n      }\n    };\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    const markName = name => s => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${varName(proj.field)}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n\n      if (hasSignal.length === 0) {\n        const events = stream.merge.map(markName(`${prefix}_symbols`)).concat(stream.merge.map(markName(`${prefix}_labels`))).concat(stream.merge.map(markName(`${prefix}_entries`)));\n        signals.unshift(Object.assign(Object.assign({\n          name: sgName\n        }, !selCmpt.init ? {\n          value: null\n        } : {}), {\n          on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n          {\n            events,\n            update: 'datum.value || item().items[0].items[0].datum.value',\n            force: true\n          }, {\n            events: stream.merge,\n            update: `!event.item || !datum ? null : ${sgName}`,\n            force: true\n          }]\n        }));\n      }\n    }\n\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({\n          signal\n        })),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), {\n        events\n      }));\n    }\n\n    return signals;\n  }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n  var _a, _b, _c, _d;\n\n  const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n\n  for (const selCmpt of vals((_b = model.component.selection) !== null && _b !== void 0 ? _b : {})) {\n    const proj = (_c = selCmpt.project.hasField[field]) !== null && _c !== void 0 ? _c : selCmpt.project.hasChannel[channel];\n\n    if (proj && legendBindings.defined(selCmpt)) {\n      const legendSelections = (_d = legendCmpt.get('selections')) !== null && _d !== void 0 ? _d : [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["isObject","parseSelector","array","isString","disableDirectManipulation","TUPLE","log","isLegendBinding","isLegendStreamBinding","SELECTION_ID","duplicate","vals","varName","TUPLE_FIELDS","TOGGLE","legendBindings","defined","selCmpt","spec","resolve","bind","projLen","project","items","length","field","warn","message","LEGEND_BINDINGS_MUST_HAVE_PROJECTION","parse","model","selDef","selDef_","select","type","toggle","Object","on","clear","legendFilter","evt","events","filter","_a","includes","push","legend","stream","merge","topLevelSignals","signals","selName","name","markName","s","ds","markname","proj","hasLegend","prefix","sgName","hasSignal","map","concat","unshift","init","value","update","force","tuple","find","fields","values","p","valid","v","join","signal","parseInteractiveLegend","channel","legendCmpt","fieldDef","component","selection","_b","hasField","_c","hasChannel","legendSelections","get","_d","set"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/selection/legends.ts"],"sourcesContent":["import {isObject, MergedStream, Stream} from 'vega';\nimport {parseSelector} from 'vega-event-selector';\nimport {array, isString} from 'vega-util';\nimport {disableDirectManipulation, TUPLE} from '.';\nimport {NonPositionScaleChannel} from '../../channel';\nimport * as log from '../../log';\nimport {isLegendBinding, isLegendStreamBinding, SELECTION_ID} from '../../selection';\nimport {duplicate, vals, varName} from '../../util';\nimport {LegendComponent} from '../legend/component';\nimport {UnitModel} from '../unit';\nimport {TUPLE_FIELDS} from './project';\nimport {TOGGLE} from './toggle';\nimport {SelectionCompiler} from '.';\n\nconst legendBindings: SelectionCompiler<'point'> = {\n  defined: selCmpt => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n\n    return spec && projLen;\n  },\n\n  parse: (model, selCmpt, selDef) => {\n    // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n    const selDef_ = duplicate(selDef);\n    selDef_.select = isString(selDef_.select)\n      ? {type: selDef_.select, toggle: selCmpt.toggle}\n      : {...selDef_.select, toggle: selCmpt.toggle};\n    disableDirectManipulation(selCmpt, selDef_);\n\n    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n      for (const evt of selCmpt.events) {\n        evt.filter = array(evt.filter ?? []);\n        if (!evt.filter.includes(legendFilter)) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream: Stream[] = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {legend: {merge: stream}};\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && (selCmpt.bind.legend as MergedStream);\n    const markName = (name: string) => (s: Stream) => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${varName(proj.field)}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n\n      if (hasSignal.length === 0) {\n        const events = stream.merge\n          .map(markName(`${prefix}_symbols`))\n          .concat(stream.merge.map(markName(`${prefix}_labels`)))\n          .concat(stream.merge.map(markName(`${prefix}_entries`)));\n\n        signals.unshift({\n          name: sgName,\n          ...(!selCmpt.init ? {value: null} : {}),\n          on: [\n            // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {events, update: 'datum.value || item().items[0].items[0].datum.value', force: true},\n            {events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true}\n          ]\n        });\n      }\n    }\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({signal})),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;\n      else toggle.on.push({...toggle.on[0], events});\n    }\n\n    return signals;\n  }\n};\n\nexport default legendBindings;\n\nexport function parseInteractiveLegend(\n  model: UnitModel,\n  channel: NonPositionScaleChannel,\n  legendCmpt: LegendComponent\n) {\n  const field = model.fieldDef(channel)?.field;\n  for (const selCmpt of vals(model.component.selection ?? {})) {\n    const proj = selCmpt.project.hasField[field] ?? selCmpt.project.hasChannel[channel];\n    if (proj && legendBindings.defined(selCmpt)) {\n      const legendSelections = legendCmpt.get('selections') ?? [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}