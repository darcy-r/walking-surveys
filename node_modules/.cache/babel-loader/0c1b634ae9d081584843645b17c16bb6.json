{"ast":null,"code":"import { isArray } from 'vega-util';\nimport { some } from '../../util';\nimport { Split } from '../split';\nexport class ScaleComponent extends Split {\n  constructor(name, typeWithExplicit) {\n    super({}, // no initial explicit property\n    {\n      name\n    } // name as initial implicit property\n    );\n    this.merged = false;\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n  /**\n   * Whether the scale definitely includes zero in the domain\n   */\n\n\n  domainDefinitelyIncludesZero() {\n    if (this.get('zero') !== false) {\n      return true;\n    }\n\n    return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAQA,OAAR,QAAsB,WAAtB;AAIA,SAAQC,IAAR,QAAmB,YAAnB;AAEA,SAAkBC,KAAlB,QAA8B,UAA9B;AAcA,OAAM,MAAOC,cAAP,SAA8BD,KAA9B,CAAwD;EAG5DE,YAAYC,IAAZ,EAA0BC,gBAA1B,EAA+D;IAC7D,MACE,EADF,EACM;IACJ;MAACD;IAAD,CAFF,CAES;IAFT;IAHK,cAAS,KAAT;IAOL,KAAKE,eAAL,CAAqB,MAArB,EAA6BD,gBAA7B;EACD;EAED;;;;;EAGOE,4BAA4B;IACjC,IAAI,KAAKC,GAAL,CAAS,MAAT,MAAqB,KAAzB,EAAgC;MAC9B,OAAO,IAAP;IACD;;IACD,OAAOR,IAAI,CAAC,KAAKQ,GAAL,CAAS,SAAT,CAAD,EAAsBC,CAAC,IAAIV,OAAO,CAACU,CAAD,CAAP,IAAcA,CAAC,CAACC,MAAF,KAAa,CAA3B,IAAgCD,CAAC,CAAC,CAAD,CAAD,IAAQ,CAAxC,IAA6CA,CAAC,CAAC,CAAD,CAAD,IAAQ,CAAhF,CAAX;EACD;;AAnB2D","names":["isArray","some","Split","ScaleComponent","constructor","name","typeWithExplicit","setWithExplicit","domainDefinitelyIncludesZero","get","d","length"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/scale/component.ts"],"sourcesContent":["import {SignalRef} from 'vega';\nimport {isArray} from 'vega-util';\nimport {ScaleChannel} from '../../channel';\nimport {Scale, ScaleType} from '../../scale';\nimport {ParameterExtent} from '../../selection';\nimport {some} from '../../util';\nimport {VgNonUnionDomain, VgScale} from '../../vega.schema';\nimport {Explicit, Split} from '../split';\n\n/**\n * All VgDomain property except domain.\n * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n */\nexport type ScaleComponentProps = Omit<VgScale, 'domain' | 'domainRaw' | 'reverse'> & {\n  domains: VgNonUnionDomain[];\n  selectionExtent?: ParameterExtent;\n  reverse?: boolean | SignalRef; // Need override since Vega doesn't official support scale reverse yet (though it does in practice)\n};\n\nexport type Range = ScaleComponentProps['range'];\n\nexport class ScaleComponent extends Split<ScaleComponentProps> {\n  public merged = false;\n\n  constructor(name: string, typeWithExplicit: Explicit<ScaleType>) {\n    super(\n      {}, // no initial explicit property\n      {name} // name as initial implicit property\n    );\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n\n  /**\n   * Whether the scale definitely includes zero in the domain\n   */\n  public domainDefinitelyIncludesZero() {\n    if (this.get('zero') !== false) {\n      return true;\n    }\n    return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n  }\n}\n\nexport type ScaleComponentIndex = Partial<Record<ScaleChannel, ScaleComponent>>;\n\nexport type ScaleIndex = Partial<Record<ScaleChannel, Scale<SignalRef>>>;\n"]},"metadata":{},"sourceType":"module"}