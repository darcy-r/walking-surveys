{"ast":null,"code":"import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoPointNode extends DataFlowNode {\n  constructor(parent, projection, fields, as) {\n    super(parent);\n    this.projection = projection;\n    this.fields = fields;\n    this.as = as;\n  }\n\n  clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  static parseAll(parent, model) {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n      const pair = coordinates.map(channel => {\n        const def = getFieldOrDatumDef(model.encoding[channel]);\n        return isFieldDef(def) ? def.field : isDatumDef(def) ? {\n          expr: `${def.datum}`\n        } : isValueDef(def) ? {\n          expr: `${def['value']}`\n        } : undefined;\n      });\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName(`x${suffix}`), model.getName(`y${suffix}`)]);\n      }\n    }\n\n    return parent;\n  }\n\n  dependentFields() {\n    return new Set(this.fields.filter(isString));\n  }\n\n  producedFields() {\n    return new Set(this.as);\n  }\n\n  hash() {\n    return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;\n  }\n\n  assemble() {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAQA,QAAR,QAAuB,WAAvB;AACA,SAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,SAAjD,EAA4DC,UAA5D,QAA6E,eAA7E;AACA,SAAQC,kBAAR,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoDC,UAApD,QAAqE,kBAArE;AACA,SAAQC,SAAR,EAAmBC,IAAnB,QAA8B,YAA9B;AAGA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,OAAM,MAAOC,YAAP,SAA4BD,YAA5B,CAAwC;EAK5CE,YACEC,MADF,EAEUC,UAFV,EAGUC,MAHV,EAIUC,EAJV,EAI8B;IAE5B,MAAMH,MAAN;IAJQ;IACA;IACA;EAGT;;EAXMI,KAAK;IACV,OAAO,IAAIN,YAAJ,CAAiB,IAAjB,EAAuB,KAAKG,UAA5B,EAAwCN,SAAS,CAAC,KAAKO,MAAN,CAAjD,EAAgEP,SAAS,CAAC,KAAKQ,EAAN,CAAzE,CAAP;EACD;;EAWqB,OAARE,QAAQ,CAACL,MAAD,EAAuBM,KAAvB,EAAuC;IAC3D,IAAI,CAACA,KAAK,CAACC,cAAN,EAAL,EAA6B;MAC3B,OAAOP,MAAP;IACD;;IAED,KAAK,MAAMQ,WAAX,IAA0B,CACxB,CAACnB,SAAD,EAAYF,QAAZ,CADwB,EAExB,CAACG,UAAD,EAAaF,SAAb,CAFwB,CAA1B,EAGoC;MAClC,MAAMqB,IAAI,GAAGD,WAAW,CAACE,GAAZ,CAAgBC,OAAO,IAAG;QACrC,MAAMC,GAAG,GAAGrB,kBAAkB,CAACe,KAAK,CAACO,QAAN,CAAeF,OAAf,CAAD,CAA9B;QACA,OAAOlB,UAAU,CAACmB,GAAD,CAAV,GACHA,GAAG,CAACE,KADD,GAEHtB,UAAU,CAACoB,GAAD,CAAV,GACA;UAACG,IAAI,EAAE,GAAGH,GAAG,CAACI,KAAK;QAAnB,CADA,GAEAtB,UAAU,CAACkB,GAAD,CAAV,GACA;UAACG,IAAI,EAAE,GAAGH,GAAG,CAAC,OAAD,CAAS;QAAtB,CADA,GAEAK,SANJ;MAOD,CATY,CAAb;MAWA,MAAMC,MAAM,GAAGV,WAAW,CAAC,CAAD,CAAX,KAAmBlB,UAAnB,GAAgC,GAAhC,GAAsC,EAArD;;MAEA,IAAImB,IAAI,CAAC,CAAD,CAAJ,IAAWA,IAAI,CAAC,CAAD,CAAnB,EAAwB;QACtBT,MAAM,GAAG,IAAIF,YAAJ,CAAiBE,MAAjB,EAAyBM,KAAK,CAACC,cAAN,EAAzB,EAAiDE,IAAjD,EAAuD,CAC9DH,KAAK,CAACa,OAAN,CAAc,IAAID,MAAM,EAAxB,CAD8D,EAE9DZ,KAAK,CAACa,OAAN,CAAc,IAAID,MAAM,EAAxB,CAF8D,CAAvD,CAAT;MAID;IACF;;IAED,OAAOlB,MAAP;EACD;;EAEMoB,eAAe;IACpB,OAAO,IAAIC,GAAJ,CAAQ,KAAKnB,MAAL,CAAYoB,MAAZ,CAAmBpC,QAAnB,CAAR,CAAP;EACD;;EAEMqC,cAAc;IACnB,OAAO,IAAIF,GAAJ,CAAQ,KAAKlB,EAAb,CAAP;EACD;;EAEMP,IAAI;IACT,OAAO,YAAY,KAAKK,UAAU,IAAIL,IAAI,CAAC,KAAKM,MAAN,CAAa,IAAIN,IAAI,CAAC,KAAKO,EAAN,CAAS,EAAxE;EACD;;EAEMqB,QAAQ;IACb,OAAO;MACLC,IAAI,EAAE,UADD;MAELxB,UAAU,EAAE,KAAKA,UAFZ;MAGLC,MAAM,EAAE,KAAKA,MAHR;MAILC,EAAE,EAAE,KAAKA;IAJJ,CAAP;EAMD;;AAlE2C","names":["isString","LATITUDE","LATITUDE2","LONGITUDE","LONGITUDE2","getFieldOrDatumDef","isDatumDef","isFieldDef","isValueDef","duplicate","hash","DataFlowNode","GeoPointNode","constructor","parent","projection","fields","as","clone","parseAll","model","projectionName","coordinates","pair","map","channel","def","encoding","field","expr","datum","undefined","suffix","getName","dependentFields","Set","filter","producedFields","assemble","type"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/geopoint.ts"],"sourcesContent":["import {GeoPointTransform as VgGeoPointTransform, Vector2} from 'vega';\nimport {isString} from 'vega-util';\nimport {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2} from '../../channel';\nimport {getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef} from '../../channeldef';\nimport {duplicate, hash} from '../../util';\nimport {VgExprRef} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoPointNode extends DataFlowNode {\n  public clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private projection: string,\n    private fields: [string | VgExprRef, string | VgExprRef],\n    private as: [string, string]\n  ) {\n    super(parent);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    for (const coordinates of [\n      [LONGITUDE, LATITUDE],\n      [LONGITUDE2, LATITUDE2]\n    ] as Vector2<GeoPositionChannel>[]) {\n      const pair = coordinates.map(channel => {\n        const def = getFieldOrDatumDef(model.encoding[channel]);\n        return isFieldDef(def)\n          ? def.field\n          : isDatumDef(def)\n          ? {expr: `${def.datum}`}\n          : isValueDef(def)\n          ? {expr: `${def['value']}`}\n          : undefined;\n      }) as [GeoPositionChannel, GeoPositionChannel];\n\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [\n          model.getName(`x${suffix}`),\n          model.getName(`y${suffix}`)\n        ]);\n      }\n    }\n\n    return parent;\n  }\n\n  public dependentFields() {\n    return new Set(this.fields.filter(isString));\n  }\n\n  public producedFields() {\n    return new Set(this.as);\n  }\n\n  public hash() {\n    return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;\n  }\n\n  public assemble(): VgGeoPointTransform {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}