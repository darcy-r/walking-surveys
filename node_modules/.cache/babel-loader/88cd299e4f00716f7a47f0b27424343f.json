{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isArray, isString } from 'vega-util';\nimport { pick } from './util';\nexport function extractTitleConfig(titleConfig) {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    angle,\n    limit,\n    // color needs to be redirect to fill\n    color,\n    // subtitle properties\n    subtitleColor,\n    subtitleFont,\n    subtitleFontSize,\n    subtitleFontStyle,\n    subtitleFontWeight,\n    subtitleLineHeight,\n    subtitlePadding\n  } = titleConfig,\n        // The rest are mark config.\n  rest = __rest(titleConfig, [\"anchor\", \"frame\", \"offset\", \"orient\", \"angle\", \"limit\", \"color\", \"subtitleColor\", \"subtitleFont\", \"subtitleFontSize\", \"subtitleFontStyle\", \"subtitleFontWeight\", \"subtitleLineHeight\", \"subtitlePadding\"]);\n\n  const titleMarkConfig = Object.assign(Object.assign({}, rest), color ? {\n    fill: color\n  } : {}); // These are non-mark title config that need to be hardcoded\n\n  const nonMarkTitleProperties = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, anchor ? {\n    anchor\n  } : {}), frame ? {\n    frame\n  } : {}), offset ? {\n    offset\n  } : {}), orient ? {\n    orient\n  } : {}), angle !== undefined ? {\n    angle\n  } : {}), limit !== undefined ? {\n    limit\n  } : {}); // subtitle part can stay in config.title since header titles do not use subtitle\n\n  const subtitle = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, subtitleColor ? {\n    subtitleColor\n  } : {}), subtitleFont ? {\n    subtitleFont\n  } : {}), subtitleFontSize ? {\n    subtitleFontSize\n  } : {}), subtitleFontStyle ? {\n    subtitleFontStyle\n  } : {}), subtitleFontWeight ? {\n    subtitleFontWeight\n  } : {}), subtitleLineHeight ? {\n    subtitleLineHeight\n  } : {}), subtitlePadding ? {\n    subtitlePadding\n  } : {});\n  const subtitleMarkConfig = pick(titleConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);\n  return {\n    titleMarkConfig,\n    subtitleMarkConfig,\n    nonMarkTitleProperties,\n    subtitle\n  };\n}\nexport function isText(v) {\n  return isString(v) || isArray(v) && isString(v[0]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA,SAAQA,OAAR,EAAiBC,QAAjB,QAAgC,WAAhC;AAGA,SAAQC,IAAR,QAAmB,QAAnB;AA4DA,OAAM,SAAUC,kBAAV,CAA6BC,WAA7B,EAAgE;EAOpE,MAAM;IACJ;IACAC,MAFI;IAGJC,KAHI;IAIJC,MAJI;IAKJC,MALI;IAMJC,KANI;IAOJC,KAPI;IASJ;IACAC,KAVI;IAYJ;IACAC,aAbI;IAcJC,YAdI;IAeJC,gBAfI;IAgBJC,iBAhBI;IAiBJC,kBAjBI;IAkBJC,kBAlBI;IAmBJC;EAnBI,IAuBFd,WAvBJ;EAAA,MAqBE;EACGe,IAAI,UACLf,WADK,EAtBH,2MAsBG,CAtBT;;EAyBA,MAAMgB,eAAe,mCAChBD,IADgB,GAEfR,KAAK,GAAG;IAACU,IAAI,EAAEV;EAAP,CAAH,GAAmB,EAFT,CAArB,CAhCoE,CAqCpE;;EACA,MAAMW,sBAAsB,2FACtBjB,MAAM,GAAG;IAACA;EAAD,CAAH,GAAc,EADE,GAEtBC,KAAK,GAAG;IAACA;EAAD,CAAH,GAAa,EAFI,GAGtBC,MAAM,GAAG;IAACA;EAAD,CAAH,GAAc,EAHE,GAItBC,MAAM,GAAG;IAACA;EAAD,CAAH,GAAc,EAJE,GAKtBC,KAAK,KAAKc,SAAV,GAAsB;IAACd;EAAD,CAAtB,GAAgC,EALV,GAMtBC,KAAK,KAAKa,SAAV,GAAsB;IAACb;EAAD,CAAtB,GAAgC,EANV,CAA5B,CAtCoE,CA+CpE;;EACA,MAAMc,QAAQ,yGACRZ,aAAa,GAAG;IAACA;EAAD,CAAH,GAAqB,EAD1B,GAERC,YAAY,GAAG;IAACA;EAAD,CAAH,GAAoB,EAFxB,GAGRC,gBAAgB,GAAG;IAACA;EAAD,CAAH,GAAwB,EAHhC,GAIRC,iBAAiB,GAAG;IAACA;EAAD,CAAH,GAAyB,EAJlC,GAKRC,kBAAkB,GAAG;IAACA;EAAD,CAAH,GAA0B,EALpC,GAMRC,kBAAkB,GAAG;IAACA;EAAD,CAAH,GAA0B,EANpC,GAORC,eAAe,GAAG;IAACA;EAAD,CAAH,GAAuB,EAP9B,CAAd;EAUA,MAAMO,kBAAkB,GAAGvB,IAAI,CAACE,WAAD,EAAc,CAAC,OAAD,EAAU,UAAV,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,OAAlC,CAAd,CAA/B;EAEA,OAAO;IAACgB,eAAD;IAAkBK,kBAAlB;IAAsCH,sBAAtC;IAA8DE;EAA9D,CAAP;AACD;AAED,OAAM,SAAUE,MAAV,CAAiBC,CAAjB,EAAuB;EAC3B,OAAO1B,QAAQ,CAAC0B,CAAD,CAAR,IAAgB3B,OAAO,CAAC2B,CAAD,CAAP,IAAc1B,QAAQ,CAAC0B,CAAC,CAAC,CAAD,CAAF,CAA7C;AACD","names":["isArray","isString","pick","extractTitleConfig","titleConfig","anchor","frame","offset","orient","angle","limit","color","subtitleColor","subtitleFont","subtitleFontSize","subtitleFontStyle","subtitleFontWeight","subtitleLineHeight","subtitlePadding","rest","titleMarkConfig","fill","nonMarkTitleProperties","undefined","subtitle","subtitleMarkConfig","isText","v"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/title.ts"],"sourcesContent":["import {BaseTitle, SignalRef, Text, TextEncodeEntry, TitleAnchor} from 'vega';\nimport {isArray, isString} from 'vega-util';\nimport {ExprRef} from './expr';\nimport {MarkConfig} from './mark';\nimport {pick} from './util';\nimport {MapExcludeValueRefAndReplaceSignalWith, MappedExcludeValueRef} from './vega.schema';\n\nexport type BaseTitleNoValueRefs<ES extends ExprRef | SignalRef> = MapExcludeValueRefAndReplaceSignalWith<\n  Omit<BaseTitle, 'align' | 'baseline'>,\n  ES\n> &\n  // Since some logic depends on align/baseline, Vega-Lite does NOT allow signal for them.\n  MappedExcludeValueRef<Pick<BaseTitle, 'align' | 'baseline'>>;\n\nexport type TitleConfig<ES extends ExprRef | SignalRef> = BaseTitleNoValueRefs<ES>;\n\nexport interface TitleBase<ES extends ExprRef | SignalRef> extends BaseTitleNoValueRefs<ES> {\n  /**\n   * The anchor position for placing the title. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n   *\n   * __Default value:__ `\"middle\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n   * `\"start\"` for other composite views.\n   *\n   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, `anchor` is always `\"start\"`.\n   */\n  anchor?: TitleAnchor;\n\n  /**\n   * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\n   *\n   * __Default value:__ `\"group-title\"`.\n   */\n  style?: string | string[];\n\n  /**\n   * \tThe integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\n   *\n   * __Default value:__ `0`.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * Mark definitions for custom encoding.\n   *\n   * @hidden\n   */\n  encoding?: TextEncodeEntry;\n}\n\nexport interface TitleParams<ES extends ExprRef | SignalRef> extends TitleBase<ES> {\n  /**\n   * The title text.\n   */\n  text: Text | ES;\n\n  /**\n   * The subtitle Text.\n   */\n  subtitle?: Text;\n}\n\nexport function extractTitleConfig(titleConfig: TitleConfig<SignalRef>): {\n  titleMarkConfig: MarkConfig<SignalRef>;\n  subtitleMarkConfig: MarkConfig<SignalRef>;\n  /** These are non-mark title config that need to be hardcoded in the title directive. */\n  nonMarkTitleProperties: BaseTitleNoValueRefs<SignalRef>;\n  subtitle: BaseTitleNoValueRefs<SignalRef>;\n} {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    angle,\n    limit,\n\n    // color needs to be redirect to fill\n    color,\n\n    // subtitle properties\n    subtitleColor,\n    subtitleFont,\n    subtitleFontSize,\n    subtitleFontStyle,\n    subtitleFontWeight,\n    subtitleLineHeight,\n    subtitlePadding,\n\n    // The rest are mark config.\n    ...rest\n  } = titleConfig;\n\n  const titleMarkConfig: MarkConfig<SignalRef> = {\n    ...rest,\n    ...(color ? {fill: color} : {})\n  };\n\n  // These are non-mark title config that need to be hardcoded\n  const nonMarkTitleProperties: BaseTitleNoValueRefs<SignalRef> = {\n    ...(anchor ? {anchor} : {}),\n    ...(frame ? {frame} : {}),\n    ...(offset ? {offset} : {}),\n    ...(orient ? {orient} : {}),\n    ...(angle !== undefined ? {angle} : {}),\n    ...(limit !== undefined ? {limit} : {})\n  };\n\n  // subtitle part can stay in config.title since header titles do not use subtitle\n  const subtitle: BaseTitleNoValueRefs<SignalRef> = {\n    ...(subtitleColor ? {subtitleColor} : {}),\n    ...(subtitleFont ? {subtitleFont} : {}),\n    ...(subtitleFontSize ? {subtitleFontSize} : {}),\n    ...(subtitleFontStyle ? {subtitleFontStyle} : {}),\n    ...(subtitleFontWeight ? {subtitleFontWeight} : {}),\n    ...(subtitleLineHeight ? {subtitleLineHeight} : {}),\n    ...(subtitlePadding ? {subtitlePadding} : {})\n  };\n\n  const subtitleMarkConfig = pick(titleConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);\n\n  return {titleMarkConfig, subtitleMarkConfig, nonMarkTitleProperties, subtitle};\n}\n\nexport function isText(v: any): v is Text {\n  return isString(v) || (isArray(v) && isString(v[0]));\n}\n"]},"metadata":{},"sourceType":"module"}