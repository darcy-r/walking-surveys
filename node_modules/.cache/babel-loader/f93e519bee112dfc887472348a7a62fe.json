{"ast":null,"code":"import { AXIS_PARTS, isAxisProperty, isConditionalAxisValue } from '../../axis';\nimport { POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getFieldOrDatumDef } from '../../channeldef';\nimport { getFirstDefined, isEmpty, keys, normalizeAngle } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { mergeTitleComponent } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent, AXIS_COMPONENT_PROPERTIES } from './component';\nimport { getAxisConfig, getAxisConfigs } from './config';\nimport * as encode from './encode';\nimport { axisRules, defaultOrient, getFieldDefTitle, getLabelAngle } from './properties';\nexport function parseUnitAxes(model) {\n  return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n    if (model.component.scales[channel]) {\n      axis[channel] = [parseAxis(channel, model)];\n    }\n\n    return axis;\n  }, {});\n}\nconst OPPOSITE_ORIENT = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\nexport function parseLayerAxes(model) {\n  var _a;\n\n  const {\n    axes,\n    resolve\n  } = model.component;\n  const axisCount = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n\n  for (const child of model.children) {\n    child.parseAxesAndHeaders();\n\n    for (const channel of keys(child.component.axes)) {\n      resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n\n      if (resolve.axis[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n        if (!axes[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n          // Thus, mark axis as independent and remove the axis component.\n          resolve.axis[channel] = 'independent';\n          delete axes[channel];\n        }\n      }\n    }\n  } // Move axes to layer's axis component and merge shared axes\n\n\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    for (const child of model.children) {\n      if (!child.component.axes[channel]) {\n        // skip if the child does not have a particular axis\n        continue;\n      }\n\n      if (resolve.axis[channel] === 'independent') {\n        // If axes are independent, concat the axisComponent array.\n        axes[channel] = ((_a = axes[channel]) !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]); // Automatically adjust orient\n\n        for (const axisComponent of child.component.axes[channel]) {\n          const {\n            value: orient,\n            explicit\n          } = axisComponent.getWithExplicit('orient');\n\n          if (isSignalRef(orient)) {\n            continue;\n          }\n\n          if (axisCount[orient] > 0 && !explicit) {\n            // Change axis orient if the number do not match\n            const oppositeOrient = OPPOSITE_ORIENT[orient];\n\n            if (axisCount[orient] > axisCount[oppositeOrient]) {\n              axisComponent.set('orient', oppositeOrient, false);\n            }\n          }\n\n          axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n        }\n      } // After merging, make sure to remove axes from child\n\n\n      delete child.component.axes[channel];\n    } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n\n\n    if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n      for (const axisCmpt of axes[channel]) {\n        if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n          axisCmpt.implicit.grid = false;\n        }\n      }\n    }\n  }\n}\n\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n\n    const length = mergedAxisCmpts.length;\n\n    for (let i = 0; i < length; i++) {\n      const merged = mergedAxisCmpts[i];\n      const child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        const mergedOrient = merged.getWithExplicit('orient');\n        const childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(axisComponent => axisComponent.clone());\n  }\n\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged, child) {\n  for (const prop of AXIS_COMPONENT_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function\n    (v1, v2) => {\n      switch (prop) {\n        case 'title':\n          return mergeTitleComponent(v1, v2);\n\n        case 'gridScale':\n          return {\n            explicit: v1.explicit,\n            value: getFirstDefined(v1.value, v2.value)\n          };\n      }\n\n      return defaultTieBreaker(v1, v2, prop, 'axis');\n    });\n    merged.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n\n  return merged;\n}\n\nfunction isExplicit(value, property, axis, model, channel) {\n  if (property === 'disable') {\n    return axis !== undefined; // if axis is specified or null/false, then its enable/disable state is explicit\n  }\n\n  axis = axis || {};\n\n  switch (property) {\n    case 'titleAngle':\n    case 'labelAngle':\n      return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));\n\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n\n  } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n  return value === axis[property];\n}\n/**\n * Properties to always include values from config\n */\n\n\nconst propsToAlwaysIncludeConfig = new Set(['grid', 'translate', // the rest are not axis configs in Vega, but are in VL, so we need to set too.\n'format', 'formatType', 'orient', 'labelExpr', 'tickCount', 'position', 'tickMinStep']);\n\nfunction parseAxis(channel, model) {\n  var _a, _b, _c;\n\n  let axis = model.axis(channel);\n  const axisComponent = new AxisComponent();\n  const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);\n  const {\n    mark,\n    config\n  } = model;\n  const orient = (axis === null || axis === void 0 ? void 0 : axis.orient) || ((_a = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _a === void 0 ? void 0 : _a.orient) || ((_b = config.axis) === null || _b === void 0 ? void 0 : _b.orient) || defaultOrient(channel);\n  const scaleType = model.getScaleComponent(channel).get('type');\n  const axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);\n  const disable = axis !== undefined ? !axis : getAxisConfig('disable', config.style, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs).configValue;\n  axisComponent.set('disable', disable, axis !== undefined);\n\n  if (disable) {\n    return axisComponent;\n  }\n\n  axis = axis || {};\n  const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);\n  const ruleParams = {\n    fieldOrDatumDef,\n    axis,\n    channel,\n    model,\n    scaleType,\n    orient,\n    labelAngle,\n    mark,\n    config\n  }; // 1.2. Add properties\n\n  for (const property of AXIS_COMPONENT_PROPERTIES) {\n    const value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;\n    const hasValue = value !== undefined;\n    const explicit = isExplicit(value, property, axis, model, channel);\n\n    if (hasValue && explicit) {\n      axisComponent.set(property, value, explicit);\n    } else {\n      const {\n        configValue = undefined,\n        configFrom = undefined\n      } = isAxisProperty(property) && property !== 'values' ? getAxisConfig(property, config.style, axis.style, axisConfigs) : {};\n      const hasConfigValue = configValue !== undefined;\n\n      if (hasValue && !hasConfigValue) {\n        // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n        axisComponent.set(property, value, explicit);\n      } else if ( // Cases need implicit values\n      // 1. Axis config that aren't available in Vega\n      !(configFrom === 'vgAxisConfig') || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)\n      propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals\n      isConditionalAxisValue(configValue) || isSignalRef(configValue)) {\n        // If a config is specified and is conditional, copy conditional value from axis config\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  } // 2) Add guide encode definition groups\n\n\n  const axisEncoding = (_c = axis.encoding) !== null && _c !== void 0 ? _c : {};\n  const axisEncode = AXIS_PARTS.reduce((e, part) => {\n    var _a;\n\n    if (!axisComponent.hasAxisPart(part)) {\n      // No need to create encode for a disabled part.\n      return e;\n    }\n\n    const axisEncodingPart = guideEncodeEntry((_a = axisEncoding[part]) !== null && _a !== void 0 ? _a : {}, model);\n    const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n\n    if (value !== undefined && !isEmpty(value)) {\n      e[part] = {\n        update: value\n      };\n    }\n\n    return e;\n  }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.\n\n  if (!isEmpty(axisEncode)) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}","map":{"version":3,"mappings":"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","names":["AXIS_PARTS","isAxisProperty","isConditionalAxisValue","POSITION_SCALE_CHANNELS","getFieldOrDatumDef","getFirstDefined","isEmpty","keys","normalizeAngle","isSignalRef","mergeTitleComponent","guideEncodeEntry","parseGuideResolve","defaultTieBreaker","mergeValuesWithExplicit","AxisComponent","AXIS_COMPONENT_PROPERTIES","getAxisConfig","getAxisConfigs","encode","axisRules","defaultOrient","getFieldDefTitle","getLabelAngle","parseUnitAxes","model","reduce","axis","channel","component","scales","parseAxis","OPPOSITE_ORIENT","bottom","top","left","right","parseLayerAxes","axes","resolve","axisCount","child","children","parseAxesAndHeaders","mergeAxisComponents","_a","concat","axisComponent","value","orient","explicit","getWithExplicit","oppositeOrient","set","length","axisCmpt","get","grid","implicit","mergedAxisCmpts","childAxisCmpts","undefined","i","merged","mergedOrient","childOrient","mergeAxisComponent","map","clone","prop","mergedValueWithExplicit","v1","v2","setWithExplicit","isExplicit","property","labelAngle","values","encoding","propsToAlwaysIncludeConfig","Set","fieldOrDatumDef","mark","config","_b","scaleType","getScaleComponent","axisConfigs","disable","style","configValue","ruleParams","hasValue","configFrom","hasConfigValue","has","axisEncoding","_c","axisEncode","e","part","hasAxisPart","axisEncodingPart","labels","update"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/axis/parse.ts"],"sourcesContent":["import {AxisEncode as VgAxisEncode, AxisOrient, SignalRef} from 'vega';\nimport {Axis, AXIS_PARTS, isAxisProperty, isConditionalAxisValue} from '../../axis';\nimport {PositionScaleChannel, POSITION_SCALE_CHANNELS} from '../../channel';\nimport {getFieldOrDatumDef, PositionDatumDef, PositionFieldDef} from '../../channeldef';\nimport {getFirstDefined, isEmpty, keys, normalizeAngle} from '../../util';\nimport {isSignalRef} from '../../vega.schema';\nimport {mergeTitleComponent} from '../common';\nimport {guideEncodeEntry} from '../guide';\nimport {LayerModel} from '../layer';\nimport {parseGuideResolve} from '../resolve';\nimport {defaultTieBreaker, Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {AxisComponent, AxisComponentIndex, AxisComponentProps, AXIS_COMPONENT_PROPERTIES} from './component';\nimport {getAxisConfig, getAxisConfigs} from './config';\nimport * as encode from './encode';\nimport {AxisRuleParams, axisRules, defaultOrient, getFieldDefTitle, getLabelAngle} from './properties';\n\nexport function parseUnitAxes(model: UnitModel): AxisComponentIndex {\n  return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n    if (model.component.scales[channel]) {\n      axis[channel] = [parseAxis(channel, model)];\n    }\n    return axis;\n  }, {} as AxisComponentIndex);\n}\n\nconst OPPOSITE_ORIENT: Record<AxisOrient, AxisOrient> = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\n\nexport function parseLayerAxes(model: LayerModel) {\n  const {axes, resolve} = model.component;\n  const axisCount: Record<AxisOrient, number> = {top: 0, bottom: 0, right: 0, left: 0};\n\n  for (const child of model.children) {\n    child.parseAxesAndHeaders();\n\n    for (const channel of keys(child.component.axes)) {\n      resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n      if (resolve.axis[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n\n        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n        if (!axes[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n          // Thus, mark axis as independent and remove the axis component.\n          resolve.axis[channel] = 'independent';\n          delete axes[channel];\n        }\n      }\n    }\n  }\n\n  // Move axes to layer's axis component and merge shared axes\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    for (const child of model.children) {\n      if (!child.component.axes[channel]) {\n        // skip if the child does not have a particular axis\n        continue;\n      }\n\n      if (resolve.axis[channel] === 'independent') {\n        // If axes are independent, concat the axisComponent array.\n        axes[channel] = (axes[channel] ?? []).concat(child.component.axes[channel]);\n\n        // Automatically adjust orient\n        for (const axisComponent of child.component.axes[channel]) {\n          const {value: orient, explicit} = axisComponent.getWithExplicit('orient');\n          if (isSignalRef(orient)) {\n            continue;\n          }\n\n          if (axisCount[orient] > 0 && !explicit) {\n            // Change axis orient if the number do not match\n            const oppositeOrient = OPPOSITE_ORIENT[orient];\n            if (axisCount[orient] > axisCount[oppositeOrient]) {\n              axisComponent.set('orient', oppositeOrient, false);\n            }\n          }\n          axisCount[orient]++;\n\n          // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n        }\n      }\n\n      // After merging, make sure to remove axes from child\n      delete child.component.axes[channel];\n    }\n\n    // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n    if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n      for (const axisCmpt of axes[channel]) {\n        if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n          axisCmpt.implicit.grid = false;\n        }\n      }\n    }\n  }\n}\n\nfunction mergeAxisComponents(\n  mergedAxisCmpts: AxisComponent[],\n  childAxisCmpts: readonly AxisComponent[]\n): AxisComponent[] {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n    const length = mergedAxisCmpts.length;\n    for (let i = 0; i < length; i++) {\n      const merged = mergedAxisCmpts[i];\n      const child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        const mergedOrient = merged.getWithExplicit('orient');\n        const childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(axisComponent => axisComponent.clone());\n  }\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged: AxisComponent, child: AxisComponent): AxisComponent {\n  for (const prop of AXIS_COMPONENT_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit<AxisComponentProps, any>(\n      merged.getWithExplicit(prop),\n      child.getWithExplicit(prop),\n      prop,\n      'axis',\n\n      // Tie breaker function\n      (v1: Explicit<any>, v2: Explicit<any>) => {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n          case 'gridScale':\n            return {\n              explicit: v1.explicit, // keep the old explicit\n              value: getFirstDefined(v1.value, v2.value)\n            };\n        }\n        return defaultTieBreaker<AxisComponentProps, any>(v1, v2, prop, 'axis');\n      }\n    );\n    merged.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n  return merged;\n}\n\nfunction isExplicit<T extends string | number | boolean | unknown>(\n  value: T,\n  property: keyof AxisComponentProps,\n  axis: Axis<SignalRef>,\n  model: UnitModel,\n  channel: PositionScaleChannel\n) {\n  if (property === 'disable') {\n    return axis !== undefined; // if axis is specified or null/false, then its enable/disable state is explicit\n  }\n\n  axis = axis || {};\n\n  switch (property) {\n    case 'titleAngle':\n    case 'labelAngle':\n      return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n  }\n  // Otherwise, things are explicit if the returned value matches the specified property\n  return value === axis[property];\n}\n\n/**\n * Properties to always include values from config\n */\nconst propsToAlwaysIncludeConfig = new Set([\n  'grid', // Grid is an exception because we need to set grid = true to generate another grid axis\n  'translate', // translate has dependent logic for bar's bin position and it's 0.5 by default in Vega. If a config overrides this value, we need to know.\n  // the rest are not axis configs in Vega, but are in VL, so we need to set too.\n  'format',\n  'formatType',\n  'orient',\n  'labelExpr',\n  'tickCount',\n  'position',\n  'tickMinStep'\n]);\n\nfunction parseAxis(channel: PositionScaleChannel, model: UnitModel): AxisComponent {\n  let axis = model.axis(channel);\n\n  const axisComponent = new AxisComponent();\n\n  const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]) as\n    | PositionFieldDef<string>\n    | PositionDatumDef<string>;\n\n  const {mark, config} = model;\n\n  const orient =\n    axis?.orient ||\n    config[channel === 'x' ? 'axisX' : 'axisY']?.orient ||\n    config.axis?.orient ||\n    defaultOrient(channel);\n\n  const scaleType = model.getScaleComponent(channel).get('type');\n\n  const axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);\n\n  const disable =\n    axis !== undefined ? !axis : getAxisConfig('disable', config.style, axis?.style, axisConfigs).configValue;\n  axisComponent.set('disable', disable, axis !== undefined);\n  if (disable) {\n    return axisComponent;\n  }\n\n  axis = axis || {};\n\n  const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);\n\n  const ruleParams: AxisRuleParams = {\n    fieldOrDatumDef,\n    axis,\n    channel,\n    model,\n    scaleType,\n    orient,\n    labelAngle,\n    mark,\n    config\n  };\n  // 1.2. Add properties\n  for (const property of AXIS_COMPONENT_PROPERTIES) {\n    const value =\n      property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;\n\n    const hasValue = value !== undefined;\n\n    const explicit = isExplicit(value, property, axis, model, channel);\n\n    if (hasValue && explicit) {\n      axisComponent.set(property, value, explicit);\n    } else {\n      const {configValue = undefined, configFrom = undefined} =\n        isAxisProperty(property) && property !== 'values'\n          ? getAxisConfig(property, config.style, axis.style, axisConfigs)\n          : {};\n      const hasConfigValue = configValue !== undefined;\n\n      if (hasValue && !hasConfigValue) {\n        // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n        axisComponent.set(property, value, explicit);\n      } else if (\n        // Cases need implicit values\n        // 1. Axis config that aren't available in Vega\n        !(configFrom === 'vgAxisConfig') ||\n        // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)\n        (propsToAlwaysIncludeConfig.has(property) && hasConfigValue) ||\n        // 3. Conditional axis values and signals\n        isConditionalAxisValue(configValue) ||\n        isSignalRef(configValue)\n      ) {\n        // If a config is specified and is conditional, copy conditional value from axis config\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  }\n\n  // 2) Add guide encode definition groups\n  const axisEncoding = axis.encoding ?? {};\n  const axisEncode = AXIS_PARTS.reduce((e: VgAxisEncode, part) => {\n    if (!axisComponent.hasAxisPart(part)) {\n      // No need to create encode for a disabled part.\n      return e;\n    }\n\n    const axisEncodingPart = guideEncodeEntry(axisEncoding[part] ?? {}, model);\n\n    const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n\n    if (value !== undefined && !isEmpty(value)) {\n      e[part] = {update: value};\n    }\n    return e;\n  }, {} as VgAxisEncode);\n\n  // FIXME: By having encode as one property, we won't have fine grained encode merging.\n  if (!isEmpty(axisEncode)) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}\n"]},"metadata":{},"sourceType":"module"}