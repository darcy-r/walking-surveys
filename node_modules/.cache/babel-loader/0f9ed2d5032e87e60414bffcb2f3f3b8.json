{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\";\nimport React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime } from '@visx/scale'; // We'll use some mock data from `@visx/mock-data` for this.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  \"street_group_id\": 12,\n  \"time\": \"17:27:46\",\n  \"pph\": 1152.0,\n  \"temperature_apparent\": 11.6\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"17:33:36\",\n  \"pph\": 1188.0,\n  \"temperature_apparent\": 10.6\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"18:14:16\",\n  \"pph\": 1260.0,\n  \"temperature_apparent\": 10.4\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"18:19:58\",\n  \"pph\": 1884.0,\n  \"temperature_apparent\": 10.4\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"13:35:34\",\n  \"pph\": 1008.0,\n  \"temperature_apparent\": 12.2\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"14:03:34\",\n  \"pph\": 1236.0,\n  \"temperature_apparent\": 11.3\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"14:09:14\",\n  \"pph\": 2100.0,\n  \"temperature_apparent\": 11.3\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"16:47:24\",\n  \"pph\": 1056.0,\n  \"temperature_apparent\": 11.9\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"16:53:03\",\n  \"pph\": 1152.0,\n  \"temperature_apparent\": 11.9\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"13:29:51\",\n  \"pph\": 1956.0,\n  \"temperature_apparent\": 12.5\n}]; // Define the graph dimensions and margins\n\nconst width = 500;\nconst height = 500;\nconst margin = {\n  top: 20,\n  bottom: 20,\n  left: 20,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [0, yMax],\n  round: true,\n  domain: [0, Math.max(...data.map(y))]\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y); // Finally we'll embed it all in an SVG\n\nfunction ScatterPlot(props) {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: data.map((d, i) => {\n      const barHeight = yMax - yPoint(d);\n      return /*#__PURE__*/_jsxDEV(Group, {\n        children: /*#__PURE__*/_jsxDEV(Circle, {\n          cx: xPoint(d),\n          cy: yPoint(d) // {yMax - barHeight}\n          ,\n          r: 3,\n          fill: \"#fc2e1c\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, `bar-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","letterFrequency","Group","Circle","scaleLinear","scaleTime","data","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","xScale","range","round","domain","Math","min","map","max","padding","yScale","compose","scale","accessor","xPoint","yPoint","ScatterPlot","props","i","barHeight"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { letterFrequency } from '@visx/mock-data';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime } from '@visx/scale';\n\n// We'll use some mock data from `@visx/mock-data` for this.\nconst data = [\n  {\"street_group_id\": 12, \"time\": \"17:27:46\", \"pph\": 1152.0, \"temperature_apparent\": 11.6},\n  {\"street_group_id\": 12, \"time\": \"17:33:36\", \"pph\": 1188.0, \"temperature_apparent\": 10.6},\n  {\"street_group_id\": 12, \"time\": \"18:14:16\", \"pph\": 1260.0, \"temperature_apparent\": 10.4},\n  {\"street_group_id\": 12, \"time\": \"18:19:58\", \"pph\": 1884.0, \"temperature_apparent\": 10.4},\n  {\"street_group_id\": 12, \"time\": \"13:35:34\", \"pph\": 1008.0, \"temperature_apparent\": 12.2},\n  {\"street_group_id\": 12, \"time\": \"14:03:34\", \"pph\": 1236.0, \"temperature_apparent\": 11.3},\n  {\"street_group_id\": 12, \"time\": \"14:09:14\", \"pph\": 2100.0, \"temperature_apparent\": 11.3},\n  {\"street_group_id\": 12, \"time\": \"16:47:24\", \"pph\": 1056.0, \"temperature_apparent\": 11.9},\n  {\"street_group_id\": 12, \"time\": \"16:53:03\", \"pph\": 1152.0, \"temperature_apparent\": 11.9},\n  {\"street_group_id\": 12, \"time\": \"13:29:51\", \"pph\": 1956.0, \"temperature_apparent\": 12.5}\n];\n\n// Define the graph dimensions and margins\nconst width = 500;\nconst height = 500;\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [0, yMax],\n  round: true,\n  domain: [0, Math.max(...data.map(y))],\n});\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  return (\n    <svg width={width} height={height}>\n      {data.map((d, i) => {\n        const barHeight = yMax - yPoint(d);\n        return (\n          <Group key={`bar-${i}`}>\n            <Circle\n              cx={xPoint(d)}\n              cy={yPoint(d)} // {yMax - barHeight}\n              r={3}\n              fill=\"#fc2e1c\"\n            />\n          </Group>\n        );\n      })}\n    </svg>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}