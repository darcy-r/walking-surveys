{"ast":null,"code":"import { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { BOXPLOT, BOXPLOT_PARTS, normalizeBoxPlot } from './boxplot';\nimport { ERRORBAND, ERRORBAND_PARTS, normalizeErrorBand } from './errorband';\nimport { ERRORBAR, ERRORBAR_PARTS, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\n\nconst compositeMarkRegistry = {};\nexport function add(mark, run, parts) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {\n    normalizer,\n    parts\n  };\n}\nexport function remove(mark) {\n  delete compositeMarkRegistry[mark];\n}\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);","map":{"version":3,"mappings":"AAMA,SAAQA,IAAR,QAAmB,SAAnB;AACA,SAAQC,uBAAR,QAAsC,QAAtC;AACA,SAAQC,OAAR,EAA2DC,aAA3D,EAA0EC,gBAA1E,QAAiG,WAAjG;AACA,SACEC,SADF,EAKEC,eALF,EAMEC,kBANF,QAOO,aAPP;AAQA,SACEC,QADF,EAKEC,cALF,EAOEC,iBAPF,QAQO,YARP;AAmBA;;;;AAGA,MAAMC,qBAAqB,GAKvB,EALJ;AAOA,OAAM,SAAUC,GAAV,CAAcC,IAAd,EAA4BC,GAA5B,EAA6DC,KAA7D,EAAqF;EACzF,MAAMC,UAAU,GAAG,IAAIf,uBAAJ,CAA4BY,IAA5B,EAAkCC,GAAlC,CAAnB;EACAH,qBAAqB,CAACE,IAAD,CAArB,GAA8B;IAACG,UAAD;IAAaD;EAAb,CAA9B;AACD;AAED,OAAM,SAAUE,MAAV,CAAiBJ,IAAjB,EAA6B;EACjC,OAAOF,qBAAqB,CAACE,IAAD,CAA5B;AACD;AAiBD,OAAM,SAAUK,oBAAV,GAA8B;EAClC,OAAOlB,IAAI,CAACW,qBAAD,CAAX;AACD;AAQDC,GAAG,CAACV,OAAD,EAAUE,gBAAV,EAA4BD,aAA5B,CAAH;AACAS,GAAG,CAACJ,QAAD,EAAWE,iBAAX,EAA8BD,cAA9B,CAAH;AACAG,GAAG,CAACP,SAAD,EAAYE,kBAAZ,EAAgCD,eAAhC,CAAH","names":["keys","CompositeMarkNormalizer","BOXPLOT","BOXPLOT_PARTS","normalizeBoxPlot","ERRORBAND","ERRORBAND_PARTS","normalizeErrorBand","ERRORBAR","ERRORBAR_PARTS","normalizeErrorBar","compositeMarkRegistry","add","mark","run","parts","normalizer","remove","getAllCompositeMarks"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compositemark/index.ts"],"sourcesContent":["import {Field} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {EncodingFacetMapping} from '../spec/facet';\nimport {NormalizedUnitSpec} from '../spec/unit';\nimport {keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {BOXPLOT, BoxPlot, BoxPlotConfigMixins, BoxPlotDef, BOXPLOT_PARTS, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  ERRORBAND_PARTS,\n  normalizeErrorBand\n} from './errorband';\nimport {\n  ERRORBAR,\n  ErrorBar,\n  ErrorBarConfigMixins,\n  ErrorBarDef,\n  ERRORBAR_PARTS,\n  ErrorExtraEncoding,\n  normalizeErrorBar\n} from './errorbar';\n\nexport {BoxPlotConfig} from './boxplot';\nexport {ErrorBandConfigMixins} from './errorband';\nexport {ErrorBarConfigMixins} from './errorbar';\n\nexport type CompositeMarkNormalizerRun = (\n  spec: GenericUnitSpec<any, any>,\n  params: NormalizerParams\n) => NormalizedLayerSpec | NormalizedUnitSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: CompositeMarkNormalizer<any>;\n    parts: readonly string[];\n  };\n} = {};\n\nexport function add(mark: string, run: CompositeMarkNormalizerRun, parts: readonly string[]) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeEncoding<F extends Field> = Encoding<F> & ErrorExtraEncoding<F>;\n\nexport type PartialIndex<T extends Encoding<any>> = {\n  [t in keyof T]?: Partial<T[t]>;\n};\n\nexport type SharedCompositeEncoding<F extends Field> = PartialIndex<\n  Omit<CompositeEncoding<F>, 'detail' | 'order' | 'tooltip'> // need to omit and cherry pick detail / order / tooltip since they allow array\n> &\n  Pick<Encoding<F>, 'detail' | 'order' | 'tooltip'>;\n\nexport type FacetedCompositeEncoding<F extends Field> = Encoding<F> & ErrorExtraEncoding<F> & EncodingFacetMapping<F>;\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n"]},"metadata":{},"sourceType":"module"}