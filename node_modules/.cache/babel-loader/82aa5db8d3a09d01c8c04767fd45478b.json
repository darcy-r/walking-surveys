{"ast":null,"code":"import * as encode from './encode';\n\nfunction encodeEntry(model, fixedShape) {\n  const {\n    config\n  } = model;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {\n    align: 'ignore',\n    baseline: 'ignore',\n    color: 'include',\n    size: 'include',\n    orient: 'ignore',\n    theta: 'ignore'\n  })), encode.pointPosition('x', model, {\n    defaultPos: 'mid'\n  })), encode.pointPosition('y', model, {\n    defaultPos: 'mid'\n  })), encode.nonPosition('size', model)), encode.nonPosition('angle', model)), shapeMixins(model, config, fixedShape));\n}\n\nexport function shapeMixins(model, config, fixedShape) {\n  if (fixedShape) {\n    return {\n      shape: {\n        value: fixedShape\n      }\n    };\n  }\n\n  return encode.nonPosition('shape', model);\n}\nexport const point = {\n  vgMark: 'symbol',\n  encodeEntry: model => {\n    return encodeEntry(model);\n  }\n};\nexport const circle = {\n  vgMark: 'symbol',\n  encodeEntry: model => {\n    return encodeEntry(model, 'circle');\n  }\n};\nexport const square = {\n  vgMark: 'symbol',\n  encodeEntry: model => {\n    return encodeEntry(model, 'square');\n  }\n};","map":{"version":3,"mappings":"AAIA,OAAO,KAAKA,MAAZ,MAAwB,UAAxB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAAuCC,UAAvC,EAAuE;EACrE,MAAM;IAACC;EAAD,IAAWF,KAAjB;EAEA,+FACKF,MAAM,CAACK,eAAP,CAAuBH,KAAvB,EAA8B;IAC/BI,KAAK,EAAE,QADwB;IAE/BC,QAAQ,EAAE,QAFqB;IAG/BC,KAAK,EAAE,SAHwB;IAI/BC,IAAI,EAAE,SAJyB;IAK/BC,MAAM,EAAE,QALuB;IAM/BC,KAAK,EAAE;EANwB,CAA9B,CADL,GASKX,MAAM,CAACY,aAAP,CAAqB,GAArB,EAA0BV,KAA1B,EAAiC;IAACW,UAAU,EAAE;EAAb,CAAjC,CATL,GAUKb,MAAM,CAACY,aAAP,CAAqB,GAArB,EAA0BV,KAA1B,EAAiC;IAACW,UAAU,EAAE;EAAb,CAAjC,CAVL,GAWKb,MAAM,CAACc,WAAP,CAAmB,MAAnB,EAA2BZ,KAA3B,CAXL,GAYKF,MAAM,CAACc,WAAP,CAAmB,OAAnB,EAA4BZ,KAA5B,CAZL,GAaKa,WAAW,CAACb,KAAD,EAAQE,MAAR,EAAgBD,UAAhB,CAbhB;AAeD;;AAED,OAAM,SAAUY,WAAV,CAAsBb,KAAtB,EAAwCE,MAAxC,EAAwDD,UAAxD,EAAwF;EAC5F,IAAIA,UAAJ,EAAgB;IACd,OAAO;MAACa,KAAK,EAAE;QAACC,KAAK,EAAEd;MAAR;IAAR,CAAP;EACD;;EACD,OAAOH,MAAM,CAACc,WAAP,CAAmB,OAAnB,EAA4BZ,KAA5B,CAAP;AACD;AAED,OAAO,MAAMgB,KAAK,GAAiB;EACjCC,MAAM,EAAE,QADyB;EAEjClB,WAAW,EAAGC,KAAD,IAAqB;IAChC,OAAOD,WAAW,CAACC,KAAD,CAAlB;EACD;AAJgC,CAA5B;AAOP,OAAO,MAAMkB,MAAM,GAAiB;EAClCD,MAAM,EAAE,QAD0B;EAElClB,WAAW,EAAGC,KAAD,IAAqB;IAChC,OAAOD,WAAW,CAACC,KAAD,EAAQ,QAAR,CAAlB;EACD;AAJiC,CAA7B;AAOP,OAAO,MAAMmB,MAAM,GAAiB;EAClCF,MAAM,EAAE,QAD0B;EAElClB,WAAW,EAAGC,KAAD,IAAqB;IAChC,OAAOD,WAAW,CAACC,KAAD,EAAQ,QAAR,CAAlB;EACD;AAJiC,CAA7B","names":["encode","encodeEntry","model","fixedShape","config","baseEncodeEntry","align","baseline","color","size","orient","theta","pointPosition","defaultPos","nonPosition","shapeMixins","shape","value","point","vgMark","circle","square"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/point.ts"],"sourcesContent":["import {Config} from '../../config';\nimport {VgEncodeEntry} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nfunction encodeEntry(model: UnitModel, fixedShape?: 'circle' | 'square') {\n  const {config} = model;\n\n  return {\n    ...encode.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      size: 'include',\n      orient: 'ignore',\n      theta: 'ignore'\n    }),\n    ...encode.pointPosition('x', model, {defaultPos: 'mid'}),\n    ...encode.pointPosition('y', model, {defaultPos: 'mid'}),\n    ...encode.nonPosition('size', model),\n    ...encode.nonPosition('angle', model),\n    ...shapeMixins(model, config, fixedShape)\n  };\n}\n\nexport function shapeMixins(model: UnitModel, config: Config, fixedShape?: 'circle' | 'square'): VgEncodeEntry {\n  if (fixedShape) {\n    return {shape: {value: fixedShape}};\n  }\n  return encode.nonPosition('shape', model);\n}\n\nexport const point: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model);\n  }\n};\n\nexport const circle: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model, 'circle');\n  }\n};\n\nexport const square: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model, 'square');\n  }\n};\n"]},"metadata":{},"sourceType":"module"}