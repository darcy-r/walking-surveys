{"ast":null,"code":"import * as log from '../../../log';\nimport { contains } from '../../../util';\nimport { getMarkPropOrConfig, signalOrValueRef } from '../../common';\nimport { nonPosition } from './nonposition';\nexport function color(model) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    filled: undefined\n  };\n\n  var _a, _b, _c, _d;\n\n  const {\n    markDef,\n    encoding,\n    config\n  } = model;\n  const {\n    type: markType\n  } = markDef; // Allow filled to be overridden (for trail's \"filled\")\n\n  const filled = (_a = opt.filled) !== null && _a !== void 0 ? _a : getMarkPropOrConfig('filled', markDef, config);\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n  const defaultFill = (_c = (_b = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {\n    vgChannel: 'fill'\n  })) !== null && _b !== void 0 ? _b : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n  config.mark[filled === true && 'color']) !== null && _c !== void 0 ? _c : // If there is no fill, always fill symbols, bar, geoshape\n  // with transparent fills https://github.com/vega/vega-lite/issues/1316\n  transparentIfNeeded;\n  const defaultStroke = (_d = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {\n    vgChannel: 'stroke'\n  })) !== null && _d !== void 0 ? _d : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n  config.mark[filled === false && 'color'];\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n  const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, defaultFill ? {\n    fill: signalOrValueRef(defaultFill)\n  } : {}), defaultStroke ? {\n    stroke: signalOrValueRef(defaultStroke)\n  } : {});\n\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {\n      fill: 'fill' in markDef,\n      stroke: 'stroke' in markDef\n    }));\n  }\n\n  return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {\n    vgChannel: colorVgChannel,\n    defaultValue: filled ? defaultFill : defaultStroke\n  })), nonPosition('fill', model, {\n    // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n    defaultValue: encoding.fill ? defaultFill : undefined\n  })), nonPosition('stroke', model, {\n    // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n    defaultValue: encoding.stroke ? defaultStroke : undefined\n  }));\n}","map":{"version":3,"mappings":"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","names":["log","contains","getMarkPropOrConfig","signalOrValueRef","nonPosition","color","model","opt","filled","undefined","markDef","encoding","config","type","markType","_a","transparentIfNeeded","defaultFill","vgChannel","_b","mark","_c","defaultStroke","_d","colorVgChannel","fillStrokeMarkDefAndConfig","fill","stroke","warn","message","droppingColor","defaultValue"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/encode/color.ts"],"sourcesContent":["import * as log from '../../../log';\nimport {contains} from '../../../util';\nimport {VgEncodeEntry} from '../../../vega.schema';\nimport {getMarkPropOrConfig, signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {nonPosition} from './nonposition';\n\nexport function color(model: UnitModel, opt: {filled: boolean | undefined} = {filled: undefined}): VgEncodeEntry {\n  const {markDef, encoding, config} = model;\n  const {type: markType} = markDef;\n\n  // Allow filled to be overridden (for trail's \"filled\")\n  const filled = opt.filled ?? getMarkPropOrConfig('filled', markDef, config);\n\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n    ? 'transparent'\n    : undefined;\n\n  const defaultFill =\n    getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {vgChannel: 'fill'}) ??\n    // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    config.mark[filled === true && 'color'] ??\n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded;\n\n  const defaultStroke =\n    getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {vgChannel: 'stroke'}) ??\n    // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    config.mark[filled === false && 'color'];\n\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n\n  const fillStrokeMarkDefAndConfig: VgEncodeEntry = {\n    ...(defaultFill ? {fill: signalOrValueRef(defaultFill)} : {}),\n    ...(defaultStroke ? {stroke: signalOrValueRef(defaultStroke)} : {})\n  };\n\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {fill: 'fill' in markDef, stroke: 'stroke' in markDef}));\n  }\n\n  return {\n    ...fillStrokeMarkDefAndConfig,\n    ...nonPosition('color', model, {\n      vgChannel: colorVgChannel,\n      defaultValue: filled ? defaultFill : defaultStroke\n    }),\n    ...nonPosition('fill', model, {\n      // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n      defaultValue: encoding.fill ? defaultFill : undefined\n    }),\n    ...nonPosition('stroke', model, {\n      // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n      defaultValue: encoding.stroke ? defaultStroke : undefined\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}