{"ast":null,"code":"import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\n\nexport class PivotTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new PivotTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    var _a;\n\n    this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);\n  }\n\n  producedFields() {\n    return undefined; // return undefined so that potentially everything can depend on the pivot\n  }\n\n  dependentFields() {\n    var _a;\n\n    return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);\n  }\n\n  hash() {\n    return `PivotTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      pivot,\n      value,\n      groupby,\n      limit,\n      op\n    } = this.transform;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'pivot',\n      field: pivot,\n      value\n    }, limit !== undefined ? {\n      limit\n    } : {}), op !== undefined ? {\n      op\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAsC,YAAtC;AAEA,SAAQC,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAOC,kBAAP,SAAkCD,YAAlC,CAA8C;EAKlDE,YAAYC,MAAZ,EAA0CC,SAA1C,EAAmE;IACjE,MAAMD,MAAN;IADwC;EAEzC;;EANME,KAAK;IACV,OAAO,IAAIJ,kBAAJ,CAAuB,IAAvB,EAA6BJ,SAAS,CAAC,KAAKO,SAAN,CAAtC,CAAP;EACD;;EAMME,aAAa,CAACC,MAAD,EAA0B;;;IAC5C,KAAKH,SAAL,CAAeI,OAAf,GAAyBT,MAAM,CAAC,CAAC,WAAKK,SAAL,CAAeI,OAAf,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0B,EAA3B,EAA+BC,MAA/B,CAAsCH,MAAtC,CAAD,EAAgDI,CAAC,IAAIA,CAArD,CAA/B;EACD;;EAEMC,cAAc;IACnB,OAAOC,SAAP,CADmB,CACD;EACnB;;EAEMC,eAAe;;;IACpB,OAAO,IAAIC,GAAJ,CAAQ,CAAC,KAAKX,SAAL,CAAeY,KAAhB,EAAuB,KAAKZ,SAAL,CAAea,KAAtC,EAA6C,IAAI,WAAKb,SAAL,CAAeI,OAAf,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0B,EAA9B,CAA7C,CAAR,CAAP;EACD;;EAEMX,IAAI;IACT,OAAO,kBAAkBA,IAAI,CAAC,KAAKM,SAAN,CAAgB,EAA7C;EACD;;EAEMc,QAAQ;IACb,MAAM;MAACF,KAAD;MAAQC,KAAR;MAAeT,OAAf;MAAwBW,KAAxB;MAA+BC;IAA/B,IAAqC,KAAKhB,SAAhD;IACA;MACEiB,IAAI,EAAE,OADR;MAEEC,KAAK,EAAEN,KAFT;MAGEC;IAHF,GAIME,KAAK,KAAKN,SAAV,GAAsB;MAACM;IAAD,CAAtB,GAAgC,EAJtC,GAKMC,EAAE,KAAKP,SAAP,GAAmB;MAACO;IAAD,CAAnB,GAA0B,EALhC,GAMMZ,OAAO,KAAKK,SAAZ,GAAwB;MAACL;IAAD,CAAxB,GAAoC,EAN1C;EAQD;;AAnCiD","names":["duplicate","hash","unique","DataFlowNode","PivotTransformNode","constructor","parent","transform","clone","addDimensions","fields","groupby","_a","concat","d","producedFields","undefined","dependentFields","Set","pivot","value","assemble","limit","op","type","field"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/pivot.ts"],"sourcesContent":["import {PivotTransform} from '../../transform';\nimport {duplicate, hash, unique} from '../../util';\nimport {PivotTransform as VgPivotTransform} from 'vega';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n  public clone() {\n    return new PivotTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: PivotTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: readonly string[]) {\n    this.transform.groupby = unique((this.transform.groupby ?? []).concat(fields), d => d);\n  }\n\n  public producedFields(): undefined {\n    return undefined; // return undefined so that potentially everything can depend on the pivot\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.pivot, this.transform.value, ...(this.transform.groupby ?? [])]);\n  }\n\n  public hash() {\n    return `PivotTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgPivotTransform {\n    const {pivot, value, groupby, limit, op} = this.transform;\n    return {\n      type: 'pivot',\n      field: pivot,\n      value,\n      ...(limit !== undefined ? {limit} : {}),\n      ...(op !== undefined ? {op} : {}),\n      ...(groupby !== undefined ? {groupby} : {})\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}