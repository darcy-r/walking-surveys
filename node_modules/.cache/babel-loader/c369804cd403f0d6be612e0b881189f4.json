{"ast":null,"code":"import { contains, getFirstDefined } from '../../util';\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\n\nexport function getHeaderChannel(channel, orient) {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n\n  return channel === 'row' ? 'row' : 'column';\n}\nexport function getHeaderProperty(prop, header, config, channel) {\n  const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\n}\nexport function getHeaderProperties(properties, header, config, channel) {\n  const props = {};\n\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, header || {}, config, channel);\n\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n\n  return props;\n}","map":{"version":3,"mappings":"AAIA,SAAQA,QAAR,EAAkBC,eAAlB,QAAwC,YAAxC;AAGA;;;;AAGA,OAAM,SAAUC,gBAAV,CAA2BC,OAA3B,EAAkDC,MAAlD,EAAgE;EACpE,IAAIJ,QAAQ,CAAC,CAAC,KAAD,EAAQ,QAAR,CAAD,EAAoBI,MAApB,CAAZ,EAAyC;IACvC,OAAO,QAAP;EACD,CAFD,MAEO,IAAIJ,QAAQ,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,EAAoBI,MAApB,CAAZ,EAAyC;IAC9C,OAAO,KAAP;EACD;;EACD,OAAOD,OAAO,KAAK,KAAZ,GAAoB,KAApB,GAA4B,QAAnC;AACD;AAED,OAAM,SAAUE,iBAAV,CACJC,IADI,EAEJC,MAFI,EAGJC,MAHI,EAIJL,OAJI,EAIiB;EAErB,MAAMM,oBAAoB,GACxBN,OAAO,KAAK,KAAZ,GAAoBK,MAAM,CAACE,SAA3B,GAAuCP,OAAO,KAAK,QAAZ,GAAuBK,MAAM,CAACG,YAA9B,GAA6CH,MAAM,CAACI,WAD7F;EAGA,OAAOX,eAAe,CAAC,CAACM,MAAM,IAAI,EAAX,EAAeD,IAAf,CAAD,EAAuBG,oBAAoB,CAACH,IAAD,CAA3C,EAAmDE,MAAM,CAACD,MAAP,CAAcD,IAAd,CAAnD,CAAtB;AACD;AAED,OAAM,SAAUO,mBAAV,CACJC,UADI,EAEJP,MAFI,EAGJC,MAHI,EAIJL,OAJI,EAIiB;EAErB,MAAMY,KAAK,GAAG,EAAd;;EACA,KAAK,MAAMT,IAAX,IAAmBQ,UAAnB,EAA+B;IAC7B,MAAME,KAAK,GAAGX,iBAAiB,CAACC,IAAD,EAAOC,MAAM,IAAI,EAAjB,EAAqBC,MAArB,EAA6BL,OAA7B,CAA/B;;IACA,IAAIa,KAAK,KAAKC,SAAd,EAAyB;MACvBF,KAAK,CAACT,IAAD,CAAL,GAAcU,KAAd;IACD;EACF;;EACD,OAAOD,KAAP;AACD","names":["contains","getFirstDefined","getHeaderChannel","channel","orient","getHeaderProperty","prop","header","config","headerSpecificConfig","headerRow","headerColumn","headerFacet","getHeaderProperties","properties","props","value","undefined"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/header/common.ts"],"sourcesContent":["import {Orient, SignalRef} from 'vega';\nimport {FacetChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {Header} from '../../header';\nimport {contains, getFirstDefined} from '../../util';\nimport {HeaderChannel} from './component';\n\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel: FacetChannel, orient: Orient): HeaderChannel {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n  return channel === 'row' ? 'row' : 'column';\n}\n\nexport function getHeaderProperty<P extends keyof Header<SignalRef>>(\n  prop: P,\n  header: Header<SignalRef>,\n  config: Config<SignalRef>,\n  channel: FacetChannel\n): Header<SignalRef>[P] {\n  const headerSpecificConfig =\n    channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n\n  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\n}\n\nexport function getHeaderProperties(\n  properties: (keyof Header<SignalRef>)[],\n  header: Header<SignalRef>,\n  config: Config<SignalRef>,\n  channel: FacetChannel\n): Header<SignalRef> {\n  const props = {};\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, header || {}, config, channel);\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n  return props;\n}\n"]},"metadata":{},"sourceType":"module"}