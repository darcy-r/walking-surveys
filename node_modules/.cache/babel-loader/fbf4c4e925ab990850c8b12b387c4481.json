{"ast":null,"code":"import { getMarkPropOrConfig, signalOrValueRef } from '../../common';\nimport { wrapCondition } from './conditional';\nimport * as ref from './valueref';\n/**\n * Return encode for non-positional channels with scales. (Text doesn't have scale.)\n */\n\nexport function nonPosition(channel, model) {\n  let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    markDef,\n    encoding,\n    config\n  } = model;\n  const {\n    vgChannel\n  } = opt;\n  let {\n    defaultRef,\n    defaultValue\n  } = opt;\n\n  if (defaultRef === undefined) {\n    // prettier-ignore\n    defaultValue !== null && defaultValue !== void 0 ? defaultValue : defaultValue = getMarkPropOrConfig(channel, markDef, config, {\n      vgChannel,\n      ignoreVgConfig: true\n    });\n\n    if (defaultValue !== undefined) {\n      defaultRef = signalOrValueRef(defaultValue);\n    }\n  }\n\n  const channelDef = encoding[channel];\n  return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, cDef => {\n    return ref.midPoint({\n      channel,\n      channelDef: cDef,\n      markDef,\n      config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef\n    });\n  });\n}","map":{"version":3,"mappings":"AAIA,SAAQA,mBAAR,EAA6BC,gBAA7B,QAAoD,cAApD;AAEA,SAAQC,aAAR,QAA4B,eAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AAEA;;;;AAGA,OAAM,SAAUC,WAAV,CACJC,OADI,EAEJC,KAFI,EAOE;EAAA,IAJNC,GAIM,uEAAF,EAAE;EAEN,MAAM;IAACC,OAAD;IAAUC,QAAV;IAAoBC;EAApB,IAA8BJ,KAApC;EACA,MAAM;IAACK;EAAD,IAAcJ,GAApB;EACA,IAAI;IAACK,UAAD;IAAaC;EAAb,IAA6BN,GAAjC;;EAEA,IAAIK,UAAU,KAAKE,SAAnB,EAA8B;IAC5B;IACAD,YAAY,SAAZ,gBAAY,WAAZ,8BAAY,GAAKb,mBAAmB,CAACK,OAAD,EAAUG,OAAV,EAAmBE,MAAnB,EAA2B;MAACC,SAAD;MAAYI,cAAc,EAAE;IAA5B,CAA3B,CAApC;;IAEA,IAAIF,YAAY,KAAKC,SAArB,EAAgC;MAC9BF,UAAU,GAAGX,gBAAgB,CAACY,YAAD,CAA7B;IACD;EACF;;EAED,MAAMG,UAAU,GAAGP,QAAQ,CAACJ,OAAD,CAA3B;EAEA,OAAOH,aAAa,CAACI,KAAD,EAAQU,UAAR,EAAoBL,SAAS,SAAT,aAAS,WAAT,eAAaN,OAAjC,EAA0CY,IAAI,IAAG;IACnE,OAAOd,GAAG,CAACe,QAAJ,CAAa;MAClBb,OADkB;MAElBW,UAAU,EAAEC,IAFM;MAGlBT,OAHkB;MAIlBE,MAJkB;MAKlBS,SAAS,EAAEb,KAAK,CAACa,SAAN,CAAgBd,OAAhB,CALO;MAMlBe,KAAK,EAAEd,KAAK,CAACe,iBAAN,CAAwBhB,OAAxB,CANW;MAOlBiB,KAAK,EAAE,IAPW;MAQlBV;IARkB,CAAb,CAAP;EAUD,CAXmB,CAApB;AAYD","names":["getMarkPropOrConfig","signalOrValueRef","wrapCondition","ref","nonPosition","channel","model","opt","markDef","encoding","config","vgChannel","defaultRef","defaultValue","undefined","ignoreVgConfig","channelDef","cDef","midPoint","scaleName","scale","getScaleComponent","stack"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/encode/nonposition.ts"],"sourcesContent":["import {SignalRef} from 'vega';\nimport {NonPositionScaleChannel} from '../../../channel';\nimport {Value} from '../../../channeldef';\nimport {VgEncodeChannel, VgEncodeEntry, VgValueRef} from '../../../vega.schema';\nimport {getMarkPropOrConfig, signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {wrapCondition} from './conditional';\nimport * as ref from './valueref';\n\n/**\n * Return encode for non-positional channels with scales. (Text doesn't have scale.)\n */\nexport function nonPosition(\n  channel: NonPositionScaleChannel,\n  model: UnitModel,\n  opt: {\n    defaultValue?: Value | SignalRef;\n    vgChannel?: VgEncodeChannel;\n    defaultRef?: VgValueRef;\n  } = {}\n): VgEncodeEntry {\n  const {markDef, encoding, config} = model;\n  const {vgChannel} = opt;\n  let {defaultRef, defaultValue} = opt;\n\n  if (defaultRef === undefined) {\n    // prettier-ignore\n    defaultValue ??= getMarkPropOrConfig(channel, markDef, config, {vgChannel, ignoreVgConfig: true});\n\n    if (defaultValue !== undefined) {\n      defaultRef = signalOrValueRef(defaultValue);\n    }\n  }\n\n  const channelDef = encoding[channel];\n\n  return wrapCondition(model, channelDef, vgChannel ?? channel, cDef => {\n    return ref.midPoint({\n      channel,\n      channelDef: cDef,\n      markDef,\n      config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null, // No need to provide stack for non-position as it does not affect mid point\n      defaultRef\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}