{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport class FlattenTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const {\n      flatten,\n      as = []\n    } = this.transform;\n    this.transform.as = flatten.map((f, i) => {\n      var _a;\n\n      return (_a = as[i]) !== null && _a !== void 0 ? _a : f;\n    });\n  }\n\n  clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    return new Set(this.transform.flatten);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      flatten: fields,\n      as\n    } = this.transform;\n    const result = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAAQA,SAAR,EAAmBC,IAAnB,QAA8B,YAA9B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAOC,oBAAP,SAAoCD,YAApC,CAAgD;EAKpDE,YAAYC,MAAZ,EAA0CC,SAA1C,EAAqE;IACnE,MAAMD,MAAN;IADwC;IAExC,KAAKC,SAAL,GAAiBN,SAAS,CAACM,SAAD,CAA1B,CAFmE,CAE5B;;IACvC,MAAM;MAACC,OAAD;MAAUC,EAAE,GAAG;IAAf,IAAqB,KAAKF,SAAhC;IACA,KAAKA,SAAL,CAAeE,EAAf,GAAoBD,OAAO,CAACE,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAS;MAAA;;MAAC,eAAE,CAACA,CAAD,CAAF,MAAK,IAAL,IAAKC,aAAL,GAAKA,EAAL,GAASF,CAAT;IAAU,CAAhC,CAApB;EACD;;EATMG,KAAK;IACV,OAAO,IAAIV,oBAAJ,CAAyB,KAAKE,MAA9B,EAAsCL,SAAS,CAAC,KAAKM,SAAN,CAA/C,CAAP;EACD;;EASMQ,eAAe;IACpB,OAAO,IAAIC,GAAJ,CAAQ,KAAKT,SAAL,CAAeC,OAAvB,CAAP;EACD;;EAEMS,cAAc;IACnB,OAAO,IAAID,GAAJ,CAAQ,KAAKT,SAAL,CAAeE,EAAvB,CAAP;EACD;;EAEMP,IAAI;IACT,OAAO,oBAAoBA,IAAI,CAAC,KAAKK,SAAN,CAAgB,EAA/C;EACD;;EAEMW,QAAQ;IACb,MAAM;MAACV,OAAO,EAAEW,MAAV;MAAkBV;IAAlB,IAAwB,KAAKF,SAAnC;IAEA,MAAMa,MAAM,GAAuB;MACjCC,IAAI,EAAE,SAD2B;MAEjCF,MAFiC;MAGjCV;IAHiC,CAAnC;IAKA,OAAOW,MAAP;EACD;;AAjCmD","names":["duplicate","hash","DataFlowNode","FlattenTransformNode","constructor","parent","transform","flatten","as","map","f","i","_a","clone","dependentFields","Set","producedFields","assemble","fields","result","type"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/flatten.ts"],"sourcesContent":["import {FlattenTransform as VgFlattenTransform} from 'vega';\nimport {FlattenTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n  public clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: FlattenTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const {flatten, as = []} = this.transform;\n    this.transform.as = flatten.map((f, i) => as[i] ?? f);\n  }\n\n  public dependentFields() {\n    return new Set(this.transform.flatten);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFlattenTransform {\n    const {flatten: fields, as} = this.transform;\n\n    const result: VgFlattenTransform = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}