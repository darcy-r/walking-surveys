{"ast":null,"code":"import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n  constructor(parent, model, filter) {\n    super(parent);\n    this.model = model;\n    this.filter = filter; // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n\n    this.expr = expression(this.model, this.filter, this);\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  dependentFields() {\n    return this._dependentFields;\n  }\n\n  producedFields() {\n    return new Set(); // filter does not produce any new fields\n  }\n\n  assemble() {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  hash() {\n    return `Filter ${this.expr}`;\n  }\n\n}","map":{"version":3,"mappings":"AAGA,SAAQA,SAAR,QAAwB,YAAxB;AAEA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,YAAR,QAA2B,YAA3B;AACA,SAAQC,kBAAR,QAAiC,eAAjC;AAEA,OAAM,MAAOC,UAAP,SAA0BF,YAA1B,CAAsC;EAO1CG,YACEC,MADF,EAEmBC,KAFnB,EAGmBC,MAHnB,EAGwD;IAEtD,MAAMF,MAAN;IAHiB;IACA,qBAAqC,CAItD;IACA;;IACA,KAAKG,IAAL,GAAYR,UAAU,CAAC,KAAKM,KAAN,EAAa,KAAKC,MAAlB,EAA0B,IAA1B,CAAtB;IAEA,KAAKE,gBAAL,GAAwBP,kBAAkB,CAAC,KAAKM,IAAN,CAA1C;EACD;;EAhBME,KAAK;IACV,OAAO,IAAIP,UAAJ,CAAe,IAAf,EAAqB,KAAKG,KAA1B,EAAiCP,SAAS,CAAC,KAAKQ,MAAN,CAA1C,CAAP;EACD;;EAgBMI,eAAe;IACpB,OAAO,KAAKF,gBAAZ;EACD;;EAEMG,cAAc;IACnB,OAAO,IAAIC,GAAJ,EAAP,CADmB,CACO;EAC3B;;EAEMC,QAAQ;IACb,OAAO;MACLC,IAAI,EAAE,QADD;MAELP,IAAI,EAAE,KAAKA;IAFN,CAAP;EAID;;EAEMQ,IAAI;IACT,OAAO,UAAU,KAAKR,IAAI,EAA1B;EACD;;AAtCyC","names":["duplicate","expression","DataFlowNode","getDependentFields","FilterNode","constructor","parent","model","filter","expr","_dependentFields","clone","dependentFields","producedFields","Set","assemble","type","hash"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/filter.ts"],"sourcesContent":["import {FilterTransform as VgFilterTransform} from 'vega';\nimport {LogicalComposition} from '../../logical';\nimport {Predicate} from '../../predicate';\nimport {duplicate} from '../../util';\nimport {Model} from '../model';\nimport {expression} from '../predicate';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\nexport class FilterNode extends DataFlowNode {\n  private expr: string;\n  private _dependentFields: Set<string>;\n  public clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private readonly model: Model,\n    private readonly filter: LogicalComposition<Predicate>\n  ) {\n    super(parent);\n\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    this.expr = expression(this.model, this.filter, this);\n\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public producedFields() {\n    return new Set<string>(); // filter does not produce any new fields\n  }\n\n  public assemble(): VgFilterTransform {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  public hash() {\n    return `Filter ${this.expr}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}