{"ast":null,"code":"import { getPositionScaleChannel, getSizeChannel, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getViewConfigContinuousSize, getViewConfigDiscreteSize } from '../../config';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit } from '../split';\nimport { getSizeTypeFromLayoutSizeType } from './component';\nexport function parseLayerLayoutSize(model) {\n  parseChildrenLayoutSize(model);\n  parseNonUnitLayoutSizeForChannel(model, 'width');\n  parseNonUnitLayoutSizeForChannel(model, 'height');\n}\nexport function parseConcatLayoutSize(model) {\n  parseChildrenLayoutSize(model); // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\n\n  const widthType = model.layout.columns === 1 ? 'width' : 'childWidth'; // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\n\n  const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\n  parseNonUnitLayoutSizeForChannel(model, widthType);\n  parseNonUnitLayoutSizeForChannel(model, heightType);\n}\nexport function parseChildrenLayoutSize(model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n/**\n * Merge child layout size (width or height).\n */\n\nfunction parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {\n  var _a;\n  /*\n   * For concat, the parent width or height might not be the same as the children's shared height.\n   * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\n   *\n   * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\n   * while the sizeType represents the properties of the child.\n   */\n\n\n  const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n  const channel = getPositionScaleChannel(sizeType);\n  const resolve = model.component.resolve;\n  const layoutSizeCmpt = model.component.layoutSize;\n  let mergedSize; // Try to merge layout size\n\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);\n\n    if (scaleResolve === 'independent' && childSize.value === 'step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n\n      mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\n  } else {\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, {\n      explicit: false,\n      value: undefined\n    });\n  }\n}\n\nexport function parseUnitLayoutSize(model) {\n  const {\n    size,\n    component\n  } = model;\n\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeChannel(channel);\n\n    if (size[sizeType]) {\n      const specifiedSize = size[sizeType];\n      component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n    } else {\n      const defaultSize = defaultUnitSize(model, sizeType);\n      component.layoutSize.set(sizeType, defaultSize, false);\n    }\n  }\n}\n\nfunction defaultUnitSize(model, sizeType) {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType)) {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection || model.mark === 'arc') {\n    // arc should use continuous size by default otherwise the pie is extremely small\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    const size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(size) ? size.step : size;\n  }\n}","map":{"version":3,"mappings":"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","names":["getPositionScaleChannel","getSizeChannel","POSITION_SCALE_CHANNELS","getViewConfigContinuousSize","getViewConfigDiscreteSize","hasDiscreteDomain","isStep","isVgRangeStep","defaultScaleResolve","mergeValuesWithExplicit","getSizeTypeFromLayoutSizeType","parseLayerLayoutSize","model","parseChildrenLayoutSize","parseNonUnitLayoutSizeForChannel","parseConcatLayoutSize","widthType","layout","columns","heightType","undefined","child","children","parseLayoutSize","layoutSizeType","sizeType","channel","resolve","component","layoutSizeCmpt","layoutSize","mergedSize","childSize","getWithExplicit","scaleResolve","scale","_a","value","renameSignal","getName","set","setWithExplicit","explicit","parseUnitLayoutSize","size","specifiedSize","defaultSize","defaultUnitSize","config","scaleComponent","getScaleComponent","scaleType","get","range","view","hasProjection","mark","step"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/layoutsize/parse.ts"],"sourcesContent":["import {getPositionScaleChannel, getSizeChannel, POSITION_SCALE_CHANNELS} from '../../channel';\nimport {getViewConfigContinuousSize, getViewConfigDiscreteSize} from '../../config';\nimport {hasDiscreteDomain} from '../../scale';\nimport {isStep} from '../../spec/base';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {ConcatModel} from '../concat';\nimport {Model} from '../model';\nimport {defaultScaleResolve} from '../resolve';\nimport {Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {getSizeTypeFromLayoutSizeType, LayoutSize, LayoutSizeIndex, LayoutSizeType} from './component';\n\nexport function parseLayerLayoutSize(model: Model) {\n  parseChildrenLayoutSize(model);\n\n  parseNonUnitLayoutSizeForChannel(model, 'width');\n  parseNonUnitLayoutSizeForChannel(model, 'height');\n}\n\nexport function parseConcatLayoutSize(model: ConcatModel) {\n  parseChildrenLayoutSize(model);\n\n  // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.\n  const widthType = model.layout.columns === 1 ? 'width' : 'childWidth';\n\n  // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.\n  const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';\n\n  parseNonUnitLayoutSizeForChannel(model, widthType);\n  parseNonUnitLayoutSizeForChannel(model, heightType);\n}\n\nexport function parseChildrenLayoutSize(model: Model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\n/**\n * Merge child layout size (width or height).\n */\nfunction parseNonUnitLayoutSizeForChannel(model: Model, layoutSizeType: LayoutSizeType) {\n  /*\n   * For concat, the parent width or height might not be the same as the children's shared height.\n   * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.\n   *\n   * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)\n   * while the sizeType represents the properties of the child.\n   */\n  const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);\n  const channel = getPositionScaleChannel(sizeType);\n  const resolve = model.component.resolve;\n  const layoutSizeCmpt = model.component.layoutSize;\n\n  let mergedSize: Explicit<LayoutSize>;\n  // Try to merge layout size\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel] ?? defaultScaleResolve(channel, model);\n    if (scaleResolve === 'independent' && childSize.value === 'step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n      mergedSize = mergeValuesWithExplicit<LayoutSizeIndex, LayoutSize>(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);\n  } else {\n    layoutSizeCmpt.setWithExplicit(layoutSizeType, {\n      explicit: false,\n      value: undefined\n    });\n  }\n}\n\nexport function parseUnitLayoutSize(model: UnitModel) {\n  const {size, component} = model;\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeChannel(channel);\n\n    if (size[sizeType]) {\n      const specifiedSize = size[sizeType];\n      component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n    } else {\n      const defaultSize = defaultUnitSize(model, sizeType);\n      component.layoutSize.set(sizeType, defaultSize, false);\n    }\n  }\n}\n\nfunction defaultUnitSize(model: UnitModel, sizeType: 'width' | 'height'): LayoutSize {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType)) {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection || model.mark === 'arc') {\n    // arc should use continuous size by default otherwise the pie is extremely small\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    const size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(size) ? size.step : size;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}