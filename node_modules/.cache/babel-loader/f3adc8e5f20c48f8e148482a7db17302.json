{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport class FoldTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    var _a, _b, _c;\n\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n  }\n\n  clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    return new Set(this.transform.fold);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const {\n      fold,\n      as\n    } = this.transform;\n    const result = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAAQA,SAAR,EAAmBC,IAAnB,QAA8B,YAA9B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAOC,iBAAP,SAAiCD,YAAjC,CAA6C;EAKjDE,YAAYC,MAAZ,EAA0CC,SAA1C,EAAkE;;;IAChE,MAAMD,MAAN;IADwC;IAExC,KAAKC,SAAL,GAAiBN,SAAS,CAACM,SAAD,CAA1B,CAFgE,CAEzB;;IACvC,MAAMC,WAAW,GAAG,WAAKD,SAAL,CAAeE,EAAf,MAAiB,IAAjB,IAAiBC,aAAjB,GAAiBA,EAAjB,GAAqB,CAACC,SAAD,EAAYA,SAAZ,CAAzC;IACA,KAAKJ,SAAL,CAAeE,EAAf,GAAoB,CAAC,iBAAW,CAAC,CAAD,CAAX,MAAc,IAAd,IAAcG,aAAd,GAAcA,EAAd,GAAkB,KAAnB,EAA0B,iBAAW,CAAC,CAAD,CAAX,MAAc,IAAd,IAAcC,aAAd,GAAcA,EAAd,GAAkB,OAA5C,CAApB;EACD;;EATMC,KAAK;IACV,OAAO,IAAIV,iBAAJ,CAAsB,IAAtB,EAA4BH,SAAS,CAAC,KAAKM,SAAN,CAArC,CAAP;EACD;;EASMQ,eAAe;IACpB,OAAO,IAAIC,GAAJ,CAAQ,KAAKT,SAAL,CAAeU,IAAvB,CAAP;EACD;;EAEMC,cAAc;IACnB,OAAO,IAAIF,GAAJ,CAAQ,KAAKT,SAAL,CAAeE,EAAvB,CAAP;EACD;;EAEMP,IAAI;IACT,OAAO,iBAAiBA,IAAI,CAAC,KAAKK,SAAN,CAAgB,EAA5C;EACD;;EAEMY,QAAQ;IACb,MAAM;MAACF,IAAD;MAAOR;IAAP,IAAa,KAAKF,SAAxB;IACA,MAAMa,MAAM,GAAoB;MAC9BC,IAAI,EAAE,MADwB;MAE9BC,MAAM,EAAEL,IAFsB;MAG9BR;IAH8B,CAAhC;IAKA,OAAOW,MAAP;EACD;;AAhCgD","names":["duplicate","hash","DataFlowNode","FoldTransformNode","constructor","parent","transform","specifiedAs","as","_a","undefined","_b","_c","clone","dependentFields","Set","fold","producedFields","assemble","result","type","fields"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/fold.ts"],"sourcesContent":["import {FoldTransform as VgFoldTransform} from 'vega';\nimport {FoldTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n  public clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: FoldTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? 'key', specifiedAs[1] ?? 'value'];\n  }\n\n  public dependentFields() {\n    return new Set(this.transform.fold);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFoldTransform {\n    const {fold, as} = this.transform;\n    const result: VgFoldTransform = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}