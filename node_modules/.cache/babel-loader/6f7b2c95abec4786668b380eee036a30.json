{"ast":null,"code":"import { stringValue } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport { varName } from '../../util';\nimport { assembleInit } from './assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nimport { isLegendBinding } from '../../selection';\nconst inputBindings = {\n  defined: selCmpt => {\n    return selCmpt.type === 'point' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\n  },\n  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n\n    const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    proj.items.forEach((p, i) => {\n      var _a, _b;\n\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift(Object.assign(Object.assign({\n          name: sgname\n        }, init ? {\n          init: assembleInit(init[i])\n        } : {\n          value: null\n        }), {\n          on: selCmpt.events ? [{\n            events: selCmpt.events,\n            update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n          }] : [],\n          bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind\n        }));\n      }\n    });\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n    return signals;\n  }\n};\nexport default inputBindings;","map":{"version":3,"mappings":"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","names":["stringValue","disableDirectManipulation","TUPLE","varName","assembleInit","nearest","TUPLE_FIELDS","isLegendBinding","inputBindings","defined","selCmpt","type","resolve","bind","parse","model","selDef","topLevelSignals","signals","name","proj","project","init","datum","items","forEach","p","i","sgname","field","hasSignal","filter","s","length","unshift","Object","value","on","events","update","_a","channel","_b","signal","fields","values","map","valid","v","join"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/selection/inputs.ts"],"sourcesContent":["import {stringValue} from 'vega-util';\nimport {disableDirectManipulation, TUPLE} from '.';\nimport {varName} from '../../util';\nimport {assembleInit} from './assemble';\nimport nearest from './nearest';\nimport {TUPLE_FIELDS} from './project';\nimport {SelectionCompiler} from '.';\nimport {isLegendBinding} from '../../selection';\n\nconst inputBindings: SelectionCompiler<'point'> = {\n  defined: selCmpt => {\n    return (\n      selCmpt.type === 'point' &&\n      selCmpt.resolve === 'global' &&\n      selCmpt.bind &&\n      selCmpt.bind !== 'scales' &&\n      !isLegendBinding(selCmpt.bind)\n    );\n  },\n\n  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n    const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n\n    proj.items.forEach((p, i) => {\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift({\n          name: sgname,\n          ...(init ? {init: assembleInit(init[i])} : {value: null}),\n          on: selCmpt.events\n            ? [\n                {\n                  events: selCmpt.events,\n                  update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n                }\n              ]\n            : [],\n          bind: bind[p.field] ?? bind[p.channel] ?? bind\n        });\n      }\n    });\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n\n    return signals;\n  }\n};\n\nexport default inputBindings;\n"]},"metadata":{},"sourceType":"module"}