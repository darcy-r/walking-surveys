{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\n\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    const out = new Set();\n\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(out.add, out);\n    }\n\n    this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  getDefaultName(joinAggregateFieldDef) {\n    var _a;\n\n    return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);\n  }\n\n  hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n    return Object.assign({\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields\n    }, groupby !== undefined ? {\n      groupby\n    } : {});\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAQA,OAAR,QAAsB,kBAAtB;AAEA,SAAQC,SAAR,EAAmBC,IAAnB,QAA8B,YAA9B;AAGA,SAAQC,MAAR,QAAqB,YAArB;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAOC,0BAAP,SAA0CD,YAA1C,CAAsD;EAK1DE,YAAYC,MAAZ,EAAmDC,SAAnD,EAAoF;IAClF,MAAMD,MAAN;IADiD;EAElD;;EANME,KAAK;IACV,OAAO,IAAIJ,0BAAJ,CAA+B,IAA/B,EAAqCJ,SAAS,CAAC,KAAKO,SAAN,CAA9C,CAAP;EACD;;EAMME,aAAa,CAACC,MAAD,EAAiB;IACnC,KAAKH,SAAL,CAAeI,OAAf,GAAyBT,MAAM,CAAC,KAAKK,SAAL,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BF,MAA9B,CAAD,EAAwCG,CAAC,IAAIA,CAA7C,CAA/B;EACD;;EAEMC,eAAe;IACpB,MAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;IAEA,IAAI,KAAKT,SAAL,CAAeI,OAAnB,EAA4B;MAC1B,KAAKJ,SAAL,CAAeI,OAAf,CAAuBM,OAAvB,CAA+BF,GAAG,CAACG,GAAnC,EAAwCH,GAAxC;IACD;;IACD,KAAKR,SAAL,CAAeY,aAAf,CACGC,GADH,CACOC,CAAC,IAAIA,CAAC,CAACC,KADd,EAEGC,MAFH,CAEUC,CAAC,IAAIA,CAAC,KAAKC,SAFrB,EAGGR,OAHH,CAGWF,GAAG,CAACG,GAHf,EAGoBH,GAHpB;IAKA,OAAOA,GAAP;EACD;;EAEMW,cAAc;IACnB,OAAO,IAAIV,GAAJ,CAAQ,KAAKT,SAAL,CAAeY,aAAf,CAA6BC,GAA7B,CAAiC,KAAKO,cAAtC,CAAR,CAAP;EACD;;EAEOA,cAAc,CAACC,qBAAD,EAA6C;;;IACjE,OAAO,2BAAqB,CAACC,EAAtB,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwBA,EAAxB,GAA4B/B,OAAO,CAAC6B,qBAAD,CAA1C;EACD;;EAEM3B,IAAI;IACT,OAAO,0BAA0BA,IAAI,CAAC,KAAKM,SAAN,CAAgB,EAArD;EACD;;EAEMwB,QAAQ;IACb,MAAMrB,MAAM,GAAa,EAAzB;IACA,MAAMsB,GAAG,GAAkB,EAA3B;IACA,MAAMH,EAAE,GAAa,EAArB;;IACA,KAAK,MAAMV,aAAX,IAA4B,KAAKZ,SAAL,CAAeY,aAA3C,EAA0D;MACxDa,GAAG,CAACC,IAAJ,CAASd,aAAa,CAACe,EAAvB;MACAL,EAAE,CAACI,IAAH,CAAQ,KAAKN,cAAL,CAAoBR,aAApB,CAAR;MACAT,MAAM,CAACuB,IAAP,CAAYd,aAAa,CAACG,KAAd,KAAwBG,SAAxB,GAAoC,IAApC,GAA2CN,aAAa,CAACG,KAArE;IACD;;IAED,MAAMX,OAAO,GAAG,KAAKJ,SAAL,CAAeI,OAA/B;IAEA;MACEwB,IAAI,EAAE,eADR;MAEEN,EAFF;MAGEG,GAHF;MAIEtB;IAJF,GAKMC,OAAO,KAAKc,SAAZ,GAAwB;MAACd;IAAD,CAAxB,GAAoC,EAL1C;EAOD;;AA1DyD","names":["vgField","duplicate","hash","unique","DataFlowNode","JoinAggregateTransformNode","constructor","parent","transform","clone","addDimensions","fields","groupby","concat","d","dependentFields","out","Set","forEach","add","joinaggregate","map","w","field","filter","f","undefined","producedFields","getDefaultName","joinAggregateFieldDef","as","_a","assemble","ops","push","op","type"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/joinaggregate.ts"],"sourcesContent":["import {AggregateOp} from 'vega';\nimport {vgField} from '../../channeldef';\nimport {JoinAggregateTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgJoinAggregateTransform} from '../../vega.schema';\nimport {JoinAggregateFieldDef} from '../../transform';\nimport {unique} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  public clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: JoinAggregateTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(out.add, out);\n    }\n    this.transform.joinaggregate\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(out.add, out);\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  private getDefaultName(joinAggregateFieldDef: JoinAggregateFieldDef): string {\n    return joinAggregateFieldDef.as ?? vgField(joinAggregateFieldDef);\n  }\n\n  public hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n\n    return {\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields,\n      ...(groupby !== undefined ? {groupby} : {})\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}