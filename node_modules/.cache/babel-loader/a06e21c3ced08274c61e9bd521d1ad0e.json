{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\";\nimport React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic'; // Define the graph dimensions and margins\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 460;\nconst height = 500;\nconst margin = {\n  top: 0,\n  bottom: 30,\n  left: 0,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph;\n\nconst temperatureAccessor = d => d.temperature_apparent; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")],\n  // Math.max(...data.map(x))\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400] // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 36] // again TODO: fetch min and max apparent temperatures over API\n\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\n\nconst temperatureColourScale = d => interpolateRdYlBu(getTemperatureStandardised(d)); // Finally we'll embed it all in an SVG\n\n\nfunction ScatterPlot(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter-plot-chart\",\n      children: props.data.map((d, i) => {\n        return /*#__PURE__*/_jsxDEV(Group, {\n          children: [/*#__PURE__*/_jsxDEV(GridRows, {\n            scale: yScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n            scale: xScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n            top: yMax,\n            scale: xScale,\n            numTicks: width > 461 ? 12 : 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n            scale: yScale,\n            numTicks: height > 501 ? 12 : 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"-70\",\n            y: \"15\",\n            transform: \"rotate(-90)\",\n            fontSize: 10,\n            children: \"People per hour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Circle, {\n            cx: xPoint(d),\n            cy: yPoint(d) // {yMax - barHeight}\n            ,\n            r: 10,\n            fill: temperatureColourScale(d)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, `bar-${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","Group","Circle","scaleLinear","scaleTime","scaleQuantize","AxisLeft","AxisBottom","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","temperatureAccessor","temperature_apparent","xScale","range","round","domain","padding","yScale","temperatureRescaler","compose","scale","accessor","data","xPoint","yPoint","getTemperatureStandardised","temperatureColourScale","ScatterPlot","props","map","i"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\n\n// Define the graph dimensions and margins\nconst width = 460;\nconst height = 500;\nconst margin = { top: 0, bottom: 30, left: 0, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\nconst temperatureAccessor = d => d.temperature_apparent;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")], // Math.max(...data.map(x))\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400], // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 36], // again TODO: fetch min and max apparent temperatures over API\n})\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\nconst temperatureColourScale = (d) => interpolateRdYlBu(getTemperatureStandardised(d))\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  return (\n    <div>\n      <svg width={width} height={height} className=\"scatter-plot-chart\">\n        {props.data.map((d, i) => {\n          return (\n            <Group key={`bar-${i}`}>\n              <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n              <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n              <AxisBottom top={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n              <AxisLeft scale={yScale} numTicks={height > 501 ? 12 : 8}/>\n              <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n                People per hour\n              </text>\n              <Circle\n                cx={xPoint(d)}\n                cy={yPoint(d)} // {yMax - barHeight}\n                r={10}\n                fill={temperatureColourScale(d)}\n              />\n            </Group>\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}