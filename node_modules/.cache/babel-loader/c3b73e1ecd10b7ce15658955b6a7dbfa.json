{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\";\nimport React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { withTooltip, TooltipWithBounds } from '@visx/tooltip';\nimport { localPoint } from '@visx/event'; // Define the graph dimensions and margins\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 460;\nconst height = 490;\nconst margin = {\n  top: 0,\n  bottom: 30,\n  left: 0,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph;\n\nconst temperatureAccessor = d => d.temperature_apparent; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")],\n  // Math.max(...data.map(x))\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400] // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38] // again TODO: fetch min and max apparent temperatures over API\n\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\n\nconst temperatureColourScale = d => interpolateRdYlBu(getTemperatureStandardised(d)); // Finally we'll embed it all in an SVG\n\n\nclass ScatterPlot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseOver = (event, datum) => {\n      const coords = localPoint(event.target.ownerSVGElement, event);\n      this.props.showTooltip({\n        tooltipLeft: coords.x,\n        tooltipTop: coords.y,\n        tooltipData: datum\n      });\n    };\n\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n\n  render() {\n    const {\n      tooltipData,\n      tooltipLeft,\n      tooltipTop,\n      tooltipOpen,\n      hideTooltip\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: width,\n          height: height,\n          className: \"scatter-plot-chart\",\n          children: [/*#__PURE__*/_jsxDEV(GridRows, {\n            scale: yScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n            scale: xScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n            top: yMax,\n            scale: xScale,\n            numTicks: width > 461 ? 12 : 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n            scale: yScale,\n            numTicks: height > 491 ? 12 : 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"-70\",\n            y: \"15\",\n            transform: \"rotate(-90)\",\n            fontSize: 10,\n            children: \"People per hour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this), this.props.data.map((d, i) => {\n            return /*#__PURE__*/_jsxDEV(Group, {\n              children: /*#__PURE__*/_jsxDEV(Circle, {\n                cx: xPoint(d),\n                cy: yPoint(d) // {yMax - barHeight}\n                ,\n                r: 6,\n                fill: temperatureColourScale(d),\n                onMouseOver: this.handleMouseOver,\n                onMouseOut: hideTooltip\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this)\n            }, `bar-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), tooltipOpen && /*#__PURE__*/_jsxDEV(TooltipWithBounds // set this to random so it correctly updates with parent bounds\n        , {\n          top: tooltipTop,\n          left: tooltipLeft,\n          children: [\"Data value \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: tooltipData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 24\n          }, this)]\n        }, Math.random(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ScatterPlot;","map":{"version":3,"names":["React","Group","Circle","scaleLinear","scaleTime","scaleQuantize","AxisLeft","AxisBottom","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","withTooltip","TooltipWithBounds","localPoint","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","temperatureAccessor","temperature_apparent","xScale","range","round","domain","padding","yScale","temperatureRescaler","compose","scale","accessor","data","xPoint","yPoint","getTemperatureStandardised","temperatureColourScale","ScatterPlot","Component","constructor","props","handleMouseOver","event","datum","coords","target","ownerSVGElement","showTooltip","tooltipLeft","tooltipTop","tooltipData","bind","render","tooltipOpen","hideTooltip","map","i","Math","random"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { withTooltip, TooltipWithBounds } from '@visx/tooltip';\nimport { localPoint } from '@visx/event';\n\n// Define the graph dimensions and margins\nconst width = 460;\nconst height = 490;\nconst margin = { top: 0, bottom: 30, left: 0, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\nconst temperatureAccessor = d => d.temperature_apparent;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")], // Math.max(...data.map(x))\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400], // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38], // again TODO: fetch min and max apparent temperatures over API\n})\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\nconst temperatureColourScale = (d) => interpolateRdYlBu(getTemperatureStandardised(d))\n\n// Finally we'll embed it all in an SVG\nclass ScatterPlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n  handleMouseOver = (event, datum) => {\n    const coords = localPoint(event.target.ownerSVGElement, event);\n    this.props.showTooltip({\n      tooltipLeft: coords.x,\n      tooltipTop: coords.y,\n      tooltipData: datum\n    });\n  };\n  render() {\n    const {\n      tooltipData,\n      tooltipLeft,\n      tooltipTop,\n      tooltipOpen,\n      hideTooltip\n    } = this.props;\n    return (\n      <React.Fragment>\n        <div>\n          <svg width={width} height={height} className=\"scatter-plot-chart\">\n          <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n          <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n          <AxisBottom top={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n          <AxisLeft scale={yScale} numTicks={height > 491 ? 12 : 8}/>\n          <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n            People per hour\n          </text>\n          {this.props.data.map((d, i) => {\n            return (\n              <Group key={`bar-${i}`}>\n                <Circle\n                  cx={xPoint(d)}\n                  cy={yPoint(d)} // {yMax - barHeight}\n                  r={6}\n                  fill={temperatureColourScale(d)}\n                  onMouseOver={this.handleMouseOver}\n                  onMouseOut={hideTooltip}\n                />\n              </Group>\n            );\n          })}\n          </svg>\n          {tooltipOpen && (\n          <TooltipWithBounds\n            // set this to random so it correctly updates with parent bounds\n            key={Math.random()}\n            top={tooltipTop}\n            left={tooltipLeft}\n          >\n            Data value <strong>{tooltipData}</strong>\n          </TooltipWithBounds>\n        )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ScatterPlot;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,aAAjC,QAAsD,aAAtD;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,YAArC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,YAAtC;AACA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,oBAAhD;AACA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,eAA/C;AACA,SAASC,UAAT,QAA2B,aAA3B,C,CAEA;;;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;AACA,MAAMC,MAAM,GAAG;EAAEC,GAAG,EAAE,CAAP;EAAUC,MAAM,EAAE,EAAlB;EAAsBC,IAAI,EAAE,CAA5B;EAA+BC,KAAK,EAAE;AAAtC,CAAf,C,CAEA;;AACA,MAAMC,IAAI,GAAGP,KAAK,GAAGE,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAA1C;AACA,MAAME,IAAI,GAAGP,MAAM,GAAGC,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAA1C,C,CAEA;;AACA,MAAMK,CAAC,GAAGC,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAW,gBAAgBF,CAAC,CAACG,IAA7B,CAAf;;AACA,MAAMC,CAAC,GAAGJ,CAAC,IAAIA,CAAC,CAACK,GAAjB;;AACA,MAAMC,mBAAmB,GAAGN,CAAC,IAAIA,CAAC,CAACO,oBAAnC,C,CAEA;;;AACA,MAAMC,MAAM,GAAG7B,SAAS,CAAC;EACvB8B,KAAK,EAAE,CAAC,CAAD,EAAIZ,IAAJ,CADgB;EAEvBa,KAAK,EAAE,IAFgB;EAGvBC,MAAM,EAAE,CAACV,IAAI,CAACC,KAAL,CAAW,qBAAX,CAAD,EAAoCD,IAAI,CAACC,KAAL,CAAW,qBAAX,CAApC,CAHe;EAGyD;EAChFU,OAAO,EAAE;AAJc,CAAD,CAAxB;AAMA,MAAMC,MAAM,GAAGnC,WAAW,CAAC;EACzB+B,KAAK,EAAE,CAACX,IAAD,EAAO,CAAP,CADkB;EAEzBY,KAAK,EAAE,IAFkB;EAGzBC,MAAM,EAAE,CAAC,CAAD,EAAI,IAAJ,CAHiB,CAGN;;AAHM,CAAD,CAA1B;AAKA,MAAMG,mBAAmB,GAAGpC,WAAW,CAAC;EACtC+B,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD+B;EAEtCE,MAAM,EAAE,CAAC,CAAC,CAAF,EAAK,EAAL,CAF8B,CAEpB;;AAFoB,CAAD,CAAvC,C,CAKA;;AACA,MAAMI,OAAO,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqBC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAD,CAAT,CAAlD;;AACA,MAAMC,MAAM,GAAGJ,OAAO,CAACP,MAAD,EAAST,CAAT,CAAtB;AACA,MAAMqB,MAAM,GAAGL,OAAO,CAACF,MAAD,EAAST,CAAT,CAAtB;AACA,MAAMiB,0BAA0B,GAAGN,OAAO,CAACD,mBAAD,EAAsBR,mBAAtB,CAA1C;;AACA,MAAMgB,sBAAsB,GAAItB,CAAD,IAAOd,iBAAiB,CAACmC,0BAA0B,CAACrB,CAAD,CAA3B,CAAvD,C,CAEA;;;AACA,MAAMuB,WAAN,SAA0BhD,KAAK,CAACiD,SAAhC,CAA0C;EACxCC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAInBC,eAJmB,GAID,CAACC,KAAD,EAAQC,KAAR,KAAkB;MAClC,MAAMC,MAAM,GAAGzC,UAAU,CAACuC,KAAK,CAACG,MAAN,CAAaC,eAAd,EAA+BJ,KAA/B,CAAzB;MACA,KAAKF,KAAL,CAAWO,WAAX,CAAuB;QACrBC,WAAW,EAAEJ,MAAM,CAAC/B,CADC;QAErBoC,UAAU,EAAEL,MAAM,CAAC1B,CAFE;QAGrBgC,WAAW,EAAEP;MAHQ,CAAvB;IAKD,CAXkB;;IAEjB,KAAKF,eAAL,GAAuB,KAAKA,eAAL,CAAqBU,IAArB,CAA0B,IAA1B,CAAvB;EACD;;EASDC,MAAM,GAAG;IACP,MAAM;MACJF,WADI;MAEJF,WAFI;MAGJC,UAHI;MAIJI,WAJI;MAKJC;IALI,IAMF,KAAKd,KANT;IAOA,oBACE,QAAC,KAAD,CAAO,QAAP;MAAA,uBACE;QAAA,wBACE;UAAK,KAAK,EAAEpC,KAAZ;UAAmB,MAAM,EAAEC,MAA3B;UAAmC,SAAS,EAAC,oBAA7C;UAAA,wBACA,QAAC,QAAD;YAAU,KAAK,EAAEsB,MAAjB;YAAyB,KAAK,EAAEhB,IAAhC;YAAsC,MAAM,EAAEC,IAA9C;YAAoD,MAAM,EAAC;UAA3D;YAAA;YAAA;YAAA;UAAA,QADA,eAEA,QAAC,WAAD;YAAa,KAAK,EAAEU,MAApB;YAA4B,KAAK,EAAEX,IAAnC;YAAyC,MAAM,EAAEC,IAAjD;YAAuD,MAAM,EAAC;UAA9D;YAAA;YAAA;YAAA;UAAA,QAFA,eAGA,QAAC,UAAD;YAAY,GAAG,EAAEA,IAAjB;YAAuB,KAAK,EAAEU,MAA9B;YAAsC,QAAQ,EAAElB,KAAK,GAAG,GAAR,GAAc,EAAd,GAAmB;UAAnE;YAAA;YAAA;YAAA;UAAA,QAHA,eAIA,QAAC,QAAD;YAAU,KAAK,EAAEuB,MAAjB;YAAyB,QAAQ,EAAEtB,MAAM,GAAG,GAAT,GAAe,EAAf,GAAoB;UAAvD;YAAA;YAAA;YAAA;UAAA,QAJA,eAKA;YAAM,CAAC,EAAC,KAAR;YAAc,CAAC,EAAC,IAAhB;YAAqB,SAAS,EAAC,aAA/B;YAA6C,QAAQ,EAAE,EAAvD;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QALA,EAQC,KAAKmC,KAAL,CAAWR,IAAX,CAAgBuB,GAAhB,CAAoB,CAACzC,CAAD,EAAI0C,CAAJ,KAAU;YAC7B,oBACE,QAAC,KAAD;cAAA,uBACE,QAAC,MAAD;gBACE,EAAE,EAAEvB,MAAM,CAACnB,CAAD,CADZ;gBAEE,EAAE,EAAEoB,MAAM,CAACpB,CAAD,CAFZ,CAEiB;gBAFjB;gBAGE,CAAC,EAAE,CAHL;gBAIE,IAAI,EAAEsB,sBAAsB,CAACtB,CAAD,CAJ9B;gBAKE,WAAW,EAAE,KAAK2B,eALpB;gBAME,UAAU,EAAEa;cANd;gBAAA;gBAAA;gBAAA;cAAA;YADF,GAAa,OAAME,CAAE,EAArB;cAAA;cAAA;cAAA;YAAA,QADF;UAYD,CAbA,CARD;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,EAwBGH,WAAW,iBACZ,QAAC,iBAAD,CACE;QADF;UAGE,GAAG,EAAEJ,UAHP;UAIE,IAAI,EAAED,WAJR;UAAA,uCAMa;YAAA,UAASE;UAAT;YAAA;YAAA;YAAA;UAAA,QANb;QAAA,GAEOO,IAAI,CAACC,MAAL,EAFP;UAAA;UAAA;UAAA;QAAA,QAzBF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAuCD;;AA5DuC;;AA+D1C,eAAerB,WAAf"},"metadata":{},"sourceType":"module"}