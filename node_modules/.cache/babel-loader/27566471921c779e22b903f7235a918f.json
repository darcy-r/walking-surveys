{"ast":null,"code":"import createLinearScale from './scales/linear';\nimport createLogScale from './scales/log';\nimport createPowScale from './scales/power';\nimport createSqrtScale from './scales/squareRoot';\nimport createSymlogScale from './scales/symlog';\nimport createTimeScale from './scales/time';\nimport createUtcScale from './scales/utc';\nimport createQuantileScale from './scales/quantile';\nimport createQuantizeScale from './scales/quantize';\nimport createThresholdScale from './scales/threshold';\nimport createOrdinalScale from './scales/ordinal';\nimport createPointScale from './scales/point';\nimport createBandScale from './scales/band'; // Overload function for more strict typing, e.g.,\n// If the config is a linear config then a ScaleLinear will be returned\n// instead of a union type of all scales.\n// Actual implementation\n\nfunction createScale(config) {\n  if (typeof config !== 'undefined' && 'type' in config) {\n    switch (config.type) {\n      case 'linear':\n        return createLinearScale(config);\n\n      case 'log':\n        return createLogScale(config);\n\n      case 'pow':\n        return createPowScale(config);\n\n      case 'sqrt':\n        return createSqrtScale(config);\n\n      case 'symlog':\n        return createSymlogScale(config);\n\n      case 'time':\n        return createTimeScale(config);\n\n      case 'utc':\n        return createUtcScale(config);\n\n      case 'quantile':\n        return createQuantileScale(config);\n\n      case 'quantize':\n        return createQuantizeScale(config);\n\n      case 'threshold':\n        return createThresholdScale(config);\n\n      case 'ordinal':\n        return createOrdinalScale(config);\n\n      case 'point':\n        return createPointScale(config);\n\n      case 'band':\n        return createBandScale(config);\n\n      default:\n    }\n  } // If type is not specified, fallback to linear scale\n\n\n  return createLinearScale(config);\n}\n\nexport default createScale;","map":{"version":3,"names":["createLinearScale","createLogScale","createPowScale","createSqrtScale","createSymlogScale","createTimeScale","createUtcScale","createQuantileScale","createQuantizeScale","createThresholdScale","createOrdinalScale","createPointScale","createBandScale","createScale","config","type"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/@visx/scale/esm/createScale.js"],"sourcesContent":["import createLinearScale from './scales/linear';\nimport createLogScale from './scales/log';\nimport createPowScale from './scales/power';\nimport createSqrtScale from './scales/squareRoot';\nimport createSymlogScale from './scales/symlog';\nimport createTimeScale from './scales/time';\nimport createUtcScale from './scales/utc';\nimport createQuantileScale from './scales/quantile';\nimport createQuantizeScale from './scales/quantize';\nimport createThresholdScale from './scales/threshold';\nimport createOrdinalScale from './scales/ordinal';\nimport createPointScale from './scales/point';\nimport createBandScale from './scales/band'; // Overload function for more strict typing, e.g.,\n// If the config is a linear config then a ScaleLinear will be returned\n// instead of a union type of all scales.\n\n// Actual implementation\nfunction createScale(config) {\n  if (typeof config !== 'undefined' && 'type' in config) {\n    switch (config.type) {\n      case 'linear':\n        return createLinearScale(config);\n\n      case 'log':\n        return createLogScale(config);\n\n      case 'pow':\n        return createPowScale(config);\n\n      case 'sqrt':\n        return createSqrtScale(config);\n\n      case 'symlog':\n        return createSymlogScale(config);\n\n      case 'time':\n        return createTimeScale(config);\n\n      case 'utc':\n        return createUtcScale(config);\n\n      case 'quantile':\n        return createQuantileScale(config);\n\n      case 'quantize':\n        return createQuantizeScale(config);\n\n      case 'threshold':\n        return createThresholdScale(config);\n\n      case 'ordinal':\n        return createOrdinalScale(config);\n\n      case 'point':\n        return createPointScale(config);\n\n      case 'band':\n        return createBandScale(config);\n\n      default:\n    }\n  } // If type is not specified, fallback to linear scale\n\n\n  return createLinearScale(config);\n}\n\nexport default createScale;"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,iBAA9B;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,iBAAP,MAA8B,iBAA9B;AACA,OAAOC,eAAP,MAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;AACA,OAAOC,oBAAP,MAAiC,oBAAjC;AACA,OAAOC,kBAAP,MAA+B,kBAA/B;AACA,OAAOC,gBAAP,MAA6B,gBAA7B;AACA,OAAOC,eAAP,MAA4B,eAA5B,C,CAA6C;AAC7C;AACA;AAEA;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;EAC3B,IAAI,OAAOA,MAAP,KAAkB,WAAlB,IAAiC,UAAUA,MAA/C,EAAuD;IACrD,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,QAAL;QACE,OAAOf,iBAAiB,CAACc,MAAD,CAAxB;;MAEF,KAAK,KAAL;QACE,OAAOb,cAAc,CAACa,MAAD,CAArB;;MAEF,KAAK,KAAL;QACE,OAAOZ,cAAc,CAACY,MAAD,CAArB;;MAEF,KAAK,MAAL;QACE,OAAOX,eAAe,CAACW,MAAD,CAAtB;;MAEF,KAAK,QAAL;QACE,OAAOV,iBAAiB,CAACU,MAAD,CAAxB;;MAEF,KAAK,MAAL;QACE,OAAOT,eAAe,CAACS,MAAD,CAAtB;;MAEF,KAAK,KAAL;QACE,OAAOR,cAAc,CAACQ,MAAD,CAArB;;MAEF,KAAK,UAAL;QACE,OAAOP,mBAAmB,CAACO,MAAD,CAA1B;;MAEF,KAAK,UAAL;QACE,OAAON,mBAAmB,CAACM,MAAD,CAA1B;;MAEF,KAAK,WAAL;QACE,OAAOL,oBAAoB,CAACK,MAAD,CAA3B;;MAEF,KAAK,SAAL;QACE,OAAOJ,kBAAkB,CAACI,MAAD,CAAzB;;MAEF,KAAK,OAAL;QACE,OAAOH,gBAAgB,CAACG,MAAD,CAAvB;;MAEF,KAAK,MAAL;QACE,OAAOF,eAAe,CAACE,MAAD,CAAtB;;MAEF;IAxCF;EA0CD,CA5C0B,CA4CzB;;;EAGF,OAAOd,iBAAiB,CAACc,MAAD,CAAxB;AACD;;AAED,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}