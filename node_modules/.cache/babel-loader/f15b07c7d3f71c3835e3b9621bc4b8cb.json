{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n  const {\n    row,\n    column\n  } = facet;\n\n  if (row && column) {\n    let newParent = null; // only need to make one for crossed facet\n\n    for (const fieldDef of [row, column]) {\n      if (isSortField(fieldDef.sort)) {\n        const {\n          field,\n          op = DEFAULT_SORT_OP\n        } = fieldDef.sort;\n        parent = newParent = new JoinAggregateTransformNode(parent, {\n          joinaggregate: [{\n            op,\n            field,\n            as: facetSortFieldName(fieldDef, fieldDef.sort, {\n              forAs: true\n            })\n          }],\n          groupby: [vgField(fieldDef)]\n        });\n      }\n    }\n\n    return newParent;\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,OAAR,QAAsB,kBAAtB;AACA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,YAA3C;AAEA,SAAQC,kBAAR,QAAiC,UAAjC;AAEA,SAAQC,0BAAR,QAAyC,iBAAzC;AAEA,OAAM,SAAUC,0BAAV,CACJC,MADI,EAEJC,KAFI,EAEuB;EAE3B,MAAM;IAACC,GAAD;IAAMC;EAAN,IAAgBF,KAAtB;;EACA,IAAIC,GAAG,IAAIC,MAAX,EAAmB;IACjB,IAAIC,SAAS,GAAG,IAAhB,CADiB,CAEjB;;IACA,KAAK,MAAMC,QAAX,IAAuB,CAACH,GAAD,EAAMC,MAAN,CAAvB,EAAsC;MACpC,IAAIP,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAf,EAAgC;QAC9B,MAAM;UAACC,KAAD;UAAQC,EAAE,GAAGb;QAAb,IAAgCU,QAAQ,CAACC,IAA/C;QACAN,MAAM,GAAGI,SAAS,GAAG,IAAIN,0BAAJ,CAA+BE,MAA/B,EAAuC;UAC1DS,aAAa,EAAE,CACb;YACED,EADF;YAEED,KAFF;YAGEG,EAAE,EAAEb,kBAAkB,CAACQ,QAAD,EAAWA,QAAQ,CAACC,IAApB,EAA0B;cAACK,KAAK,EAAE;YAAR,CAA1B;UAHxB,CADa,CAD2C;UAQ1DC,OAAO,EAAE,CAAClB,OAAO,CAACW,QAAD,CAAR;QARiD,CAAvC,CAArB;MAUD;IACF;;IACD,OAAOD,SAAP;EACD;;EACD,OAAO,IAAP;AACD","names":["vgField","DEFAULT_SORT_OP","isSortField","facetSortFieldName","JoinAggregateTransformNode","makeJoinAggregateFromFacet","parent","facet","row","column","newParent","fieldDef","sort","field","op","joinaggregate","as","forAs","groupby"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/joinaggregatefacet.ts"],"sourcesContent":["import {vgField} from '../../channeldef';\nimport {DEFAULT_SORT_OP, isSortField} from '../../sort';\nimport {FacetMapping} from '../../spec/facet';\nimport {facetSortFieldName} from '../facet';\nimport {DataFlowNode} from './dataflow';\nimport {JoinAggregateTransformNode} from './joinaggregate';\n\nexport function makeJoinAggregateFromFacet(\n  parent: DataFlowNode,\n  facet: FacetMapping<string>\n): JoinAggregateTransformNode {\n  const {row, column} = facet;\n  if (row && column) {\n    let newParent = null;\n    // only need to make one for crossed facet\n    for (const fieldDef of [row, column]) {\n      if (isSortField(fieldDef.sort)) {\n        const {field, op = DEFAULT_SORT_OP} = fieldDef.sort;\n        parent = newParent = new JoinAggregateTransformNode(parent, {\n          joinaggregate: [\n            {\n              op,\n              field,\n              as: facetSortFieldName(fieldDef, fieldDef.sort, {forAs: true})\n            }\n          ],\n          groupby: [vgField(fieldDef)]\n        });\n      }\n    }\n    return newParent;\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}