{"ast":null,"code":"import 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\nexport function never(message) {\n  throw new Error(message);\n}\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function pick(obj, props) {\n  const copy = {};\n\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function omit(obj, props) {\n  const copy = Object.assign({}, obj);\n\n  for (const prop of props) {\n    delete copy[prop];\n  }\n\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n\nSet.prototype['toJSON'] = function () {\n  return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\n\n\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\n\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n  if (str.length < 250) {\n    return str;\n  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n  let h = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\n\nexport function some(arr, f) {\n  let i = 0;\n\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\n\nexport function every(arr, f) {\n  let i = 0;\n\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * recursively merges src into dest\n */\n\nexport function mergeDeep(dest) {\n  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    src[_key - 1] = arguments[_key];\n  }\n\n  for (const s of src) {\n    deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n  }\n\n  return dest;\n}\n\nfunction deepMerge_(dest, src) {\n  for (const property of keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique(values, f) {\n  const results = [];\n  const u = {};\n  let v;\n\n  for (const val of values) {\n    v = f(val);\n\n    if (v in u) {\n      continue;\n    }\n\n    u[v] = 1;\n    results.push(val);\n  }\n\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\n\nexport function isEqual(dict, other) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function hasIntersection(a, b) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function prefixGenerator(a) {\n  const prefixes = new Set();\n\n  for (const x of a) {\n    const splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : `[${y}]`);\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n\n    for (const y of computedPrefixes) {\n      prefixes.add(y);\n    }\n  }\n\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\n\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function isEmpty(obj) {\n  return keys(obj).length === 0;\n} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\nexport const keys = Object.keys;\nexport const vals = Object.values;\nexport const entries = Object.entries;\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\n\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return `!(${logicalExpr(op.not, cb)})`;\n  } else if (isLogicalAnd(op)) {\n    return `(${op.and.map(and => logicalExpr(and, cb)).join(') && (')})`;\n  } else if (isLogicalOr(op)) {\n    return `(${op.or.map(or => logicalExpr(or, cb)).join(') || (')})`;\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\n\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n\n  const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n\n  return isEmpty(obj);\n}\nexport function titleCase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function accessPathWithDatum(path) {\n  let datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function flatAccessWithDatum(path) {\n  let datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n\nfunction escapePathAccess(string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\n\n\nexport function replacePathInField(path) {\n  return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\n\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\n\nexport function removePathFromField(path) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\n\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\n\nexport function getFirstDefined() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n\n  return undefined;\n} // variable used to generate id\n\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\n\nexport function uniqueId(prefix) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\n\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n  return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\n\nexport function normalizeAngle(angle) {\n  if (angle === undefined) {\n    return undefined;\n  }\n\n  return (angle % 360 + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\n\nexport function isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  }\n\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}","map":{"version":3,"mappings":"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","names":["default","clone_","deepEqual_","stableStringify","hasOwnProperty","isNumber","isString","splitAccessPath","stringValue","writeConfig","isLogicalAnd","isLogicalNot","isLogicalOr","deepEqual","duplicate","never","message","Error","pick","obj","props","copy","prop","omit","Set","prototype","map","x","join","stringify","hash","a","str","length","h","i","char","charCodeAt","isNullOrFalse","contains","array","item","includes","some","arr","f","k","entries","every","mergeDeep","dest","src","s","deepMerge_","property","keys","unique","values","results","u","v","val","push","isEqual","dict","other","dictKeys","otherKeys","key","setEqual","b","size","e","has","hasIntersection","prefixGenerator","prefixes","splitField","wrappedWithAccessors","y","computedPrefixes","_","slice","add","fieldIntersection","undefined","isEmpty","Object","vals","isBoolean","varName","alphanumericS","replace","match","logicalExpr","op","cb","not","and","or","deleteNestedProperty","orderedProps","shift","titleCase","charAt","toUpperCase","substr","accessPathWithDatum","path","datum","pieces","prefix","flatAccessWithDatum","escapePathAccess","string","replacePathInField","replaceAll","find","replacement","RegExp","removePathFromField","accessPathDepth","getFirstDefined","args","arg","idCounter","uniqueId","id","String","resetIdCounter","internalField","name","isInternalField","startsWith","normalizeAngle","angle","isNumeric","value","isNaN","parseFloat"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/util.ts"],"sourcesContent":["import 'array-flat-polyfill';\nimport {default as clone_} from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport {hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig} from 'vega-util';\nimport {isLogicalAnd, isLogicalNot, isLogicalOr, LogicalComposition} from './logical';\n\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n\nexport function never(message: string): never {\n  throw new Error(message);\n}\n\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Pick<T, K> {\n  const copy: any = {};\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Omit<T, K> {\n  const copy = {...(obj as any)};\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n  return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a: any): string | number {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a);\n\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n  return h;\n}\n\nexport function isNullOrFalse(x: any): x is false | null {\n  return x === false || x === null;\n}\n\nexport function contains<T>(array: readonly T[], item: T) {\n  return array.includes(item);\n}\n\n/**\n * Returns true if any item returns true.\n */\nexport function some<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if all items return true.\n */\nexport function every<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Like TS Partial but applies recursively to all properties.\n */\nexport type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\n\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep<T>(dest: T, ...src: readonly DeepPartial<T>[]): T {\n  for (const s of src) {\n    deepMerge_(dest, s ?? {});\n  }\n  return dest;\n}\n\nfunction deepMerge_(dest: any, src: any) {\n  for (const property of keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique<T>(values: readonly T[], f: (item: T) => string | number): T[] {\n  const results: T[] = [];\n  const u = {};\n  let v: string | number;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    u[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n\nexport type Dict<T> = Record<string, T>;\n\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual<T>(dict: Dict<T>, other: Dict<T>) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function setEqual<T>(a: Set<T>, b: Set<T>) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function hasIntersection<T>(a: ReadonlySet<T>, b: ReadonlySet<T>) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function prefixGenerator(a: ReadonlySet<string>): ReadonlySet<string> {\n  const prefixes = new Set<string>();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    for (const y of computedPrefixes) {\n      prefixes.add(y);\n    }\n  }\n  return prefixes;\n}\n\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a: ReadonlySet<string>, b: ReadonlySet<string>): boolean {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj: object) {\n  return keys(obj).length === 0;\n}\n\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\n\nexport const vals = Object.values;\n\nexport const entries = Object.entries;\n\n// Using mapped type to declare a collect of flags for a string literal type S\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\nexport type Flag<S extends string> = {[K in S]: 1};\n\nexport function isBoolean(b: any): b is boolean {\n  return b === true || b === false;\n}\n\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s: string): string {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\n\nexport function logicalExpr<T>(op: LogicalComposition<T>, cb: (...args: readonly any[]) => string): string {\n  if (isLogicalNot(op)) {\n    return `!(${logicalExpr(op.not, cb)})`;\n  } else if (isLogicalAnd(op)) {\n    return `(${op.and.map((and: LogicalComposition<T>) => logicalExpr(and, cb)).join(') && (')})`;\n  } else if (isLogicalOr(op)) {\n    return `(${op.or.map((or: LogicalComposition<T>) => logicalExpr(or, cb)).join(') || (')})`;\n  } else {\n    return cb(op);\n  }\n}\n\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj: any, orderedProps: string[]) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift()!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return isEmpty(obj);\n}\n\nexport function titleCase(s: string) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path: string, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path: string, datum: 'datum' | 'parent' | 'datum.datum' = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n\nfunction escapePathAccess(string: string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path: string) {\n  return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string: string, find: string, replacement: string) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path: string) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path: string) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined<T>(...args: readonly T[]): T | undefined {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n  return undefined;\n}\n\n// variable used to generate id\nlet idCounter = 42;\n\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix?: string) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\n\nexport function internalField(name: string) {\n  return isInternalField(name) ? name : `__${name}`;\n}\n\nexport function isInternalField(name: string) {\n  return name.startsWith('__');\n}\n\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle: number) {\n  if (angle === undefined) {\n    return undefined;\n  }\n  return ((angle % 360) + 360) % 360;\n}\n\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value: number | string): boolean {\n  if (isNumber(value)) {\n    return true;\n  }\n  return !isNaN(value as any) && !isNaN(parseFloat(value));\n}\n"]},"metadata":{},"sourceType":"module"}