{"ast":null,"code":"import * as log from '../../log';\nimport { isPathMark } from '../../mark';\nimport { tooltip } from '../mark/encode';\nconst VORONOI = 'voronoi';\nconst nearest = {\n  defined: selCmpt => {\n    return selCmpt.type === 'point' && selCmpt.nearest;\n  },\n  parse: (model, selCmpt) => {\n    // Scope selection events to the voronoi mark to prevent capturing\n    // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\n    if (selCmpt.events) {\n      for (const s of selCmpt.events) {\n        s.markname = model.getName(VORONOI);\n      }\n    }\n  },\n  marks: (model, selCmpt, marks) => {\n    const {\n      x,\n      y\n    } = selCmpt.project.hasChannel;\n    const markType = model.mark;\n\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      interactive: true,\n      from: {\n        data: model.getName('marks')\n      },\n      encode: {\n        update: Object.assign({\n          fill: {\n            value: 'transparent'\n          },\n          strokeWidth: {\n            value: 0.35\n          },\n          stroke: {\n            value: 'transparent'\n          },\n          isVoronoi: {\n            value: true\n          }\n        }, tooltip(model, {\n          reactiveGeom: true\n        }))\n      },\n      transform: [{\n        type: 'voronoi',\n        x: {\n          expr: x || !y ? 'datum.datum.x || 0' : '0'\n        },\n        y: {\n          expr: y || !x ? 'datum.datum.y || 0' : '0'\n        },\n        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n      }]\n    };\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      var _a;\n\n      const name = (_a = mark.name) !== null && _a !== void 0 ? _a : '';\n\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\nexport default nearest;","map":{"version":3,"mappings":"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","names":["log","isPathMark","tooltip","VORONOI","nearest","defined","selCmpt","type","parse","model","events","s","markname","getName","marks","x","y","project","hasChannel","markType","mark","warn","message","nearestNotSupportForContinuous","cellDef","name","interactive","from","data","encode","update","fill","value","strokeWidth","stroke","isVoronoi","reactiveGeom","transform","expr","size","getSizeSignalRef","index","exists","forEach","i","_a","component","indexOf","splice"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/selection/nearest.ts"],"sourcesContent":["import * as log from '../../log';\nimport {isPathMark} from '../../mark';\nimport {tooltip} from '../mark/encode';\nimport {SelectionCompiler} from '.';\n\nconst VORONOI = 'voronoi';\n\nconst nearest: SelectionCompiler<'point'> = {\n  defined: selCmpt => {\n    return selCmpt.type === 'point' && selCmpt.nearest;\n  },\n\n  parse: (model, selCmpt) => {\n    // Scope selection events to the voronoi mark to prevent capturing\n    // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\n    if (selCmpt.events) {\n      for (const s of selCmpt.events) {\n        s.markname = model.getName(VORONOI);\n      }\n    }\n  },\n\n  marks: (model, selCmpt, marks) => {\n    const {x, y} = selCmpt.project.hasChannel;\n    const markType = model.mark;\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      interactive: true,\n      from: {data: model.getName('marks')},\n      encode: {\n        update: {\n          fill: {value: 'transparent'},\n          strokeWidth: {value: 0.35},\n          stroke: {value: 'transparent'},\n          isVoronoi: {value: true},\n          ...tooltip(model, {reactiveGeom: true})\n        }\n      },\n      transform: [\n        {\n          type: 'voronoi',\n          x: {expr: x || !y ? 'datum.datum.x || 0' : '0'},\n          y: {expr: y || !x ? 'datum.datum.y || 0' : '0'},\n          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n        }\n      ]\n    };\n\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      const name = mark.name ?? '';\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\n\nexport default nearest;\n"]},"metadata":{},"sourceType":"module"}