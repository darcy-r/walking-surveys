{"ast":null,"code":"// DateTime definition object\nimport { isNumber, isObject } from 'vega-util';\nimport * as log from './log';\nimport { TIMEUNIT_PARTS } from './timeunit';\nimport { duplicate, isNumeric, keys } from './util';\nexport function isDateTime(o) {\n  if (o && isObject(o)) {\n    for (const part of TIMEUNIT_PARTS) {\n      if (part in o) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\nfunction normalizeQuarter(q) {\n  if (isNumeric(q)) {\n    q = +q;\n  }\n\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n    return q - 1;\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m) {\n  if (isNumeric(m)) {\n    m = +m;\n  }\n\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  } else {\n    const lowerM = m.toLowerCase();\n    const monthIndex = MONTHS.indexOf(lowerM);\n\n    if (monthIndex !== -1) {\n      return monthIndex; // 0 for january, ...\n    }\n\n    const shortM = lowerM.substr(0, 3);\n    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex;\n    } // Invalid month\n\n\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d) {\n  if (isNumeric(d)) {\n    d = +d;\n  }\n\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  } else {\n    const lowerD = d.toLowerCase();\n    const dayIndex = DAYS.indexOf(lowerD);\n\n    if (dayIndex !== -1) {\n      return dayIndex; // 0 for january, ...\n    }\n\n    const shortD = lowerD.substr(0, 3);\n    const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n    if (shortDayIndex !== -1) {\n      return shortDayIndex;\n    } // Invalid day\n\n\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\n\n\nfunction dateTimeParts(d, normalize) {\n  const parts = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else {\n    // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n    parts.push(2012);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : `${quarter}*3`);\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : `${day}+1`);\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  } // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n\n\n  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n    const unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n\n  return parts;\n}\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\n\n\nexport function dateTimeToExpr(d) {\n  const parts = dateTimeParts(d, true);\n  const string = parts.join(', ');\n\n  if (d.utc) {\n    return `utc(${string})`;\n  } else {\n    return `datetime(${string})`;\n  }\n}\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\n\nexport function dateTimeExprToExpr(d) {\n  const parts = dateTimeParts(d, false);\n  const string = parts.join(', ');\n\n  if (d.utc) {\n    return `utc(${string})`;\n  } else {\n    return `datetime(${string})`;\n  }\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\n\nexport function dateTimeToTimestamp(d) {\n  const parts = dateTimeParts(d, true);\n\n  if (d.utc) {\n    return +new Date(Date.UTC(...parts));\n  } else {\n    return +new Date(...parts);\n  }\n}","map":{"version":3,"mappings":"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","names":["isNumber","isObject","log","TIMEUNIT_PARTS","duplicate","isNumeric","keys","isDateTime","o","part","MONTHS","SHORT_MONTHS","map","m","substr","DAYS","SHORT_DAYS","d","normalizeQuarter","q","warn","message","invalidTimeUnit","Error","normalizeMonth","lowerM","toLowerCase","monthIndex","indexOf","shortM","shortMonthIndex","normalizeDay","lowerD","dayIndex","shortD","shortDayIndex","dateTimeParts","normalize","parts","day","undefined","length","droppedDay","year","push","month","quarter","date","timeUnit","unit","dateTimeToExpr","string","join","utc","dateTimeExprToExpr","dateTimeToTimestamp","Date","UTC"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/datetime.ts"],"sourcesContent":["// DateTime definition object\n\nimport {isNumber, isObject} from 'vega-util';\nimport * as log from './log';\nimport {TIMEUNIT_PARTS} from './timeunit';\nimport {duplicate, isNumeric, keys} from './util';\n\n/**\n * @minimum 1\n * @maximum 12\n * @TJS-type integer\n */\nexport type Month = number;\n\n/**\n * @minimum 1\n * @maximum 7\n */\nexport type Day = number;\n\n/**\n * Object for defining datetime in Vega-Lite Filter.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n * We accept string for month and day names.\n */\nexport interface DateTime {\n  /**\n   * Integer value representing the year.\n   * @TJS-type integer\n   */\n  year?: number;\n\n  /**\n   * Integer value representing the quarter of the year (from 1-4).\n   * @minimum 1\n   * @maximum 4\n   * @TJS-type integer\n   */\n  quarter?: number;\n\n  /**\n   * One of:\n   * (1) integer value representing the month from `1`-`12`. `1` represents January;\n   * (2) case-insensitive month name (e.g., `\"January\"`);\n   * (3) case-insensitive, 3-character short month name (e.g., `\"Jan\"`).\n   */\n  month?: Month | string;\n\n  /**\n   * Integer value representing the date (day of the month) from 1-31.\n   * @minimum 1\n   * @maximum 31\n   * @TJS-type integer\n   */\n  date?: number;\n\n  /**\n   * Value representing the day of a week. This can be one of:\n   * (1) integer value -- `1` represents Monday;\n   * (2) case-insensitive day name (e.g., `\"Monday\"`);\n   * (3) case-insensitive, 3-character short day name (e.g., `\"Mon\"`).\n   *\n   * **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.\n   */\n  day?: Day | string;\n\n  /**\n   * Integer value representing the hour of a day from 0-23.\n   * @minimum 0\n   * @maximum 24\n   * @TJS-type integer\n   */\n  hours?: number;\n\n  /**\n   * Integer value representing the minute segment of time from 0-59.\n   * @minimum 0\n   * @maximum 60\n   * @TJS-type integer\n   */\n  minutes?: number;\n\n  /**\n   * Integer value representing the second segment (0-59) of a time value\n   * @minimum 0\n   * @maximum 60\n   * @TJS-type integer\n   */\n  seconds?: number;\n\n  /**\n   * Integer value representing the millisecond segment of time.\n   * @minimum 0\n   * @maximum 1000\n   * @TJS-type integer\n   */\n  milliseconds?: number;\n\n  /**\n   * A boolean flag indicating if date time is in utc time. If false, the date time is in local time\n   */\n  utc?: boolean;\n}\n\n/**\n * Internal Object for defining datetime expressions.\n * This is an expression version of DateTime.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n */\nexport interface DateTimeExpr {\n  year?: string;\n  quarter?: string;\n  month?: string;\n  date?: string;\n  day?: string;\n  hours?: string;\n  minutes?: string;\n  seconds?: string;\n  milliseconds?: string;\n  utc?: boolean;\n}\n\nexport function isDateTime(o: any): o is DateTime {\n  if (o && isObject(o)) {\n    for (const part of TIMEUNIT_PARTS) {\n      if (part in o) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\n\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\nfunction normalizeQuarter(q: number | string): number {\n  if (isNumeric(q)) {\n    q = +q;\n  }\n\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    }\n    // We accept 1-based quarter, so need to readjust to 0-based quarter\n    return q - 1;\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m: string | number): number {\n  if (isNumeric(m)) {\n    m = +m;\n  }\n\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  } else {\n    const lowerM = m.toLowerCase();\n    const monthIndex = MONTHS.indexOf(lowerM);\n    if (monthIndex !== -1) {\n      return monthIndex; // 0 for january, ...\n    }\n    const shortM = lowerM.substr(0, 3);\n    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex;\n    }\n\n    // Invalid month\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d: string | number): number {\n  if (isNumeric(d)) {\n    d = +d;\n  }\n\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  } else {\n    const lowerD = d.toLowerCase();\n    const dayIndex = DAYS.indexOf(lowerD);\n    if (dayIndex !== -1) {\n      return dayIndex; // 0 for january, ...\n    }\n    const shortD = lowerD.substr(0, 3);\n    const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n    if (shortDayIndex !== -1) {\n      return shortDayIndex;\n    }\n    // Invalid day\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\nfunction dateTimeParts(d: DateTime | DateTimeExpr, normalize: boolean) {\n  const parts: (string | number)[] = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else {\n    // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega\n    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).\n    parts.push(2012);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : `${quarter}*3`);\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : `${day}+1`);\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  }\n\n  // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds'] as const) {\n    const unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n\n  return parts;\n}\n\n/**\n * Return Vega expression for a date time.\n *\n * @param d the date time.\n * @returns the Vega expression.\n */\nexport function dateTimeToExpr(d: DateTime) {\n  const parts: (string | number)[] = dateTimeParts(d, true);\n\n  const string = parts.join(', ');\n\n  if (d.utc) {\n    return `utc(${string})`;\n  } else {\n    return `datetime(${string})`;\n  }\n}\n\n/**\n * Return Vega expression for a date time expression.\n *\n * @param d the internal date time object with expression.\n * @returns the Vega expression.\n */\nexport function dateTimeExprToExpr(d: DateTimeExpr) {\n  const parts: (string | number)[] = dateTimeParts(d, false);\n\n  const string = parts.join(', ');\n\n  if (d.utc) {\n    return `utc(${string})`;\n  } else {\n    return `datetime(${string})`;\n  }\n}\n\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\nexport function dateTimeToTimestamp(d: DateTime) {\n  const parts: (string | number)[] = dateTimeParts(d, true);\n\n  if (d.utc) {\n    return +new Date(Date.UTC(...(parts as [any, any])));\n  } else {\n    return +new Date(...(parts as [any]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}