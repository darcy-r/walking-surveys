{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, useTooltipInPortal, TooltipWithBounds } from '@visx/tooltip';\nimport { localPoint } from '@visx/event'; // Define the graph dimensions and margins\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 460;\nconst height = 490;\nconst margin = {\n  top: 0,\n  bottom: 30,\n  left: 0,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph;\n\nconst temperatureAccessor = d => d.temperature_apparent; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")],\n  // Math.max(...data.map(x))\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400] // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38] // again TODO: fetch min and max apparent temperatures over API\n\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\n\nconst temperatureColourScale = d => interpolateRdYlBu(getTemperatureStandardised(d)); // Finally we'll embed it all in an SVG\n\n\nfunction ScatterPlot(props) {\n  _s();\n\n  // tooltip code\n  const {\n    tooltipData,\n    tooltipLeft,\n    tooltipTop,\n    tooltipOpen,\n    showTooltip,\n    hideTooltip\n  } = useTooltip(); // If you don't want to use a Portal, simply replace `TooltipInPortal` below with\n  // `Tooltip` or `TooltipWithBounds` and remove `containerRef`\n\n  const {\n    containerRef,\n    TooltipInPortal\n  } = useTooltipInPortal({\n    // use TooltipWithBounds\n    detectBounds: true,\n    // when tooltip containers are scrolled, this will correctly update the Tooltip position\n    scroll: true\n  });\n\n  const handleMouseOver = (event, datum) => {\n    const coords = localPoint(event.target.ownerSVGElement, event);\n    showTooltip({\n      tooltipLeft: coords.x,\n      tooltipTop: coords.y,\n      tooltipData: datum\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter-plot-chart\",\n      ref: \"my-container-ref\",\n      children: [/*#__PURE__*/_jsxDEV(GridRows, {\n        scale: yScale,\n        width: xMax,\n        height: yMax,\n        stroke: \"#e0e0e0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n        scale: xScale,\n        width: xMax,\n        height: yMax,\n        stroke: \"#e0e0e0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n        top: yMax,\n        scale: xScale,\n        numTicks: width > 461 ? 12 : 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n        scale: yScale,\n        numTicks: height > 491 ? 12 : 8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"-70\",\n        y: \"15\",\n        transform: \"rotate(-90)\",\n        fontSize: 10,\n        children: \"People per hour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), props.data.map((d, i) => {\n        return /*#__PURE__*/_jsxDEV(Group, {\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            cx: xPoint(d),\n            cy: yPoint(d) // {yMax - barHeight}\n            ,\n            r: 6,\n            fill: temperatureColourScale(d),\n            onMouseOver: handleMouseOver,\n            onMouseOut: hideTooltip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, `bar-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), tooltipOpen && /*#__PURE__*/_jsxDEV(TooltipInPortal // set this to random so it correctly updates with parent bounds\n    , {\n      top: tooltipTop,\n      left: tooltipLeft,\n      children: [\"Data value \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: tooltipData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }, this)]\n    }, Math.random(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ScatterPlot, \"Z2cXZeFHFrHqgwLwH0ZrErcZEdo=\", false, function () {\n  return [useTooltip, useTooltipInPortal];\n});\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","Group","Circle","scaleLinear","scaleTime","scaleQuantize","AxisLeft","AxisBottom","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","useTooltip","useTooltipInPortal","TooltipWithBounds","localPoint","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","temperatureAccessor","temperature_apparent","xScale","range","round","domain","padding","yScale","temperatureRescaler","compose","scale","accessor","data","xPoint","yPoint","getTemperatureStandardised","temperatureColourScale","ScatterPlot","props","tooltipData","tooltipLeft","tooltipTop","tooltipOpen","showTooltip","hideTooltip","containerRef","TooltipInPortal","detectBounds","scroll","handleMouseOver","event","datum","coords","target","ownerSVGElement","map","i","Math","random"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, useTooltipInPortal, TooltipWithBounds } from '@visx/tooltip';\nimport { localPoint } from '@visx/event';\n\n// Define the graph dimensions and margins\nconst width = 460;\nconst height = 490;\nconst margin = { top: 0, bottom: 30, left: 0, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\nconst temperatureAccessor = d => d.temperature_apparent;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-12T00:00:00\")], // Math.max(...data.map(x))\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400], // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38], // again TODO: fetch min and max apparent temperatures over API\n})\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\nconst temperatureColourScale = (d) => interpolateRdYlBu(getTemperatureStandardised(d))\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  // tooltip code\n  const {\n    tooltipData,\n    tooltipLeft,\n    tooltipTop,\n    tooltipOpen,\n    showTooltip,\n    hideTooltip,\n  } = useTooltip();\n\n  // If you don't want to use a Portal, simply replace `TooltipInPortal` below with\n  // `Tooltip` or `TooltipWithBounds` and remove `containerRef`\n  const { containerRef, TooltipInPortal } = useTooltipInPortal({\n    // use TooltipWithBounds\n    detectBounds: true,\n    // when tooltip containers are scrolled, this will correctly update the Tooltip position\n    scroll: true,\n  })\n\n  const handleMouseOver = (event, datum) => {\n    const coords = localPoint(event.target.ownerSVGElement, event);\n    showTooltip({\n      tooltipLeft: coords.x,\n      tooltipTop: coords.y,\n      tooltipData: datum\n    });\n  };\n  return (\n    <div>\n      <svg width={width} height={height} className=\"scatter-plot-chart\" ref=\"my-container-ref\">\n      <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n      <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n      <AxisBottom top={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n      <AxisLeft scale={yScale} numTicks={height > 491 ? 12 : 8}/>\n      <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n        People per hour\n      </text>\n      {props.data.map((d, i) => {\n        return (\n          <Group key={`bar-${i}`}>\n            <Circle\n              cx={xPoint(d)}\n              cy={yPoint(d)} // {yMax - barHeight}\n              r={6}\n              fill={temperatureColourScale(d)}\n              onMouseOver={handleMouseOver}\n              onMouseOut={hideTooltip}\n            />\n          </Group>\n        );\n      })}\n      </svg>\n      {tooltipOpen && (\n        <TooltipInPortal\n          // set this to random so it correctly updates with parent bounds\n          key={Math.random()}\n          top={tooltipTop}\n          left={tooltipLeft}\n        >\n          Data value <strong>{tooltipData}</strong>\n        </TooltipInPortal>\n      )}\n    </div>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}