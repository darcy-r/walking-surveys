{"ast":null,"code":"import { signalOrValueRef } from '../../common';\nimport { midPoint } from './valueref';\nexport function positionOffset(_ref) {\n  let {\n    channel: baseChannel,\n    markDef,\n    encoding = {},\n    model,\n    bandPosition\n  } = _ref;\n  const channel = `${baseChannel}Offset`; // Need to cast as the type can't be inferred automatically\n\n  const defaultValue = markDef[channel];\n  const channelDef = encoding[channel];\n\n  if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n    const ref = midPoint({\n      channel: channel,\n      channelDef,\n      markDef,\n      config: model === null || model === void 0 ? void 0 : model.config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef: signalOrValueRef(defaultValue),\n      bandPosition\n    });\n    return {\n      offsetType: 'encoding',\n      offset: ref\n    };\n  }\n\n  const markDefOffsetValue = markDef[channel];\n\n  if (markDefOffsetValue) {\n    return {\n      offsetType: 'visual',\n      offset: markDefOffsetValue\n    };\n  }\n\n  return {};\n}","map":{"version":3,"mappings":"AAQA,SAAQA,gBAAR,QAA+B,cAA/B;AAEA,SAAQC,QAAR,QAAuB,YAAvB;AAOA,OAAM,SAAUC,cAAV,OAYL;EAAA,IAZ8B;IAC7BC,OAAO,EAAEC,WADoB;IAE7BC,OAF6B;IAG7BC,QAAQ,GAAG,EAHkB;IAI7BC,KAJ6B;IAK7BC;EAL6B,CAY9B;EACC,MAAML,OAAO,GAAG,GAAGC,WAAW,QAA9B,CADD,CASsB;;EAErB,MAAMK,YAAY,GAAGJ,OAAO,CAACF,OAAD,CAA5B;EACA,MAAMO,UAAU,GAAGJ,QAAQ,CAACH,OAAD,CAA3B;;EAEA,IAAI,CAACA,OAAO,KAAK,SAAZ,IAAyBA,OAAO,KAAK,SAAtC,KAAoDO,UAAxD,EAAoE;IAClE,MAAMC,GAAG,GAAGV,QAAQ,CAAC;MACnBE,OAAO,EAAEA,OADU;MAEnBO,UAFmB;MAGnBL,OAHmB;MAInBO,MAAM,EAAEL,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEK,MAJI;MAKnBC,SAAS,EAAEN,KAAK,CAACM,SAAN,CAAgBV,OAAhB,CALQ;MAMnBW,KAAK,EAAEP,KAAK,CAACQ,iBAAN,CAAwBZ,OAAxB,CANY;MAOnBa,KAAK,EAAE,IAPY;MAQnBC,UAAU,EAAEjB,gBAAgB,CAACS,YAAD,CART;MASnBD;IATmB,CAAD,CAApB;IAWA,OAAO;MAACU,UAAU,EAAE,UAAb;MAAyBC,MAAM,EAAER;IAAjC,CAAP;EACD;;EAED,MAAMS,kBAAkB,GAAGf,OAAO,CAACF,OAAD,CAAlC;;EACA,IAAIiB,kBAAJ,EAAwB;IACtB,OAAO;MAACF,UAAU,EAAE,QAAb;MAAuBC,MAAM,EAAEC;IAA/B,CAAP;EACD;;EAED,OAAO,EAAP;AACD","names":["signalOrValueRef","midPoint","positionOffset","channel","baseChannel","markDef","encoding","model","bandPosition","defaultValue","channelDef","ref","config","scaleName","scale","getScaleComponent","stack","defaultRef","offsetType","offset","markDefOffsetValue"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/encode/offset.ts"],"sourcesContent":["/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport {SignalRef} from 'vega';\nimport {PolarPositionChannel, PositionChannel} from '../../../channel';\nimport {Encoding} from '../../../encoding';\nimport {Mark, MarkDef} from '../../../mark';\nimport {VgValueRef} from '../../../vega.schema';\nimport {signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {midPoint} from './valueref';\n\nexport interface Offset {\n  offsetType?: 'visual' | 'encoding';\n  offset?: number | VgValueRef;\n}\n\nexport function positionOffset({\n  channel: baseChannel,\n  markDef,\n  encoding = {},\n  model,\n  bandPosition\n}: {\n  channel: PositionChannel | PolarPositionChannel;\n  markDef: MarkDef<Mark, SignalRef>;\n  encoding?: Encoding<string>;\n  model?: UnitModel;\n  bandPosition?: number;\n}): Offset {\n  const channel = `${baseChannel}Offset` as\n    | 'xOffset'\n    | 'yOffset'\n    | 'x2Offset'\n    | 'y2Offset'\n    | 'thetaOffset'\n    | 'radiusOffset'\n    | 'theta2Offset'\n    | 'radius2Offset'; // Need to cast as the type can't be inferred automatically\n\n  const defaultValue = markDef[channel];\n  const channelDef = encoding[channel];\n\n  if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n    const ref = midPoint({\n      channel: channel,\n      channelDef,\n      markDef,\n      config: model?.config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef: signalOrValueRef(defaultValue),\n      bandPosition\n    });\n    return {offsetType: 'encoding', offset: ref};\n  }\n\n  const markDefOffsetValue = markDef[channel];\n  if (markDefOffsetValue) {\n    return {offsetType: 'visual', offset: markDefOffsetValue};\n  }\n\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}