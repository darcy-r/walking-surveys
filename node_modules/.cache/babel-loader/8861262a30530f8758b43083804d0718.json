{"ast":null,"code":"import { array, isString } from 'vega-util';\nimport * as log from '../../log';\nimport { isLookupData, isLookupSelection } from '../../transform';\nimport { duplicate, hash, varName } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nimport { DataSourceType } from '../../data';\nexport class LookupNode extends DataFlowNode {\n  constructor(parent, transform, secondary) {\n    super(parent);\n    this.transform = transform;\n    this.secondary = secondary;\n  }\n\n  clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n\n  static make(parent, model, transform, counter) {\n    const sources = model.component.data.sources;\n    const {\n      from\n    } = transform;\n    let fromOutputNode = null;\n\n    if (isLookupData(from)) {\n      let fromSource = findSource(from.data, sources);\n\n      if (!fromSource) {\n        fromSource = new SourceNode(from.data);\n        sources.push(fromSource);\n      }\n\n      const fromOutputName = model.getName(`lookup_${counter}`);\n      fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n      model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n    } else if (isLookupSelection(from)) {\n      const selName = from.param;\n      transform = Object.assign({\n        as: selName\n      }, transform);\n      let selCmpt;\n\n      try {\n        selCmpt = model.getSelectionComponent(varName(selName), selName);\n      } catch (e) {\n        throw new Error(log.message.cannotLookupVariableParameter(selName));\n      }\n\n      fromOutputNode = selCmpt.materialized;\n\n      if (!fromOutputNode) {\n        throw new Error(log.message.noSameUnitLookup(selName));\n      }\n    }\n\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  dependentFields() {\n    return new Set([this.transform.lookup]);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n  }\n\n  hash() {\n    return `Lookup ${hash({\n      transform: this.transform,\n      secondary: this.secondary\n    })}`;\n  }\n\n  assemble() {\n    let foreign;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = Object.assign({\n        values: this.transform.from.fields\n      }, this.transform.as ? {\n        as: array(this.transform.as)\n      } : {});\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return Object.assign(Object.assign({\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup]\n    }, foreign), this.transform.default ? {\n      default: this.transform.default\n    } : {});\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,WAA9B;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,SAAQC,YAAR,EAAsBC,iBAAtB,QAA+D,iBAA/D;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,OAAzB,QAAuC,YAAvC;AAEA,SAAQC,YAAR,EAAsBC,UAAtB,QAAuC,YAAvC;AACA,SAAQC,UAAR,QAAyB,SAAzB;AACA,SAAQC,UAAR,QAAyB,UAAzB;AACA,SAAQC,cAAR,QAA6B,YAA7B;AAEA,OAAM,MAAOC,UAAP,SAA0BL,YAA1B,CAAsC;EAK1CM,YAAYC,MAAZ,EAAkDC,SAAlD,EAA8FC,SAA9F,EAA+G;IAC7G,MAAMF,MAAN;IADgD;IAA4C;EAE7F;;EANMG,KAAK;IACV,OAAO,IAAIL,UAAJ,CAAe,IAAf,EAAqBR,SAAS,CAAC,KAAKW,SAAN,CAA9B,EAAgD,KAAKC,SAArD,CAAP;EACD;;EAMiB,OAAJE,IAAI,CAACJ,MAAD,EAAuBK,KAAvB,EAAqCJ,SAArC,EAAiEK,OAAjE,EAAgF;IAChG,MAAMC,OAAO,GAAGF,KAAK,CAACG,SAAN,CAAgBC,IAAhB,CAAqBF,OAArC;IACA,MAAM;MAACG;IAAD,IAAST,SAAf;IACA,IAAIU,cAAc,GAAG,IAArB;;IAEA,IAAIvB,YAAY,CAACsB,IAAD,CAAhB,EAAwB;MACtB,IAAIE,UAAU,GAAGjB,UAAU,CAACe,IAAI,CAACD,IAAN,EAAYF,OAAZ,CAA3B;;MAEA,IAAI,CAACK,UAAL,EAAiB;QACfA,UAAU,GAAG,IAAIhB,UAAJ,CAAec,IAAI,CAACD,IAApB,CAAb;QACAF,OAAO,CAACM,IAAR,CAAaD,UAAb;MACD;;MAED,MAAME,cAAc,GAAGT,KAAK,CAACU,OAAN,CAAc,UAAUT,OAAO,EAA/B,CAAvB;MACAK,cAAc,GAAG,IAAIjB,UAAJ,CACfkB,UADe,EAEfE,cAFe,EAGfjB,cAAc,CAACmB,MAHA,EAIfX,KAAK,CAACG,SAAN,CAAgBC,IAAhB,CAAqBQ,mBAJN,CAAjB;MAMAZ,KAAK,CAACG,SAAN,CAAgBC,IAAhB,CAAqBS,WAArB,CAAiCJ,cAAjC,IAAmDH,cAAnD;IACD,CAhBD,MAgBO,IAAItB,iBAAiB,CAACqB,IAAD,CAArB,EAA6B;MAClC,MAAMS,OAAO,GAAGT,IAAI,CAACU,KAArB;MACAnB,SAAS;QAAIoB,EAAE,EAAEF;MAAR,GAAoBlB,SAApB,CAAT;MACA,IAAIqB,OAAJ;;MAEA,IAAI;QACFA,OAAO,GAAGjB,KAAK,CAACkB,qBAAN,CAA4B/B,OAAO,CAAC2B,OAAD,CAAnC,EAA8CA,OAA9C,CAAV;MACD,CAFD,CAEE,OAAOK,CAAP,EAAU;QACV,MAAM,IAAIC,KAAJ,CAAUtC,GAAG,CAACuC,OAAJ,CAAYC,6BAAZ,CAA0CR,OAA1C,CAAV,CAAN;MACD;;MAEDR,cAAc,GAAGW,OAAO,CAACM,YAAzB;;MACA,IAAI,CAACjB,cAAL,EAAqB;QACnB,MAAM,IAAIc,KAAJ,CAAUtC,GAAG,CAACuC,OAAJ,CAAYG,gBAAZ,CAA6BV,OAA7B,CAAV,CAAN;MACD;IACF;;IAED,OAAO,IAAIrB,UAAJ,CAAeE,MAAf,EAAuBC,SAAvB,EAAkCU,cAAc,CAACmB,SAAf,EAAlC,CAAP;EACD;;EAEMC,eAAe;IACpB,OAAO,IAAIC,GAAJ,CAAQ,CAAC,KAAK/B,SAAL,CAAegC,MAAhB,CAAR,CAAP;EACD;;EAEMC,cAAc;IACnB,OAAO,IAAIF,GAAJ,CAAQ,KAAK/B,SAAL,CAAeoB,EAAf,GAAoBpC,KAAK,CAAC,KAAKgB,SAAL,CAAeoB,EAAhB,CAAzB,GAA+C,KAAKpB,SAAL,CAAeS,IAAf,CAAoByB,MAA3E,CAAP;EACD;;EAEM5C,IAAI;IACT,OAAO,UAAUA,IAAI,CAAC;MAACU,SAAS,EAAE,KAAKA,SAAjB;MAA4BC,SAAS,EAAE,KAAKA;IAA5C,CAAD,CAAwD,EAA7E;EACD;;EAEMkC,QAAQ;IACb,IAAIC,OAAJ;;IAEA,IAAI,KAAKpC,SAAL,CAAeS,IAAf,CAAoByB,MAAxB,EAAgC;MAC9B;MACAE,OAAO;QACLC,MAAM,EAAE,KAAKrC,SAAL,CAAeS,IAAf,CAAoByB;MADvB,GAED,KAAKlC,SAAL,CAAeoB,EAAf,GAAoB;QAACA,EAAE,EAAEpC,KAAK,CAAC,KAAKgB,SAAL,CAAeoB,EAAhB;MAAV,CAApB,GAAqD,EAFpD,CAAP;IAID,CAND,MAMO;MACL;MACA,IAAIkB,MAAM,GAAG,KAAKtC,SAAL,CAAeoB,EAA5B;;MACA,IAAI,CAACnC,QAAQ,CAACqD,MAAD,CAAb,EAAuB;QACrBpD,GAAG,CAACqD,IAAJ,CAASrD,GAAG,CAACuC,OAAJ,CAAYe,kBAArB;QACAF,MAAM,GAAG,SAAT;MACD;;MAEDF,OAAO,GAAG;QACRhB,EAAE,EAAE,CAACkB,MAAD;MADI,CAAV;IAGD;;IAED;MACEG,IAAI,EAAE,QADR;MAEEhC,IAAI,EAAE,KAAKR,SAFb;MAGEyC,GAAG,EAAE,KAAK1C,SAAL,CAAeS,IAAf,CAAoBiC,GAH3B;MAIER,MAAM,EAAE,CAAC,KAAKlC,SAAL,CAAegC,MAAhB;IAJV,GAKKI,OALL,GAMM,KAAKpC,SAAL,CAAe2C,OAAf,GAAyB;MAACA,OAAO,EAAE,KAAK3C,SAAL,CAAe2C;IAAzB,CAAzB,GAA6D,EANnE;EAQD;;AA5FyC","names":["array","isString","log","isLookupData","isLookupSelection","duplicate","hash","varName","DataFlowNode","OutputNode","findSource","SourceNode","DataSourceType","LookupNode","constructor","parent","transform","secondary","clone","make","model","counter","sources","component","data","from","fromOutputNode","fromSource","push","fromOutputName","getName","Lookup","outputNodeRefCounts","outputNodes","selName","param","as","selCmpt","getSelectionComponent","e","Error","message","cannotLookupVariableParameter","materialized","noSameUnitLookup","getSource","dependentFields","Set","lookup","producedFields","fields","assemble","foreign","values","asName","warn","NO_FIELDS_NEEDS_AS","type","key","default"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/data/lookup.ts"],"sourcesContent":["import {LookupTransform as VgLookupTransform} from 'vega';\nimport {array, isString} from 'vega-util';\nimport * as log from '../../log';\nimport {isLookupData, isLookupSelection, LookupTransform} from '../../transform';\nimport {duplicate, hash, varName} from '../../util';\nimport {Model} from '../model';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {findSource} from './parse';\nimport {SourceNode} from './source';\nimport {DataSourceType} from '../../data';\n\nexport class LookupNode extends DataFlowNode {\n  public clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n\n  constructor(parent: DataFlowNode, public readonly transform: LookupTransform, public readonly secondary: string) {\n    super(parent);\n  }\n\n  public static make(parent: DataFlowNode, model: Model, transform: LookupTransform, counter: number) {\n    const sources = model.component.data.sources;\n    const {from} = transform;\n    let fromOutputNode = null;\n\n    if (isLookupData(from)) {\n      let fromSource = findSource(from.data, sources);\n\n      if (!fromSource) {\n        fromSource = new SourceNode(from.data);\n        sources.push(fromSource);\n      }\n\n      const fromOutputName = model.getName(`lookup_${counter}`);\n      fromOutputNode = new OutputNode(\n        fromSource,\n        fromOutputName,\n        DataSourceType.Lookup,\n        model.component.data.outputNodeRefCounts\n      );\n      model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n    } else if (isLookupSelection(from)) {\n      const selName = from.param;\n      transform = {as: selName, ...transform};\n      let selCmpt;\n\n      try {\n        selCmpt = model.getSelectionComponent(varName(selName), selName);\n      } catch (e) {\n        throw new Error(log.message.cannotLookupVariableParameter(selName));\n      }\n\n      fromOutputNode = selCmpt.materialized;\n      if (!fromOutputNode) {\n        throw new Error(log.message.noSameUnitLookup(selName));\n      }\n    }\n\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.lookup]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n  }\n\n  public hash() {\n    return `Lookup ${hash({transform: this.transform, secondary: this.secondary})}`;\n  }\n\n  public assemble(): VgLookupTransform {\n    let foreign: Partial<VgLookupTransform>;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = {\n        values: this.transform.from.fields,\n        ...(this.transform.as ? {as: array(this.transform.as)} : {})\n      };\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return {\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup],\n      ...foreign,\n      ...(this.transform.default ? {default: this.transform.default} : {})\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}