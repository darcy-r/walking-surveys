{"ast":null,"code":"import { getFormatMixins, isFieldOrDatumDef, isValueDef } from '../../../channeldef';\nimport { signalOrValueRef } from '../../common';\nimport { formatSignalRef } from '../../format';\nimport { wrapCondition } from './conditional';\nexport function text(model) {\n  let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n  const channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\nexport function textRef(channelDef, config) {\n  let expr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'datum';\n\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return signalOrValueRef(channelDef.value);\n    }\n\n    if (isFieldOrDatumDef(channelDef)) {\n      const {\n        format,\n        formatType\n      } = getFormatMixins(channelDef);\n      return formatSignalRef({\n        fieldOrDatumDef: channelDef,\n        format,\n        formatType,\n        expr,\n        config\n      });\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,eAAR,EAAyBC,iBAAzB,EAA4CC,UAA5C,QAA6D,qBAA7D;AAIA,SAAQC,gBAAR,QAA+B,cAA/B;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAEA,SAAQC,aAAR,QAA4B,eAA5B;AAEA,OAAM,SAAUC,IAAV,CAAeC,KAAf,EAA0F;EAAA,IAAzDC,OAAyD,uEAAN,MAAM;EAC9F,MAAMC,UAAU,GAAGF,KAAK,CAACG,QAAN,CAAeF,OAAf,CAAnB;EACA,OAAOH,aAAa,CAACE,KAAD,EAAQE,UAAR,EAAoBD,OAApB,EAA6BG,IAAI,IAAIC,OAAO,CAACD,IAAD,EAAOJ,KAAK,CAACM,MAAb,CAA5C,CAApB;AACD;AAED,OAAM,SAAUD,OAAV,CACJH,UADI,EAEJI,MAFI,EAGmC;EAAA,IAAvCC,IAAuC,uEAAP,OAAO;;EAEvC;EACA,IAAIL,UAAJ,EAAgB;IACd,IAAIP,UAAU,CAACO,UAAD,CAAd,EAA4B;MAC1B,OAAON,gBAAgB,CAACM,UAAU,CAACM,KAAZ,CAAvB;IACD;;IACD,IAAId,iBAAiB,CAACQ,UAAD,CAArB,EAAmC;MACjC,MAAM;QAACO,MAAD;QAASC;MAAT,IAAuBjB,eAAe,CAACS,UAAD,CAA5C;MACA,OAAOL,eAAe,CAAC;QAACc,eAAe,EAAET,UAAlB;QAA8BO,MAA9B;QAAsCC,UAAtC;QAAkDH,IAAlD;QAAwDD;MAAxD,CAAD,CAAtB;IACD;EACF;;EACD,OAAOM,SAAP;AACD","names":["getFormatMixins","isFieldOrDatumDef","isValueDef","signalOrValueRef","formatSignalRef","wrapCondition","text","model","channel","channelDef","encoding","cDef","textRef","config","expr","value","format","formatType","fieldOrDatumDef","undefined"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/mark/encode/text.ts"],"sourcesContent":["import {getFormatMixins, isFieldOrDatumDef, isValueDef} from '../../../channeldef';\nimport {Config} from '../../../config';\nimport {Encoding} from '../../../encoding';\nimport {VgValueRef} from '../../../vega.schema';\nimport {signalOrValueRef} from '../../common';\nimport {formatSignalRef} from '../../format';\nimport {UnitModel} from '../../unit';\nimport {wrapCondition} from './conditional';\n\nexport function text(model: UnitModel, channel: 'text' | 'href' | 'url' | 'description' = 'text') {\n  const channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\n\nexport function textRef(\n  channelDef: Encoding<string>['text' | 'tooltip'],\n  config: Config,\n  expr: 'datum' | 'datum.datum' = 'datum'\n): VgValueRef {\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return signalOrValueRef(channelDef.value);\n    }\n    if (isFieldOrDatumDef(channelDef)) {\n      const {format, formatType} = getFormatMixins(channelDef);\n      return formatSignalRef({fieldOrDatumDef: channelDef, format, formatType, expr, config});\n    }\n  }\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}