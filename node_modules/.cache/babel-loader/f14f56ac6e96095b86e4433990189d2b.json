{"ast":null,"code":"import { isString } from 'vega-util';\nimport { fieldFilterExpression, isSelectionPredicate } from '../predicate';\nimport { logicalExpr } from '../util';\nimport { parseSelectionPredicate } from './selection/parse';\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\n\nexport function expression(model, filterOp, node) {\n  return logicalExpr(filterOp, predicate => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return parseSelectionPredicate(model, predicate, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAQA,QAAR,QAAuB,WAAvB;AAEA,SAAQC,qBAAR,EAA+BC,oBAA/B,QAAqE,cAArE;AACA,SAAQC,WAAR,QAA0B,SAA1B;AAGA,SAAQC,uBAAR,QAAsC,mBAAtC;AAEA;;;AAGA;;AACA,OAAM,SAAUC,UAAV,CAAqBC,KAArB,EAAmCC,QAAnC,EAA4EC,IAA5E,EAA+F;EACnG,OAAOL,WAAW,CAACI,QAAD,EAAYE,SAAD,IAAyB;IACpD,IAAIT,QAAQ,CAACS,SAAD,CAAZ,EAAyB;MACvB,OAAOA,SAAP;IACD,CAFD,MAEO,IAAIP,oBAAoB,CAACO,SAAD,CAAxB,EAAqC;MAC1C,OAAOL,uBAAuB,CAACE,KAAD,EAAQG,SAAR,EAAmBD,IAAnB,CAA9B;IACD,CAFM,MAEA;MACL;MACA,OAAOP,qBAAqB,CAACQ,SAAD,CAA5B;IACD;EACF,CATiB,CAAlB;AAUD","names":["isString","fieldFilterExpression","isSelectionPredicate","logicalExpr","parseSelectionPredicate","expression","model","filterOp","node","predicate"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/compile/predicate.ts"],"sourcesContent":["import {isString} from 'vega-util';\nimport {LogicalComposition} from '../logical';\nimport {fieldFilterExpression, isSelectionPredicate, Predicate} from '../predicate';\nimport {logicalExpr} from '../util';\nimport {DataFlowNode} from './data/dataflow';\nimport {Model} from './model';\nimport {parseSelectionPredicate} from './selection/parse';\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model: Model, filterOp: LogicalComposition<Predicate>, node?: DataFlowNode): string {\n  return logicalExpr(filterOp, (predicate: Predicate) => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return parseSelectionPredicate(model, predicate, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}