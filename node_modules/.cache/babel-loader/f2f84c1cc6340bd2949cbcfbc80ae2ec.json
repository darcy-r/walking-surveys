{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, withTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip'; // Define the graph dimensions and margins\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 460;\nconst height = 490;\nconst margin = {\n  top: 0,\n  bottom: 30,\n  left: 0,\n  right: 20\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph;\n\nconst temperatureAccessor = d => d.temperature_apparent; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T07:00:00\"), Date.parse(\"2022-09-11T22:00:00\")],\n  // Math.max(...data.map(x))\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400] // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38] // again TODO: fetch min and max apparent temperatures over API\n\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\n\nconst temperatureColourScale = d => interpolateRdYlBu(getTemperatureStandardised(d)); // tooltip stuff\n\n\nconst tooltipStyles = { ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: 'rgba(0,0,0,0.2)',\n  color: 'rgba(0,0,0,0.8)'\n};\nlet tooltipTimeout; // Finally we'll embed it all in an SVG\n\nfunction ScatterPlot(props) {\n  _s();\n\n  const {\n    showTooltip,\n    hideTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0\n  } = useTooltip({\n    // initial tooltip state\n    tooltipOpen: false,\n    tooltipLeft: width / 3,\n    tooltipTop: height / 3,\n    tooltipData: 'Move me with your mouse or finger'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter-plot-chart\",\n      children: [/*#__PURE__*/_jsxDEV(GridRows, {\n        scale: yScale,\n        width: xMax,\n        height: yMax,\n        stroke: \"#e0e0e0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n        scale: xScale,\n        width: xMax,\n        height: yMax,\n        stroke: \"#e0e0e0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n        top: yMax,\n        scale: xScale,\n        numTicks: width > 461 ? 12 : 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n        scale: yScale,\n        numTicks: height > 491 ? 12 : 8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"-70\",\n        y: \"15\",\n        transform: \"rotate(-90)\",\n        fontSize: 10,\n        children: \"People per hour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), props.data.map((d, i) => {\n        return /*#__PURE__*/_jsxDEV(Group, {\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            cx: xPoint(d),\n            cy: yPoint(d) // {yMax - barHeight}\n            ,\n            r: 6,\n            fill: temperatureColourScale(d),\n            onMouseLeave: () => {\n              tooltipTimeout = window.setTimeout(() => {\n                hideTooltip();\n              }, 300);\n            },\n            onMouseMove: () => {\n              if (tooltipTimeout) clearTimeout(tooltipTimeout);\n              showTooltip({\n                tooltipData: d,\n                tooltipTop: yPoint(d) + 20,\n                tooltipLeft: xPoint(d)\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, `bar-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), tooltipOpen && tooltipData && /*#__PURE__*/_jsxDEV(Tooltip, {\n      top: tooltipTop,\n      left: tooltipLeft,\n      style: tooltipStyles,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"PPH: \", tooltipData.pph]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [tooltipData.day_of_week, \", \", tooltipData.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Apparent temp: \", tooltipData.temperature_apparent, \"\\xBAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ScatterPlot, \"F8+BCwpiCJf6e4XAWccatN9QUw4=\", false, function () {\n  return [useTooltip];\n});\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","Group","Circle","scaleLinear","scaleTime","scaleQuantize","AxisLeft","AxisBottom","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","useTooltip","withTooltip","Tooltip","defaultStyles","WithTooltipProvidedProps","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","temperatureAccessor","temperature_apparent","xScale","range","round","domain","padding","yScale","temperatureRescaler","compose","scale","accessor","data","xPoint","yPoint","getTemperatureStandardised","temperatureColourScale","tooltipStyles","minWidth","backgroundColor","color","tooltipTimeout","ScatterPlot","props","showTooltip","hideTooltip","tooltipOpen","tooltipData","tooltipLeft","tooltipTop","map","i","window","setTimeout","clearTimeout","day_of_week","date"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, withTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip';\n\n// Define the graph dimensions and margins\nconst width = 460;\nconst height = 490;\nconst margin = { top: 0, bottom: 30, left: 0, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\nconst temperatureAccessor = d => d.temperature_apparent;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T07:00:00\"), Date.parse(\"2022-09-11T22:00:00\")], // Math.max(...data.map(x))\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, 2400], // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [-2, 38], // again TODO: fetch min and max apparent temperatures over API\n})\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\nconst temperatureColourScale = (d) => interpolateRdYlBu(getTemperatureStandardised(d))\n\n// tooltip stuff\nconst tooltipStyles = {\n  ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: 'rgba(0,0,0,0.2)',\n  color: 'rgba(0,0,0,0.8)',\n};\nlet tooltipTimeout;\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  const {\n    showTooltip,\n    hideTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0,\n  } = useTooltip({\n    // initial tooltip state\n    tooltipOpen: false,\n    tooltipLeft: width / 3,\n    tooltipTop: height / 3,\n    tooltipData: 'Move me with your mouse or finger',\n  });\n  return (\n      <div>\n        <svg width={width} height={height} className=\"scatter-plot-chart\">\n        <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n        <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n        <AxisBottom top={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n        <AxisLeft scale={yScale} numTicks={height > 491 ? 12 : 8}/>\n        <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n          People per hour\n        </text>\n        {props.data.map((d, i) => {\n          return (\n            <Group key={`bar-${i}`}>\n              <Circle\n                cx={xPoint(d)}\n                cy={yPoint(d)} // {yMax - barHeight}\n                r={6}\n                fill={temperatureColourScale(d)}\n                onMouseLeave={() => {\n                  tooltipTimeout = window.setTimeout(() => {\n                    hideTooltip();\n                  }, 300);\n                }}\n                onMouseMove={() => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout);\n                  showTooltip({\n                    tooltipData: d,\n                    tooltipTop: yPoint(d) + 20,\n                    tooltipLeft: xPoint(d),\n                  });\n                }}\n              />\n            </Group>\n          );\n        })}\n        </svg>\n\n        {tooltipOpen && tooltipData && (\n          <Tooltip top={tooltipTop} left={tooltipLeft} style={tooltipStyles}>\n              <div>PPH: {tooltipData.pph}</div>\n              <div>{tooltipData.day_of_week}, {tooltipData.date}</div>\n              <div>Apparent temp: {tooltipData.temperature_apparent}ºC</div>\n          </Tooltip>\n        )}\n      </div>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}