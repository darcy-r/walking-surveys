{"ast":null,"code":"/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _LocalLogger_level;\n\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as message_1 from './message';\nexport { message_1 as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\n\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\n\nexport class LocalLogger {\n  constructor() {\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n\n    _LocalLogger_level.set(this, Warn);\n  }\n\n  level(_) {\n    if (_) {\n      __classPrivateFieldSet(this, _LocalLogger_level, _, \"f\");\n\n      return this;\n    }\n\n    return __classPrivateFieldGet(this, _LocalLogger_level, \"f\");\n  }\n\n  warn() {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Warn) this.warns.push(...arguments);\n    return this;\n  }\n\n  info() {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Info) this.infos.push(...arguments);\n    return this;\n  }\n\n  debug() {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Debug) this.debugs.push(...arguments);\n    return this;\n  }\n\n  error() {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= ErrorLevel) throw Error(...arguments);\n    return this;\n  }\n\n}\n_LocalLogger_level = new WeakMap();\nexport function wrap(f) {\n  return () => {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\n\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\n\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function error() {\n  current.error(...arguments);\n}\nexport function warn() {\n  current.warn(...arguments);\n}\nexport function info() {\n  current.info(...arguments);\n}\nexport function debug() {\n  current.debug(...arguments);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAIA,SAAQA,KAAR,EAAeC,KAAK,IAAIC,UAAxB,EAAoCC,IAApC,EAA0CC,MAA1C,EAAmEC,IAAnE,QAA8E,WAA9E;2BACyB;sBAAbC;AAEZ;;;;AAGA,MAAMC,IAAI,GAAGH,MAAM,CAACC,IAAD,CAAnB;AACA,IAAIG,OAAO,GAAoBD,IAA/B;AAEA;;;;AAGA,OAAM,MAAOE,WAAP,CAAkB;EAAxBC;IACS,aAAe,EAAf;IACA,aAAe,EAAf;IACA,cAAgB,EAAhB;;IAEPC,6BAAiBN,IAAjB;EA+BD;;EA3BQO,KAAK,CAACC,CAAD,EAAW;IACrB,IAAIA,CAAJ,EAAO;MACLC,6BAAIH,kBAAJ,EAAcE,CAAd,EAAe,GAAf;;MACA,OAAO,IAAP;IACD;;IACD,OAAOE,6BAAIJ,kBAAJ,EAAI,GAAJ,CAAP;EACD;;EAEMK,IAAI,GAAwB;IACjC,IAAID,6BAAIJ,kBAAJ,EAAI,GAAJ,KAAeN,IAAnB,EAAyB,KAAKY,KAAL,CAAWC,IAAX,CAAgB,YAAhB;IACzB,OAAO,IAAP;EACD;;EAEMC,IAAI,GAAwB;IACjC,IAAIJ,6BAAIJ,kBAAJ,EAAI,GAAJ,KAAeR,IAAnB,EAAyB,KAAKiB,KAAL,CAAWF,IAAX,CAAgB,YAAhB;IACzB,OAAO,IAAP;EACD;;EAEMG,KAAK,GAAwB;IAClC,IAAIN,6BAAIJ,kBAAJ,EAAI,GAAJ,KAAeX,KAAnB,EAA0B,KAAKsB,MAAL,CAAYJ,IAAZ,CAAiB,YAAjB;IAC1B,OAAO,IAAP;EACD;;EAEMK,KAAK,GAAwB;IAClC,IAAIR,6BAAIJ,kBAAJ,EAAI,GAAJ,KAAeT,UAAnB,EAA+B,MAAMD,KAAK,CAAC,YAAD,CAAX;IAC/B,OAAO,IAAP;EACD;;AAnCqB;;AAsCxB,OAAM,SAAUuB,IAAV,CAAeC,CAAf,EAA+C;EACnD,OAAO,MAAK;IACVjB,OAAO,GAAG,IAAIC,WAAJ,EAAV;IACAgB,CAAC,CAACjB,OAAD,CAAD;IACAkB,KAAK;EACN,CAJD;AAKD;AAED;;;;AAGA,OAAM,SAAUC,GAAV,CAAcC,SAAd,EAAwC;EAC5CpB,OAAO,GAAGoB,SAAV;EACA,OAAOpB,OAAP;AACD;AAED;;;;AAGA,OAAM,SAAUkB,KAAV,GAAe;EACnBlB,OAAO,GAAGD,IAAV;EACA,OAAOC,OAAP;AACD;AAED,OAAM,SAAUe,KAAV,GAAuC;EAC3Cf,OAAO,CAACe,KAAR,CAAc,YAAd;AACD;AAED,OAAM,SAAUP,IAAV,GAAsC;EAC1CR,OAAO,CAACQ,IAAR,CAAa,YAAb;AACD;AAED,OAAM,SAAUG,IAAV,GAAsC;EAC1CX,OAAO,CAACW,IAAR,CAAa,YAAb;AACD;AAED,OAAM,SAAUE,KAAV,GAAuC;EAC3Cb,OAAO,CAACa,KAAR,CAAc,YAAd;AACD","names":["Debug","Error","ErrorLevel","Info","logger","Warn","message","main","current","LocalLogger","constructor","_LocalLogger_level","level","_","__classPrivateFieldSet","__classPrivateFieldGet","warn","warns","push","info","infos","debug","debugs","error","wrap","f","reset","set","newLogger"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/node_modules/vega-lite/src/log/index.ts"],"sourcesContent":["/**\n * Vega-Lite's singleton logger utility.\n */\n\nimport {Debug, Error as ErrorLevel, Info, logger, LoggerInterface, Warn} from 'vega-util';\nexport * as message from './message';\n\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current: LoggerInterface = main;\n\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger implements LoggerInterface {\n  public warns: any[] = [];\n  public infos: any[] = [];\n  public debugs: any[] = [];\n\n  #level: number = Warn;\n\n  public level(): number;\n  public level(_: number): this;\n  public level(_?: number) {\n    if (_) {\n      this.#level = _;\n      return this;\n    }\n    return this.#level;\n  }\n\n  public warn(...args: readonly any[]) {\n    if (this.#level >= Warn) this.warns.push(...args);\n    return this;\n  }\n\n  public info(...args: readonly any[]) {\n    if (this.#level >= Info) this.infos.push(...args);\n    return this;\n  }\n\n  public debug(...args: readonly any[]) {\n    if (this.#level >= Debug) this.debugs.push(...args);\n    return this;\n  }\n\n  public error(...args: readonly any[]): this {\n    if (this.#level >= ErrorLevel) throw Error(...args);\n    return this;\n  }\n}\n\nexport function wrap(f: (logger: LocalLogger) => void) {\n  return () => {\n    current = new LocalLogger();\n    f(current as LocalLogger);\n    reset();\n  };\n}\n\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger: LoggerInterface) {\n  current = newLogger;\n  return current;\n}\n\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n  current = main;\n  return current;\n}\n\nexport function error(...args: readonly any[]) {\n  current.error(...args);\n}\n\nexport function warn(...args: readonly any[]) {\n  current.warn(...args);\n}\n\nexport function info(...args: readonly any[]) {\n  current.info(...args);\n}\n\nexport function debug(...args: readonly any[]) {\n  current.debug(...args);\n}\n"]},"metadata":{},"sourceType":"module"}