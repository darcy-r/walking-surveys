{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/cathracha is ti\\u0301reolai\\u0301ocht/public life observations/plo-viz-app/src/Plot.js\";\nimport React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic'; // We'll use some mock data from `@visx/mock-data` for this.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  \"street_group_id\": 12,\n  \"time\": \"17:27:46\",\n  \"pph\": 1152.0,\n  \"temperature_apparent\": 11.6\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"17:33:36\",\n  \"pph\": 1188.0,\n  \"temperature_apparent\": 10.6\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"18:14:16\",\n  \"pph\": 1260.0,\n  \"temperature_apparent\": 10.4\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"18:19:58\",\n  \"pph\": 1884.0,\n  \"temperature_apparent\": 10.4\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"13:35:34\",\n  \"pph\": 1008.0,\n  \"temperature_apparent\": 12.2\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"14:03:34\",\n  \"pph\": 1236.0,\n  \"temperature_apparent\": 11.3\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"14:09:14\",\n  \"pph\": 2100.0,\n  \"temperature_apparent\": 11.3\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"16:47:24\",\n  \"pph\": 1056.0,\n  \"temperature_apparent\": 11.9\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"16:53:03\",\n  \"pph\": 1152.0,\n  \"temperature_apparent\": 11.9\n}, {\n  \"street_group_id\": 12,\n  \"time\": \"13:29:51\",\n  \"pph\": 1956.0,\n  \"temperature_apparent\": 12.5\n}]; // Define the graph dimensions and margins\n\nconst width = 500;\nconst height = 500;\nconst margin = {\n  top: 40,\n  bottom: 50,\n  left: 40,\n  right: 30\n}; // Then we'll create some bounds\n\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\n\nconst y = d => d.pph;\n\nconst ta = d => d.temperature_apparent; // And then scale the graph by our data\n\n\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-11T23:00:00\")],\n  // Math.max(...data.map(x))\n  padding: 0.4\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max(...data.map(y))]\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [Math.min(...data.map(ta)), Math.max(...data.map(ta))]\n}); // Compose together the scale and accessor functions to get point functions\n\nconst compose = (scale, accessor) => data => scale(accessor(data));\n\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst temperatureStandardised = compose(temperatureRescaler, ta);\n\nconst temperatureColourScale = t => interpolateRdYlBu(temperatureStandardised(t));\n\nconsole.log(\"Colour value for 12 degrees:\");\nconsole.log(interpolateRdYlBu(0.5));\nconsole.log(\"Colour value for dict:\");\nconsole.log(temperatureColourScale({\n  \"street_group_id\": 12,\n  \"time\": \"17:27:46\",\n  \"pph\": 1152.0,\n  \"temperature_apparent\": 11.6\n})); // Finally we'll embed it all in an SVG\n\nfunction ScatterPlot(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter-plot-chart\",\n      children: data.map((d, i) => {\n        return /*#__PURE__*/_jsxDEV(Group, {\n          children: [/*#__PURE__*/_jsxDEV(GridRows, {\n            scale: yScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n            scale: xScale,\n            width: xMax,\n            height: yMax,\n            stroke: \"#e0e0e0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n            top: yMax,\n            scale: xScale,\n            numTicks: width > 520 ? 10 : 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n            scale: yScale\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Circle, {\n            cx: xPoint(d),\n            cy: yPoint(d) // {yMax - barHeight}\n            ,\n            r: 10,\n            fill: temperatureColourScale(d)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, `bar-${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","Group","Circle","scaleLinear","scaleTime","scaleQuantize","AxisLeft","AxisBottom","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","data","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","Date","parse","time","y","pph","ta","temperature_apparent","xScale","range","round","domain","padding","yScale","Math","max","map","temperatureRescaler","min","compose","scale","accessor","xPoint","yPoint","temperatureStandardised","temperatureColourScale","t","console","log","ScatterPlot","props","i"],"sources":["/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js"],"sourcesContent":["import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\n\n// We'll use some mock data from `@visx/mock-data` for this.\nconst data = [\n  {\"street_group_id\": 12, \"time\": \"17:27:46\", \"pph\": 1152.0, \"temperature_apparent\": 11.6},\n  {\"street_group_id\": 12, \"time\": \"17:33:36\", \"pph\": 1188.0, \"temperature_apparent\": 10.6},\n  {\"street_group_id\": 12, \"time\": \"18:14:16\", \"pph\": 1260.0, \"temperature_apparent\": 10.4},\n  {\"street_group_id\": 12, \"time\": \"18:19:58\", \"pph\": 1884.0, \"temperature_apparent\": 10.4},\n  {\"street_group_id\": 12, \"time\": \"13:35:34\", \"pph\": 1008.0, \"temperature_apparent\": 12.2},\n  {\"street_group_id\": 12, \"time\": \"14:03:34\", \"pph\": 1236.0, \"temperature_apparent\": 11.3},\n  {\"street_group_id\": 12, \"time\": \"14:09:14\", \"pph\": 2100.0, \"temperature_apparent\": 11.3},\n  {\"street_group_id\": 12, \"time\": \"16:47:24\", \"pph\": 1056.0, \"temperature_apparent\": 11.9},\n  {\"street_group_id\": 12, \"time\": \"16:53:03\", \"pph\": 1152.0, \"temperature_apparent\": 11.9},\n  {\"street_group_id\": 12, \"time\": \"13:29:51\", \"pph\": 1956.0, \"temperature_apparent\": 12.5}\n];\n\n// Define the graph dimensions and margins\nconst width = 500;\nconst height = 500;\nconst margin = { top: 40, bottom: 50, left: 40, right: 30 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => Date.parse(\"2022-09-11T\" + d.time);\nconst y = d => d.pph;\nconst ta = d => d.temperature_apparent;\n\n// And then scale the graph by our data\nconst xScale = scaleTime({\n  range: [0, xMax],\n  round: true,\n  domain: [Date.parse(\"2022-09-11T06:00:00\"), Date.parse(\"2022-09-11T23:00:00\")], // Math.max(...data.map(x))\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  range: [yMax, 0],\n  round: true,\n  domain: [0, Math.max(...data.map(y))],\n});\nconst temperatureRescaler = scaleLinear({\n  range: [0, 1],\n  domain: [Math.min(...data.map(ta)), Math.max(...data.map(ta))],\n})\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\nconst temperatureStandardised = compose(temperatureRescaler, ta);\nconst temperatureColourScale = (t) => interpolateRdYlBu(temperatureStandardised(t))\n\nconsole.log(\"Colour value for 12 degrees:\");\nconsole.log(interpolateRdYlBu(0.5));\nconsole.log(\"Colour value for dict:\")\nconsole.log(temperatureColourScale({\"street_group_id\": 12, \"time\": \"17:27:46\", \"pph\": 1152.0, \"temperature_apparent\": 11.6}));\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  return (\n    <div>\n      <svg width={width} height={height} className=\"scatter-plot-chart\">\n        {data.map((d, i) => {\n          return (\n            <Group key={`bar-${i}`}>\n            <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n            <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n            <AxisBottom top={yMax} scale={xScale} numTicks={width > 520 ? 10 : 5} />\n            <AxisLeft scale={yScale} />\n              <Circle\n                cx={xPoint(d)}\n                cy={yPoint(d)} // {yMax - barHeight}\n                r={10}\n                fill={temperatureColourScale(d)}\n              />\n            </Group>\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}