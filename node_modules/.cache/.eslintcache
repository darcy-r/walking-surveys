[{"/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/index.js":"1","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/reportWebVitals.js":"2","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/App.js":"3","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js":"4","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/useWindowDimensions.js":"5"},{"size":535,"mtime":1654505409804,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1654505409805,"results":"8","hashOfConfig":"7"},{"size":4439,"mtime":1655107228602,"results":"9","hashOfConfig":"7"},{"size":4464,"mtime":1655083656550,"results":"10","hashOfConfig":"7"},{"size":611,"mtime":1655083122857,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1t0ad3b",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/index.js",[],[],[],"/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/reportWebVitals.js",[],[],"/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/App.js",["30","31"],[],"import React from 'react';\nimport { MapContainer, TileLayer, useMap, CircleMarker, Popup } from 'react-leaflet'\nimport ScatterPlot from './Plot.js';\nimport streetGeometries from './street_locations.json';\nimport streetAttributes from './street_attributes.json';\nimport chartData from './chart_data.json';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\n\nconst sorted = (l, ascending) => {\n  let c = [...l];\n  c.sort();\n  if (!ascending) {\n    c.reverse()\n  }\n  return c;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSite: null,\n      hoveredNode: null,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(ID) {\n    this.setState({selectedSite: ID});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SiteLocationsMap circleOnClick={(ID) => this.handleChange(ID)} />\n        <div id=\"visualisation-pane\">\n          <div id=\"visualisation-pane-content\">\n            <h1>Walking surveys</h1>\n            {this.state.selectedSite && <SiteTitle site={this.state.selectedSite} />}\n            {this.state.selectedSite && <ScatterPlot data={chartData[this.state.selectedSite]} />}\n            <StreetSectionText site={this.state.selectedSite} />\n            <DatasetInfoText/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction SiteLocationsMap(props) {\n  return (\n    <div>\n      <MapContainer id=\"map-pane\" center={[-33.87319087719761, 151.20681949733816]} zoom={13} zoomControl={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OSM</a> contributors, <a href=\"https://carto.com/attributions\">CARTO</a>'\n        url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\n      />\n      {\n        streetGeometries.map((d) => {\n          return (\n            <CircleMarker\n              center={[d.latitude, d.longitude]}\n              radius={6} fillColor=\"#009800\" fillOpacity={0.8} weight={0}\n              eventHandlers={{\n                click: () => props.circleOnClick(d.street_section_id),\n              }}\n              key={d.street_section_id}>\n              <Popup>Street section ID: {d.street_section_id}</Popup>\n            </CircleMarker>\n          )\n        })\n      }\n      </MapContainer>\n    </div>\n  );\n}\n\nfunction SiteTitle(props) {\n  const s = streetAttributes[props.site];\n  return (\n    <p><i>\n      {s.street_name} between {s.cross_street_a} and {s.cross_street_b}.\n    </i></p>\n  );\n}\n\nfunction StreetSectionText(props) {\n  if (!props.site) {\n    return (\n      <div>\n        <p><i>\n          Select a street section by clicking on a green circle marker on the\n          map to view more information about walking movements at that site.\n        </i></p>\n      </div>\n    );\n  }\n  const minFlow = Math.min(...chartData[props.site].map((d) => d.pph));\n  const maxFlow = Math.max(...chartData[props.site].map((d) => d.pph));\n  const nUniqueDates = (new Set(chartData[props.site].map((d) => d.date))).size;\n  const nUniqueDays = (new Set(chartData[props.site].map((d) => d.day_of_week))).size;\n  const earliestHour = sorted(chartData[props.site].map((d) => d.time), true)[0].substring(0, 2);\n  const latestHour = parseInt(sorted(chartData[props.site].map((d) => d.time), false)[0].substring(0, 2)) + 1;\n  return (\n    <div>\n      <p>\n        Between {minFlow} and {maxFlow} people per hour have been surveyed\n        walking through this street section. Surveys have been undertaken\n        across {nUniqueDates} date{nUniqueDates > 1? 's' : ''},\n        including {nUniqueDays} day{nUniqueDates > 1? 's' : ''} of the week,\n        between the hours of {earliestHour}:00 and {latestHour}:00.\n      </p>\n    </div>\n  );\n}\n\nfunction DatasetInfoText(props) {\n  const csvLink = \"https://public-life-observations.s3.ap-southeast-2.amazonaws.com/datasets_csv.zip\";\n  const parquetLink = \"https://public-life-observations.s3.ap-southeast-2.amazonaws.com/datasets_parquet.zip\";\n  const ccaLink = \"https://creativecommons.org/licenses/by/4.0/legalcode\";\n  return (\n    <div>\n      <p>\n        The entire dataset, including disaggregations by footpath and direction,\n        is available to download as <a href={csvLink}>csv</a> or <a href={parquetLink}>parquet</a> files\n        as open data under a <a href={ccaLink} target=\"_blank\">Creative Commons Attribution 4.0</a> licence.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/Plot.js",["32","33","34","35"],[],"import React from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleTime, scaleQuantize } from '@visx/scale';\nimport { AxisLeft, AxisBottom } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, withTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip';\n\n// tooltip stuff\nconst tooltipStyles = {\n  ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: 'rgba(180,180,180,0.75)',\n  color: 'rgba(30,30,30,1)',\n  fontSize: '0.8rem',\n};\nlet tooltipTimeout;\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  // Define the graph dimensions and margins\n  const width = 460;\n  const height = 490;\n  const margin = { top: 0, bottom: 30, left: 0, right: 20 };\n  // Then we'll create some bounds\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n  // We'll make some helpers to get at the data we want\n  const x = d => Date.parse(\"2022-09-11T\" + d.time);\n  const y = d => d.pph;\n  const temperatureAccessor = d => d.temperature_apparent;\n  // And then scale the graph by our data\n  const xScale = scaleTime({\n    range: [0, xMax],\n    round: true,\n    domain: [Date.parse(\"2022-09-11T07:00:00\"), Date.parse(\"2022-09-11T22:00:00\")], // Math.max(...data.map(x))\n    padding: 0.4,\n  });\n  const yScale = scaleLinear({\n    range: [yMax, 0],\n    round: true,\n    domain: [0, 2400], // Math.max(...data.map(y))] // change this to an API fetch for max PPH\n  });\n  const temperatureRescaler = scaleLinear({\n    range: [1, 0],\n    domain: [-2, 38], // again TODO: fetch min and max apparent temperatures over API\n  })\n  // Compose together the scale and accessor functions to get point functions\n  const compose = (scale, accessor) => data => scale(accessor(data));\n  const xPoint = compose(xScale, x);\n  const yPoint = compose(yScale, y);\n  const getTemperatureStandardised = compose(temperatureRescaler, temperatureAccessor);\n  const temperatureColourScale = (d) => interpolateRdYlBu(getTemperatureStandardised(d))\n  // set up tooltips\n  const {\n    showTooltip,\n    hideTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0,\n  } = useTooltip({\n    // initial tooltip state\n    tooltipOpen: false,\n    tooltipLeft: width / 3,\n    tooltipTop: height / 3,\n    tooltipData: 'Move me with your mouse or finger',\n  });\n  // render\n  return (\n      <div>\n        <svg width={width} height={height} className=\"scatter-plot-chart\">\n        <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n        <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n        <AxisBottom top={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n        <AxisLeft scale={yScale} numTicks={height > 491 ? 12 : 8}/>\n        <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n          People per hour\n        </text>\n        {props.data.map((d, i) => {\n          return (\n            <Group key={`circle-${i}`}>\n              <Circle\n                cx={xPoint(d)}\n                cy={yPoint(d)} // {yMax - barHeight}\n                r={6}\n                fill={temperatureColourScale(d)}\n                onMouseLeave={() => {\n                  tooltipTimeout = window.setTimeout(() => {\n                    hideTooltip();\n                  }, 300);\n                }}\n                onMouseMove={() => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout);\n                  showTooltip({\n                    tooltipData: d,\n                    tooltipTop: yPoint(d) + 30,\n                    tooltipLeft: xPoint(d),\n                  });\n                }}\n              />\n            </Group>\n          );\n        })}\n        </svg>\n\n        {tooltipOpen && tooltipData && (\n          <Tooltip top={tooltipTop} left={tooltipLeft} style={tooltipStyles}>\n            <div className=\"tooltip-paragraph\">\n              PPH: {tooltipData.pph}\n            </div>\n            <div className=\"tooltip-paragraph\">\n              {tooltipData.time}<br/>\n              {tooltipData.day_of_week}, {tooltipData.date}<br/>\n              Apparent temp: {tooltipData.temperature_apparent}ºC\n            </div>\n          </Tooltip>\n        )}\n      </div>\n  );\n}\n\nexport default ScatterPlot;\n","/Users/darcyroche/Documents/cathracha is tíreolaíocht/public life observations/plo-viz-app/src/useWindowDimensions.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":2,"column":35,"nodeType":"38","messageId":"39","endLine":2,"endColumn":41},{"ruleId":"40","severity":1,"message":"41","line":127,"column":30,"nodeType":"42","messageId":"43","endLine":127,"endColumn":64,"fix":"44"},{"ruleId":"36","severity":1,"message":"45","line":4,"column":34,"nodeType":"38","messageId":"39","endLine":4,"endColumn":47},{"ruleId":"36","severity":1,"message":"46","line":7,"column":10,"nodeType":"38","messageId":"39","endLine":7,"endColumn":22},{"ruleId":"36","severity":1,"message":"47","line":8,"column":22,"nodeType":"38","messageId":"39","endLine":8,"endColumn":33},{"ruleId":"36","severity":1,"message":"48","line":9,"column":10,"nodeType":"38","messageId":"39","endLine":9,"endColumn":34},"no-unused-vars","'useMap' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"49","text":"50"},"'scaleQuantize' is defined but never used.","'schemeRdYlBu' is defined but never used.","'withTooltip' is defined but never used.","'WithTooltipProvidedProps' is defined but never used.",[4342,4342]," rel=\"noreferrer\""]